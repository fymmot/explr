{"version":3,"sources":["api/lastfm.js","script.js","api/api.js","map.js","screenshot.js"],"names":["api","lastfm","key","url","setKeyInfo","success","keyInfo","total","fails","keyI","keys","window","forEach","k","send","method","options","callback","retries","undefined","xhr","gotResponse","aborted","tryGet","tries","cb","avgErrors","reduce","avg","i","arr","length","bestKeys","_url","_key","filter","d3","json","el","replace","e","d","clearTimeout","timeout","JSON","parse","response","error","errInfo","errorCode","try","console","warn","setTimeout","bind","abort","STORED_ARTISTS","CACHED_NO_COUNTRIES","superCount","USER_TAGS","getCountriesData","promise","Promise","res","rej","csv","err","data","id","names","split","tags","mainName","tag","name","then","map","splits","concat","_objectSpread","splice","flat","alias","nest","toLowerCase","cname","log","getCountry","artist","responseData2","demonymTag","countryTag","bestTag","toptags","theTroubles","country","count","some","t","tname","includes","info","Object","assign","getCountries","artists","checkCount","select","html","SESSION","total_artists","localforage","setItem","returnList","returnObject","push","Date","getTime","getTags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","cancelRecommendationRequests","getRecommendations","recommendations","slice","userTagObj","rollup","xhr1","tagCounts","topartists","a","num","xhr2","data2","hasTags","sort","b","getFriends","document","getItem","val","CACHED_USERS","localStorage","cached_users","clearExplrCache","theme","clear","getAllArtists","user","currPage","responseData","confirm","saveToStorage","location","reload","maxPage","totalPages","remove","style","artistNames","newArtist","playcount","dataObj","leaves","countryCountObj","artistList","addArtistsWithNoCountry","putCountryCount","end","getUserTags","alert","origin","pathname","c","tagCount","topArtists","forbidden","taglist","lim","Math","min","nogood","user_tags","stringify","random","welcomeOverlay","randomcountrylist","listOfArtistsWithNoCountry","noCountriesListEl","_art","append","visibility","pointer-events","loader","transition","duration","each","delay","param","href","addEventListener","evt","keyCode","screenshot","render","ga","hitType","eventCategory","eventAction","eventLabel","nextTheme","substr","selectAll","friends","friendName","updateName","attr","target","on","this","classed","floor","object","legend","colorArray","countryScore","throttleTimer","redraw","move","height","width","topo","projection","path","svg","g","countryNames","centered","color","countryPlaylists","zoom","behavior","scaleExtent","countryCount","mydomain","maxartists","maxplaycount","updateDimensions","innerHeight","getElementById","offsetWidth","getCountryPlaycount","numbersWithSpace","x","toString","updateScale","max","pow","E","scale","threshold","domain","range","drawPlays","list","closeButton","offsetL","offsetT","tooltip","infoContainer","cnameDiv","themes","blue_black","green_black","pink_black","pink_white","green_white","red_white","toTheme","themeList","indexOf","body","setup","geo","naturalEarth","translate","PI","call","click","class","draw","redrawMap","background-color","border-color","enter","insert","properties","offsetLeft","offsetTop","mouse","node","parseInt","clicked","removeArtistDiv","len","ceil","legend_labels","y","text1","text","getComputedTextLength","_","tr","sc","animate","event","s","h","highlightCountry","invert","makeArtistDiv","nameTags","n","join","tagTags","showNextFive","showPreviousFive","showArtists","currentNoArtists","currentCount","pl","find","linkdiv","lastFmLink","recLoadingDiv","uri","playlistName","first","last","initial","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","recLoadingMessage","src","display","margin","namelist","Array","array","j","temp","shuffleArray","art","artistimg","artistname","recoArtistDiv","artisttaglist","usertaglist","summaryText","z","elem","pos","offsetHeight","tagdiv","p","countryElement","bounds","modscaleX","modscaleY","pt","countries","world","topojson","feature","objects","features","countryList","drawCenteredText","obj","ctx","font","fillText","string","w","measureText","lineWidth","strokeStyle","strokeText","explrLogo","Image","canvas","createElement","getContext","backgroundColor","getComputedStyle","textColor","fill","font-family","font-size","stroke","canvg","XMLSerializer","serializeToString","onload","save","globalAlpha","fillStyle","scoreString","titleString","fillRect","restore","drawImage","toDataURL","getElementsByClassName","close"],"mappings":"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","file":"../all.min.js","sourcesContent":["var api = api || {};\r\n\r\napi.lastfm = {};\r\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\r\napi.lastfm.url = \"https://ws.audioscrobbler.com/2.0/\";\r\n\r\n(function (api) {\r\n\tlet keyI = 0;\r\n\tlet keys = [\r\n\t\t// https://gitlab.gnome.org/World/lollypop/blob/master/lollypop/lastfm.py\r\n\t\t\"7a9619a850ccf7377c46cf233c51e3c6\",\r\n\t\t\r\n \t\t// https://github.com/rembo10/headphones/blob/master/headphones/lastfm.py\r\n\t\t\"395e6ec6bb557382fc41fde867bce66f\",\r\n\t\t\r\n\t\t// https://github.com/ampache/ampache/issues/1694\r\n\t\t\"13893ba930c63b1b2cbe21441dc7f550\",\r\n\r\n\t\t// https://www.reddit.com/r/lastfm/comments/3okkij/cant_create_lastfm_api_key/\r\n\t\t\"4cb074e4b8ec4ee9ad3eb37d6f7eb240\",\r\n\r\n\t\t// https://www.w3resource.com/API/last.fm/tutorial.php\r\n\t\t\"4a9f5581a9cdf20a699f540ac52a95c9\",\r\n\r\n\t\t// https://www.reddit.com/r/lastfm/comments/3l3cae/cant_get_a_lastfm_api_key/\r\n\t\t\"57ee3318536b23ee81d6b27e36997cde\",\r\n\r\n\t\t// original explr api key\r\n\t\t\"865b1653dbe200905a5b75d9d839467a\",\r\n\r\n\t\t// https://www.w3resource.com/API/last.fm/example.html\r\n\t\t\"68b2125fd8f8fbadeb2195e551f32bc4\",\r\n\r\n\t\t// https://rstudio-pubs-static.s3.amazonaws.com/236264_81312ba4d795474c8641dd0e2af83cba.html\r\n\t\t\"1ba315d4d1673bbf88aed473f1917306\"\r\n\t];\r\n\tlet keyInfo = window.keyInfo = {};\r\n\tkeys.forEach(k => keyInfo[k] = { success: 0, fails: 0, total: 0 });\r\n\r\n\tlet rotateKey = function () {\r\n\t\tlet avgErrors = keys.reduce((avg, k, i, arr) => avg + keyInfo[k].fails / arr.length, 0);\r\n\t\tlet bestKeys = keys.filter(k => keyInfo[k].fails <= avgErrors);\r\n\t\tbestKeys = bestKeys.length ? bestKeys : keys;\r\n\t\tlet key = bestKeys[++keyI % bestKeys.length];\r\n\r\n\t\t// console.log({ key, avgErrors, bestKeys });\r\n\r\n\t\treturn key;\r\n\t}\r\n\r\n\tlet setKeyInfo = function (key, success) {\r\n\t\tkeyInfo[key].total++;\r\n\t\tkeyInfo[key].success += success ? 1 : 0;\r\n\t\tkeyInfo[key].fails += success ? 0 : 1;\r\n\t}\r\n\r\n\t/**\r\n\t* Send an API call to last.fm\r\n\t* @param {String} method    The method name (e.g. \"library.getartists\")\r\n\t* @param {Array} options    An array of tuples (arrays with two elements)\r\n\t                            with options for the request: [\"key\", \"value\"]\r\n\t* @param {Function} callback    The callback function to call with the data\r\n\t                                returned from the request. Takes two arguments,\r\n\t                                error and data (callback(error, data))\r\n\t*/\r\n\tapi.lastfm.send = function (method, options, callback, retries) {\r\n\t\tlet getUrl = (apiKey) => {\r\n\t\t\tlet _url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\r\n\t\t\t\tapiKey + \"&format=json\";\r\n\r\n\t\t\toptions.forEach(function (el) {\r\n\t\t\t\t_url += \"&\" + el[0] + \"=\" +\r\n\t\t\t\t\t(el[1] + \"\")\r\n\t\t\t\t\t.replace(\"&\", \"%26\")\r\n\t\t\t\t\t.replace(\"/\", \"%2F\")\r\n\t\t\t\t\t.replace(\"+\", \"%2B\")\r\n\t\t\t\t\t.replace(\"\\\\\", \"%5C\");\r\n\t\t\t});\r\n\r\n\t\t\treturn _url;\r\n\t\t};\r\n\r\n\t\tretries = undefined === retries ? 10 : retries\r\n\t\tlet xhr, gotResponse, aborted = false;\r\n\r\n\t\tfunction tryGet(tries, cb) {\r\n\t\t\tlet _key = rotateKey();\r\n\t\t\txhr = d3.json(getUrl(_key), function (e, d) {\r\n\t\t\t\tif (aborted) {\r\n\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (e) { // we got an actual server error: 4xx, 5xx\r\n\t\t\t\t\td = JSON.parse(e.response);\r\n\t\t\t\t\t// now e and d are the same\r\n\t\t\t\t} else if (d.error) {\r\n\t\t\t\t\t// we got 200 BUT it's an error\r\n\t\t\t\t\te = d;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (e) {\r\n\t\t\t\t\tsetKeyInfo(_key, false);\r\n\r\n\t\t\t\t\tlet errInfo = {\r\n\t\t\t\t\t\tmethod: method,\r\n\t\t\t\t\t\terrorCode: e && e.error,\r\n\t\t\t\t\t\ttry: tries,\r\n\t\t\t\t\t\toptions: options,\r\n\t\t\t\t\t\tkey: _key,\r\n\t\t\t\t\t};\r\n\t\t\t\t\t// alert(\"ERROR\");\r\n\t\t\t\t\tif (tries < retries) {\r\n\t\t\t\t\t\tconsole.warn(\"Retry request: \", errInfo);\r\n\t\t\t\t\t\tsetTimeout(tryGet.bind(null, tries + 1, cb), tries * 3000);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (tries >= retries) {\r\n\t\t\t\t\t\tconsole.warn(\"Retry failed after \" + retries + \" attempts, will stop trying.\", errInfo);\r\n\t\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t\t\taborted = true;\r\n\t\t\t\t\t\te = \"ERROR\";\r\n\t\t\t\t\t\td = {\r\n\t\t\t\t\t\t\terror: \"Took to long to respond\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetKeyInfo(_key, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgotResponse = true;\r\n\t\t\t\tcb(e, d);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\ttryGet(0, callback);\r\n\r\n\t\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\r\n\t\tlet timeout = setTimeout(function () {\r\n\t\t\tif (!gotResponse) {\r\n\t\t\t\t//console.log(\"GET \" + url + \" took to long, aborting\");\r\n\t\t\t\txhr.abort();\r\n\t\t\t\tcallback(\"ERROR\", {\r\n\t\t\t\t\terror: \"Took to long to respond\"\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}, 20000);\r\n\r\n\t\treturn {\r\n\t\t\tabort: function () {\r\n\t\t\t\taborted = true;\r\n\t\t\t\txhr.abort();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n})(api);","/* requires:\r\napi/api.js\r\napi/lastfm.js\r\n*/\r\n\r\nvar STORED_ARTISTS;\r\nlocalforage.getItem(\"artists\", function (err, val) {\r\n    STORED_ARTISTS = val || {};\r\n});\r\n\r\nvar CACHED_NO_COUNTRIES;\r\nlocalforage.getItem(\"no_countries\", function (err, val) {\r\n    CACHED_NO_COUNTRIES = val || {};\r\n})\r\n\r\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\r\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\r\nvar SESSION = {};\r\n\r\nfunction clearExplrCache() {\r\n    var theme = window.localStorage.getItem(\"theme\");\r\n    window.localStorage.clear();\r\n    window.localStorage.setItem(\"theme\", theme);\r\n\r\n    return localforage.clear();\r\n}\r\n\r\n(function () {\r\n    // user = prompt(\"Input your user name, get top 20 artists\")\r\n    var user, currPage = 1,\r\n        maxPage;\r\n    var countryCountObj = {};\r\n    var count = 0;\r\n    var tries = 0;\r\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\r\n    var listOfArtistsWithNoCountry = [];\r\n\r\n    /**\r\n     * adds artists with no country to the array of artists with\r\n     * no country :)\r\n     * \r\n     * @param {*} data Response from api.getCountries; array of\r\n     * artists that may or may not have country\r\n     */\r\n    var addArtistsWithNoCountry = function (data) {\r\n        listOfArtistsWithNoCountry = listOfArtistsWithNoCountry.concat(data);\r\n\r\n        var noCountriesListEl = d3.select(\".no-countries ul\");\r\n        data.forEach(function (_art) {\r\n            noCountriesListEl.append(\"li\").html('<a href=\"' + _art.url + '\" target=\"blank\" class=\"no-countries__link\">' + _art.artist + '</a>');\r\n        })\r\n\r\n        d3.select(\".no-countries__info\").html(listOfArtistsWithNoCountry.length + \" artists without a country:\");\r\n\r\n        saveToStorage(\"no_countries\", listOfArtistsWithNoCountry);\r\n\r\n        if (listOfArtistsWithNoCountry.length) {\r\n            d3.select(\".no-countries\").style({\r\n                visibility: \"visible\",\r\n                \"pointer-events\": \"all\",\r\n            });\r\n        }\r\n    }\r\n\r\n    var getAllArtists = function () {\r\n        // console.log(\"get artists\")\r\n\r\n        api.lastfm.send(\"library.getartists\", [\r\n                [\"user\", user],\r\n                [\"limit\", 50],\r\n                [\"page\", currPage]\r\n            ],\r\n            function (error, responseData) {\r\n                // Special case for unfortunate users\r\n                if (responseData === \"\") {\r\n                    console.error('Got empty string (\"\") as response, skipping page.')\r\n                    currPage++;\r\n                    getAllArtists();\r\n                    return;\r\n                }\r\n                if (error || responseData.error) {\r\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\r\n\r\n                    // Try again, but not forever\r\n                    if (tries++ < 5) {\r\n                        getAllArtists();\r\n\r\n                        // TODO: Show erorr message ;)\r\n                    } else {\r\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\r\n                        if (refresh) {\r\n                            clearExplrCache().then(function () {\r\n                                saveToStorage(\"artists\", STORED_ARTISTS, function () {\r\n                                    window.location.reload()\r\n                                });\r\n                            })\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                tries = 0;\r\n\r\n                if (currPage === 1) {\r\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\r\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\r\n\r\n                    if (SESSION.total_artists === 0) {\r\n                        d3.select(\".bubblingG\").remove();\r\n                        d3.select(\"#loading-text\")\r\n                            .html(\"You haven't listened to any<br> artists yet. Start scrobbling with <br>\\\r\n                                                        <a href='http://evolver.fm/2012/05/08/how-to-scrobble-to-last-fm-from-itunes-\" +\r\n                                \"spotify-and-more/'>your favorite music player!</a>\");\r\n                        d3.select(\".loader\").style(\"pointer-events\", \"all\");\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                currPage++;\r\n                // console.log(\"Artists done, get countries\");\r\n\r\n                // Save artist data to localStorage (and create a list of artist names)\r\n                var artistNames = []\r\n                responseData.artists.artist.forEach(function (newArtist) {\r\n                    var a = STORED_ARTISTS[newArtist.name] || {};\r\n\r\n                    a.playcount = +newArtist.playcount;\r\n                    a.url = newArtist.url;\r\n\r\n                    STORED_ARTISTS[newArtist.name] = a;\r\n                    artistNames.push(newArtist.name);\r\n                })\r\n                saveToStorage(\"artists\", STORED_ARTISTS);\r\n                // var n = count++;\r\n\r\n                // Get country for all artists\r\n                api.getCountries(artistNames,\r\n                    function (data) {\r\n                        // Count plays for each country?\r\n                        // countryCountList = countryCountList.concat(data);\r\n                        var dataObj = d3.nest() //Gör så att man kan slå upp på land-id och få upp en lista på artister.\r\n                            .key(function (d) {\r\n                                return d.id;\r\n                            })\r\n                            .rollup(function (leaves) { //gör så att man får en lista på alla artister för ett land.\r\n                                return leaves;\r\n                            })\r\n                            .map(data); //Skickar in en lista med ett objekt för varje artist.\r\n\r\n                        d3.keys(dataObj).forEach(function (id) {\r\n                            countryCountObj[id] = countryCountObj[id] || {};\r\n                            countryCountObj[id][user] = countryCountObj[id][user] || [];\r\n                            var artistList = countryCountObj[id][user]; // list of artists for a country\r\n\r\n                            // if (artistList) {\r\n                            artistList = artistList.concat(dataObj[id]);\r\n\r\n                            //Lägger på de nya dataObj-elementen i countryCountObj-listan.\r\n                            // } else {\r\n                            //     artistList = dataObj[id];\r\n                            // }\r\n\r\n                            artistList.forEach(function (el, i) {\r\n                                //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\r\n                                artistList[i].url = STORED_ARTISTS[el.artist].url;\r\n                                artistList[i].playcount = STORED_ARTISTS[el.artist].playcount;\r\n                                // if (artistList[i].users) {\r\n                                //     artistList[i].users.push(user);\r\n                                // } else {\r\n                                //     artistList[i].users = [user];\r\n                                // }\r\n                            });\r\n                            //countryCountObj är en lista med \"country\"-objekt. \r\n                            //Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\r\n                            //dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\r\n                            countryCountObj[id][user] = artistList;\r\n                        })\r\n\r\n                        addArtistsWithNoCountry(data.filter(function (artist) {\r\n                            return !artist.id; // && artist.artist && artist.url;\r\n                        }));\r\n\r\n                        map.putCountryCount(countryCountObj);\r\n\r\n                        if (currPage > maxPage) {\r\n                            end();\r\n                            return;\r\n                        } else {\r\n                            getAllArtists();\r\n                        }\r\n                    });\r\n            });\r\n    }\r\n\r\n    var getRecommendations = function () {\r\n        var currPage = 1,\r\n            limit = 50,\r\n            maxPage = 1000 / limit;\r\n        var countriesList = JSON.parse(window.localStorage.countries);\r\n\r\n        var countriesObj = d3.nest().key(function (d) {\r\n            return d.name;\r\n        }).rollup(function (d) {\r\n            return d[0];\r\n        }).map(countriesList);\r\n        // Get \"all\" artists from one country\r\n        // countriesList.forEach(function(country){\r\n\r\n        // });\r\n        api.lastfm.send(\"tag.gettopartists\", [\r\n            [\"tag\", \"swedish\"],\r\n            [\"limit\", limit],\r\n            [\"page\", currPage]\r\n        ], function (err, data) {\r\n            var artists = data.topartists.artist;\r\n            // For each artist, get their tags\r\n            artists.forEach(function (a) {\r\n                api.lastfm.send(\"artist.gettoptags\", [\r\n                    [\"artist\", a.name]\r\n                ], function (err, data) {\r\n                    // console.log(data);\r\n                })\r\n            })\r\n            // Look for user's top tags in artist tags\r\n            // If a lot of matches, save to recommended artists for that country\r\n        });\r\n\r\n    }\r\n\r\n    var getUserTags = function (err, data) {\r\n        // err = err ||data.error;\r\n        if (err || data.error) {\r\n            if (data && data.error === 6) {\r\n                alert(\"User not found\");\r\n                window.location.assign(window.location.origin + window.location.pathname);\r\n            }\r\n        }\r\n\r\n\r\n        /*if (err || data.error) {\r\n            console.error(\"Erorr in getUserTags\", err, data);\r\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\r\n            window.location.replace(window.location.origin + window.location.pathname);\r\n        }*/\r\n\r\n        var c = 0;\r\n\r\n        var tagCount = {};\r\n\r\n        //console.log(\"Gotta get tags\")\r\n\r\n        var topArtists = data.topartists.artist;\r\n        var done = function () {\r\n            // make list of tags to sort\r\n            USER_TAGS = [];\r\n            //Remove specific tags from user's top tags\r\n            let forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\", \"seen live\", \"english\", \"singer-songwriter\", \"spanish\", \"french\"];\r\n            d3.keys(tagCount).forEach(function (el) {\r\n                var nogood = false\r\n                for (let i = 0; i < forbidden.length; i++) {\r\n                    if (el === forbidden[i]) {\r\n                        nogood = true;\r\n                    }\r\n                }\r\n                if (!nogood) {\r\n                    USER_TAGS.push({\r\n                        tag: el,\r\n                        count: tagCount[el]\r\n                    });\r\n                }\r\n            })\r\n            USER_TAGS.sort(function (a, b) {\r\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n            });\r\n            console.info(\"Done getting tags, saved to localStorage.user_tags\")\r\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\r\n        }\r\n\r\n\r\n        topArtists.forEach(function (el, i) {\r\n            // get top ten tags and save to users tag count....\r\n            setTimeout(function () { // Set timeout to not stop artists from loading...\r\n                api.lastfm.send(\"artist.gettoptags\", [\r\n                    [\"artist\", el.name]\r\n                ], function (err, data) {\r\n                    let taglist = data.toptags && data.toptags.tag;\r\n                    if (taglist) {\r\n                        var lim = Math.min(taglist.length, 10);\r\n                        for (var i = 0; i < lim; i++) {\r\n                            if (tagCount[taglist[i].name]) {\r\n                                tagCount[taglist[i].name]++;\r\n                            } else {\r\n                                tagCount[taglist[i].name] = 1;\r\n                            }\r\n                        }\r\n                        // console.log(c, topArtists.length)\r\n                    }\r\n\r\n                    c++;\r\n                    if (c == topArtists.length - 1) {\r\n                        done();\r\n                    }\r\n                });\r\n            }, Math.random() * 3000);\r\n        });\r\n\r\n    }\r\n\r\n    var begin = function () {\r\n        //Send analytics event\r\n        ga('send', 'event', 'splash screen', 'Go!', 'test');\r\n        // fade out username input box\r\n        var welcomeOverlay = d3.select(\"#welcome-container\");\r\n        welcomeOverlay.transition().duration(2000)\r\n            .style(\"opacity\", 0)\r\n            .each(\"end\", function () {\r\n                welcomeOverlay.remove();\r\n            });\r\n\r\n        // Fade in loader\r\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\r\n        d3.select(\"#loading-text\").html(\"Getting library...\");\r\n        setTimeout(function () {\r\n            if (d3.select(\"#loading-text\").html() === \"Getting library...\") {\r\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\r\n\r\n                setTimeout(function () {\r\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\r\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\r\n                            .style(\"pointer-events\", \"all\");\r\n                    }\r\n                }, 8000);\r\n            }\r\n        }, 8000);\r\n\r\n        // Fade in legend, progress-bar etc\r\n        d3.selectAll(\".on-map-view\").style({\r\n            \"visibility\": \"visible\",\r\n            //            \"opacity\": 0\r\n        }) //.transition().duration(1000).style(\"opacity\", 1);\r\n\r\n        // Get user tags\r\n        api.lastfm.send(\"user.gettopartists\", [\r\n            [\"user\", user],\r\n            [\"period\", \"12months\"],\r\n            [\"limit\", \"50\"]\r\n        ], getUserTags);\r\n\r\n        // Get user friends\r\n        api.getFriends(function (err, data) {\r\n            try {\r\n                var friends = data.friends.user;\r\n                var i = 0;\r\n                var friendName = d3.select(\"#friend-name\");\r\n\r\n                var updateName = function () {\r\n                    friendName.html(\"\");\r\n                    friendName.append(\"a\").attr({\r\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\r\n                        target: \"_self\",\r\n                    }).html(friends[i].name);\r\n                }\r\n\r\n                d3.selectAll(\".arrow\").on(\"click\", function () {\r\n                    if (d3.select(this).classed(\"left\")) {\r\n                        // Go left\r\n                        i = (i === 0 ? friends.length - 1 : i - 1);\r\n                    } else {\r\n                        // Go right\r\n                        i = (i + 1) % friends.length;\r\n                    }\r\n\r\n                    updateName();\r\n                })\r\n\r\n                updateName();\r\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\r\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\r\n\r\n            } catch (e) {\r\n                console.error(\"getFriends()\", e);\r\n                d3.select(\"#friends\").html(\"&nbsp;Couldn't find any<br>friends on last.fm :(&nbsp;\")\r\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\r\n            }\r\n        });\r\n\r\n        if (CACHED_USERS[user]) {\r\n            // TODO: use timestamp\r\n            console.info(\"No new artists on last.fm!\");\r\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\r\n\r\n            localforage.getItem(\"no_countries\", function (err, val) {\r\n                addArtistsWithNoCountry(val || []);\r\n            });\r\n\r\n            // Get number of artists for screenshot etc.\r\n            api.lastfm.send(\"library.getartists\", [\r\n                    [\"user\", user],\r\n                    [\"limit\", 1],\r\n                    [\"page\", 1]\r\n                ],\r\n                function (error, responseData) {\r\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\r\n                });\r\n\r\n            setTimeout(function () {\r\n                map.putCountryCount(countryCountObj);\r\n                end();\r\n            }, 1000)\r\n        } else {\r\n            // Save theme\r\n            var theme = window.localStorage.theme;\r\n            window.localStorage.clear();\r\n            if (theme) {\r\n                window.localStorage.theme = theme;\r\n            }\r\n            getAllArtists();\r\n        }\r\n    }\r\n\r\n    var end = function () {\r\n        // We're done, fade out loader\r\n        var loader = d3.select(\".loader\");\r\n        loader.transition().duration(2000)\r\n            .style(\"opacity\", 0)\r\n            .each(\"end\", function () {\r\n                loader.remove();\r\n            });\r\n        //Also fade out progress bar text (after a short delay)\r\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\r\n            .style(\"opacity\", 0);\r\n\r\n        CACHED_USERS = {};\r\n        CACHED_USERS[user] = new Date().getTime();\r\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\r\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\r\n    }\r\n\r\n    // // Set theme\r\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\r\n\r\n    // Try to get username from url\r\n    var param = window.location.href.split(\"username=\")[1];\r\n\r\n    if (param) { // We already have a user\r\n        // set up keyboard shortcuts\r\n        window.addEventListener(\"keydown\", function (evt) {\r\n            switch (evt.keyCode) {\r\n                // s\r\n                case 83:\r\n                    screenshot.render();\r\n                    //Send google analytics event\r\n                    ga('send', {\r\n                        hitType: 'event',\r\n                        eventCategory: 'Hotkeys',\r\n                        eventAction: 'Take screenshot',\r\n                        eventLabel: 'test'\r\n                    });\r\n                    break;\r\n                    // t\r\n                case 84:\r\n                    nextTheme();\r\n                    //Send google analytics event\r\n                    ga('send', {\r\n                        hitType: 'event',\r\n                        eventCategory: 'Hotkeys',\r\n                        eventAction: 'Cycle theme',\r\n                        eventLabel: 'test'\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        if (param.length > 15) {\r\n            param = param.substr(0, 15);\r\n        }\r\n        user = param;\r\n        SESSION.name = param;\r\n        begin();\r\n    } else {\r\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\r\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\r\n    }\r\n\r\n    var saveToStorage = function (key, object, cb) {\r\n        console.log({key,object,cb})\r\n        localforage.setItem(key, object, cb || function () {});\r\n    }\r\n})();","/*requires:\r\napi/lastfm.js\r\n*/\r\n\r\nvar api = api || {};\r\nvar superCount = 0;\r\n\r\n(function(window, document) {\r\n\tapi.getCountriesData = (() => {\r\n\t\tlet promise;\r\n\r\n\t\treturn () => {\r\n\t\t\tif (promise) { return promise; }\r\n\r\n\t\t\treturn promise = new Promise((res, rej) => {\r\n\t\t\t\td3.csv(\"assets/data/countries.csv\", function (err, data) {\r\n\t\t\t\t\tdata.forEach(d => {\r\n\t\t\t\t\t\td.id = +d.id;\r\n\t\t\t\t\t\td.names = d.names ? d.names.split(\"|\") : [];\r\n\t\t\t\t\t\td.tags = d.tags ? d.tags.split(\"|\") : [];\r\n\t\t\t\t\t\td.mainName = d.names[0];\r\n\t\t\t\t\t\td.tag = d.tags[0];\r\n\t\t\t\t\t\td.name = d.mainName;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tres(data);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t})();\r\n\t\r\n\tapi.getCountriesData().then(data => {\r\n\t\tdata = data.map(d => {\r\n\t\t\tlet splits = [];\r\n\r\n\t\t\tif (d.names.length === 1 && d.tags.length === 0) {\r\n\t\t\t\tsplits = [d];\r\n\t\t\t}\r\n\t\t\tif (d.names.length > 1) {\r\n\t\t\t\tsplits = splits.concat(d.names.map(name => ({ ...d, name })));\r\n\t\t\t}\r\n\t\t\tif (d.tags.length > 0) {\r\n\t\t\t\tsplits = splits.concat(d.tags.map(tag => ({ ...d, tag }))); \r\n\t\t\t}\r\n\r\n\t\t\tif(d.names.length > 1 &&d.tags.length > 0){ splits.splice(0,1); }\r\n\t\t\t\r\n\t\t\treturn splits;\r\n\t\t}).flat();\r\n\r\n\t\tlet alias = d3.nest()\r\n\t\t\t.key(function(d) {\r\n\t\t\t\tif (d && d.tag) {\r\n\t\t\t\t\treturn d.tag.toLowerCase();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.map(data);\r\n\r\n\t\tlet cname = d3.nest()\r\n\t\t\t.key(function(d) {\r\n\t\t\t\treturn d.name.toLowerCase();\r\n\t\t\t})\r\n\t\t\t.map(data);\r\n\r\n\t\t\tconsole.log({data,alias,cname});\r\n\r\n\t\t/**\r\n\t\t * Tries to find out the country for a specified artist.\r\n\t\t * @param  {String}   artist   Name of the artist to get country for\r\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\r\n\t\t *                             The callback function takes one argument, this object:\r\n\t\t *\r\n\t\t * \t\t\t\t\t\t\t\t```\r\n\t\t *                             {\r\n\t\t *                             \t\"artist\": \"\", // <artist name>,\r\n\t\t *                             \t\"country\": \"\", // <country name>,\r\n\t\t *                             \t\"id\": \"\", // <country id>,\r\n\t\t *                             \t\"tag\": \"\", // <the tag that decided the country (e.g. Swedish for Sweden)>\r\n\t\t *                             }\r\n\t\t * \t\t\t\t\t\t\t\t```\r\n\t\t *\r\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\r\n\t\t *\r\n\t\t */\r\n\t\tapi.getCountry = function(artist, callback) {\r\n\t\t\t// Get artists country code here, from last.fm or whatever\r\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err, responseData2) {\r\n\t\t\t\t// Return if something failed\r\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\r\n\t\t\t\t\tresponseData2.toptags.tag.length) {\r\n\t\t\t\t\tcallback({\r\n\t\t\t\t\t\t\"artist\": artist\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Lista med taggar vi vill dubbelkolla\r\n\t\t\t\tvar troubleCountries = [\"georgia\", \"ireland\"];\r\n\t\t\t\tvar troubleLanguages = [\"spanish\", \"french\", \"english\", \"portuguese\", \"russian\", \"italian\", \"japanese\", \"korean\", \"indian\", \"swedish\", \"irish\"];\r\n\t\t\t\tvar theTroubles = [].concat(troubleCountries, troubleLanguages);\r\n\r\n\t\t\t\t// check for country-tags in the artist's tags\r\n\t\t\t\tlet demonymTag = { tag: \"\", id: null, country: \"\", count: 0 };\r\n\t\t\t\tlet countryTag = demonymTag;\r\n\r\n\t\t\t\tresponseData2.toptags.tag.some(function (t, i) {\r\n\t\t\t\t\tvar tname = t.name.toLowerCase();\r\n\r\n\t\t\t\t\t// no need to search anymore since we only care\r\n\t\t\t\t\t// about the créme de la creme i.e. the tag with the\r\n\t\t\t\t\t// highest count\r\n\t\t\t\t\tif (countryTag.id && demonymTag.id) { return true; }\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// sweden->sweden\r\n\t\t\t\t\t\tif (!countryTag.id && cname[tname] && cname[tname][0].id) {\r\n\t\t\t\t\t\t\tcountryTag = { tag: tname, id: cname[tname][0].id, country: cname[tname][0].mainName, count: t.count };\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// swedish -> sweden\r\n\t\t\t\t\t\tif (!demonymTag.id && alias[tname] && alias[tname][0].id) {\r\n\t\t\t\t\t\t\tdemonymTag = { tag: tname, id: alias[tname][0].id, country: alias[tname][0].name, count: t.count };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (e) {}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// country is best, demonym second\r\n\t\t\t\tvar bestTag = (countryTag.id && demonymTag.count < 8 * countryTag.count) ?\r\n\t\t\t\t\tcountryTag :\r\n\t\t\t\t\t(demonymTag.id \r\n\t\t\t\t\t\t? demonymTag\r\n\t\t\t\t\t\t: {});\r\n\r\n\t\t\t\tif (countryTag.tag === \"georgia\" && responseData2.toptags.tag.some(function (t) {\r\n\t\t\t\t\t\treturn [\"american\", \"us\", \"usa\"].includes(t.name.toLowerCase())\r\n\t\t\t\t\t})) {\r\n\t\t\t\t\t// it's not the country...\r\n\t\t\t\t\tbestTag = demonymTag;\r\n\r\n\t\t\t\t\tconsole.info(\"'\" + artist + \"' is tagged with 'georgia', but I'm gonna go ahead and guess they're really from the U.S.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (theTroubles.includes(bestTag.tag)) {\r\n\t\t\t\t\tconsole.info(\"Potentially incorrect country for '\" + artist + \"': \" + bestTag.country + \", using the tag '\" + bestTag.tag + \"'\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback(Object.assign({ \"artist\": artist, }, bestTag));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a list of country objects for a list of artist names.\r\n\t\t *\r\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\r\n\t\t * @param  {Array}   artists  Array of artist names (String)\r\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\r\n\t\t *                             containing only those artists that have a country\r\n\t\t *                             associated with them. For object structure, see api.getCountry\r\n\t\t */\r\n\t\tapi.getCountries = function(artists, callback) {\r\n\t\t\tvar returnList = [],\r\n\t\t\t\tcount = 0;\r\n\t\t\t/**\r\n\t\t\t * Increases a count and checks if we've tried\r\n\t\t\t * to get country for all artists\r\n\t\t\t */\r\n\t\t\tvar checkCount = function() {\r\n\t\t\t\tcount++;\r\n\t\t\t\tsuperCount++;\r\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>You can start exploring,<br>but it might interfere<br>with loading your artists.\");\r\n\t\t\t\tif (count === artists.length) {\r\n\t\t\t\t\t// We done, save artists and call back\r\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\r\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\r\n\t\t\t\t\t\tcallback(returnList);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Get countries for all artists\r\n\t\t\tartists.forEach(function(el, i) {\r\n\t\t\t\t// first check stored artists to see if we've already checked this artist\r\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\r\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\r\n\t\t\t\t\treturnObject.artist = el;\r\n\t\t\t\t\treturnList.push(returnObject);\r\n\t\t\t\t\tcheckCount();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar start = new Date().getTime();\r\n\r\n\t\t\t\t\tapi.getCountry(el, function(data) {\r\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\r\n\t\t\t\t\t\t// console.error(data)\r\n\r\n\t\t\t\t\t\t// if (data.name) {\r\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\r\n\t\t\t\t\t\t\t\"id\": data.id,\r\n\t\t\t\t\t\t\t\"name\": data.name,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\treturnList.push(data);\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\r\n\r\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\r\n\r\n\r\n\t\t\t\t\t\tcheckCount();\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n\r\n\t/**\r\n\t * Get all tags for an artist.\r\n\t * @param  {String}   artist   Artist name\r\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\r\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\r\n\t */\r\n\tapi.getTags = function(artist, callback) {\r\n\t\t// Check if artist tags are already saved, if so return them\r\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\r\n\t\t\t// console.log(\"Had in store, no api call\");\r\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\r\n\t\t} else {\r\n\t\t\t// Create object in localstorage\r\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\r\n\t\t\tSTORED_ARTISTS[artist].tags = [];\r\n\r\n\t\t\t// Get from lastfm\r\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\r\n\t\t\t\tfunction(err, responseData2) {\r\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\r\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\r\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\r\n\t\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tapi.getArtistInfo = function(artist, callback) {\r\n\t\tvar artistInfo = [];\r\n\r\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\r\n\t\t\t//Creating a list of tag names\r\n\t\t\tvar tagnamelist = [];\r\n\t\t\tif (data1.artist.tags.tag) {\r\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\r\n\t\t\t\t\ttagnamelist.push(t.name);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tartistInfo.push({\r\n\t\t\t\tname: artist,\r\n\t\t\t\turl: data1.artist.url,\r\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\r\n\t\t\t\tdescription: data1.artist.bio.summary,\r\n\t\t\t\ttags: tagnamelist\r\n\t\t\t})\r\n\t\t\tcallback(artistInfo);\r\n\t\t})\r\n\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\r\n\t * Also included are which tags matched.\r\n\t *\r\n\t * Calling this function cancels previous requests initiated by this function.\r\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\r\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\r\n\t */\r\n\tvar recommendationRequests = [];\r\n\tapi.cancelRecommendationRequests = function () {\r\n\t\trecommendationRequests.forEach(function (xhr) {\r\n\t\t\txhr.abort();\r\n\t\t});\r\n\r\n\t\trecommendationRequests = [];\r\n\t}\r\n\tapi.getRecommendations = function (country, callback) {\r\n\t\tapi.cancelRecommendationRequests();\r\n\r\n\t\tvar recommendations = [];\r\n\r\n\t\t// get top tags for user\r\n\t\tvar toptags = USER_TAGS.slice(0, 15);\r\n\t\t// make tag list to an object (back n forthss)\r\n\t\tvar userTagObj = d3.nest().key(function(d) {\r\n\t\t\treturn d.tag;\r\n\t\t}).rollup(function(d) {\r\n\t\t\treturn d[0].count;\r\n\t\t}).map(toptags);\r\n\r\n\r\n\t\t//console.log(\"Got top tags for user!\")\r\n\r\n\t\t// Get top artists for tag country\r\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\r\n\t\t\t// Gotta count matching tags to then sort\r\n\t\t\tvar tagCounts = {};\r\n\r\n\t\t\t// Get the tags for these artists\r\n\t\t\t//console.log(data1, err)\r\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\r\n\t\t\t\tcallback([]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar artists = data1.topartists.artist;\r\n\r\n\t\t\tartists.forEach(function(a, num) {\r\n\t\t\t\ttagCounts[a.name] = [];\r\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\r\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\r\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\r\n\t\t\t\t\tif (hasTags) {\r\n\t\t\t\t\t\t// Compare top 10 tags to user tags\r\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\r\n\t\t\t\t\t\t\treturn d.name;\r\n\t\t\t\t\t\t}).map(data2.toptags.tag);\r\n\r\n\t\t\t\t\t\t// Get rid of justin bieber\r\n\t\t\t\t\t\tif (tags[country]) {\r\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\r\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (num === artists.length - 1) {\r\n\t\t\t\t\t\t//console.log(\"We've gotten tag counts for all artists, make a list!\")\r\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\r\n\t\t\t\t\t\t\trecommendations.push({\r\n\t\t\t\t\t\t\t\tname: d,\r\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\r\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\r\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t//console.log(recommendations)\r\n\t\t\t\t\t\tcallback(recommendations);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\r\n\t\t\t\trecommendationRequests.push(xhr2);\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\trecommendationRequests.push(xhr1);\r\n\t}\r\n\r\n\tapi.getFriends = function(callback) {\r\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\r\n\t}\r\n})(window, document);\r\n","/* requires:\r\napi/api.js\r\napi/lastfm.js\r\nscript.js\r\n*/\r\n\r\nvar map = {};\r\n//White theme default:\r\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\r\nvar legend;\r\nvar countryScore = 0;\r\n\r\n(function(window, document) {\r\n  d3.select(window).on(\"resize\", throttle);\r\n\r\n  var doThrottle = false;\r\n  var filter = \"artists\"; // filter by artists or plays\r\n\r\n  var zoom = d3.behavior.zoom()\r\n    .scaleExtent([1, 9])\r\n    .on(\"zoom\", move);\r\n\r\n\r\n  var height, width;\r\n\r\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\r\n  let countryCount = {};\r\n\r\n  //Variables needed to update scale and legend\r\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\r\n  var maxartists = 1,\r\n    maxplaycount = 0;\r\n\r\n  //Setting color and range to be used\r\n  var color;\r\n\r\n  // Set theme\r\n  var theme = window.localStorage.theme || \"pink_white\";\r\n\r\n  map.drawPlays = function() {\r\n    filter = \"scrobbles\";\r\n    redraw();\r\n  };\r\n\r\n  let countryPlaylists; \r\n  // load links to country playlists\r\n  d3.json(\"assets/data/playlists.json\", (err, list) => {\r\n    countryPlaylists = list;\r\n  });  \r\n\r\n  /**\r\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\r\n   */\r\n  function updateDimensions() {\r\n    height = window.innerHeight - 5;\r\n    width = document.getElementById('map-container').offsetWidth;\r\n  }\r\n\r\n  //Returns total number of plays for country\r\n  function getCountryPlaycount(c) {\r\n    if (countryCount[c.id]) {\r\n      var count = 0;\r\n      for (let i = 0; i < countryCount[c.id].length; i++) {\r\n        count += countryCount[c.id][i].playcount;\r\n      }\r\n      return count;\r\n    } else return 0;\r\n  };\r\n\r\n\r\n  function updateProgressBar() {\r\n    var progressPro = (countryScore / 210);\r\n    return progressPro;\r\n  }\r\n;\r\n\r\n  //Function to format numbers over 1000 with a space\r\n  function numbersWithSpace(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n  }\r\n  /**\r\n   * Randomize array element order in-place.\r\n   * Using Fisher-Yates shuffle algorithm.\r\n   */\r\n  function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n  //Function to remove duplicates from arrays\r\n  function onlyUnique(value, index, self) {\r\n    return self.indexOf(value) === index;\r\n  }\r\n\r\n  function updateScale() {\r\n    var max = -1;\r\n    switch (filter) {\r\n      case \"artists\":\r\n        max = maxartists;\r\n        for (let i = 0; i < 5; i++) {\r\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1));\r\n        }\r\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\r\n        break;\r\n      case \"scrobbles\":\r\n        max = maxplaycount;\r\n        for (let i = 0; i < 7; i++) {\r\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\r\n        }\r\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\r\n        break;\r\n    };\r\n\r\n\r\n    color = d3.scale.threshold()\r\n      .domain(mydomain)\r\n      .range(colorArray);\r\n  };\r\n\r\n  function updateLegend() {\r\n    //Remove decimals from domain\r\n    var x = 0;\r\n    var len = mydomain.length\r\n    while (x < len) {\r\n      mydomain[x] = Math.ceil(mydomain[x]);\r\n      x++;\r\n    };\r\n\r\n    //Array of text\r\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\r\n\r\n    //Create Legend\r\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\r\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\r\n      .data(mydomain);\r\n\r\n    //Color box sizes\r\n    var ls_w = 20,\r\n      ls_h = 20;\r\n    var x = width * 0.03;\r\n    var y = height * 0.03;\r\n\r\n    // Add legend filter text\r\n    var text1 = svg.select(\"#filter-text\")\r\n      .attr(\"x\", x)\r\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\r\n      .text(\"Number of \");\r\n    var text2 = svg.select(\"#filter\")\r\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\r\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\r\n      .text(filter);\r\n    text2.on(\"click\", function() {\r\n      // Toggle filter method\r\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\r\n      redraw();\r\n    });\r\n\r\n    var noCountryArtists = d3.select(\".no-countries\")\r\n      .style(\"bottom\", (y + mydomain.length * ls_h + 1.5 * ls_h + 30) + \"px\"); // <<< magic numbers broo\r\n\r\n    var enter = legend.enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"legend\");\r\n\r\n    enter.append(\"rect\")\r\n      .attr(\"x\", x)\r\n      .attr(\"y\", function(d, i) {\r\n        return height - (i * ls_h) - 2 * ls_h - y;\r\n      })\r\n      .attr(\"width\", ls_w)\r\n      .attr(\"height\", ls_h)\r\n      .style(\"fill\", function(d) {\r\n        return color(d);\r\n      });\r\n    enter.append(\"text\")\r\n      .attr(\"x\", x + 30)\r\n      .attr(\"y\", function(d, i) {\r\n        return height - (i * ls_h) - ls_h - 4 - y;\r\n      });\r\n\r\n    legend.selectAll(\"text\").data(mydomain)\r\n      .text(function(d, _, i) {\r\n        return legend_labels[i];\r\n      });\r\n  }\r\n  //Variables for color legend\r\n\r\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\r\n    \"tooltip hidden\");\r\n\r\n  var infoContainer = d3.select(\"body\").append(\"div\").attr(\"class\",\r\n    \"infoContainer hidden\").attr(\"id\", \"infoContainer\");\r\n\r\n  var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\r\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\r\n\r\n\r\n  var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\r\n    \"cnameDiv\").attr(\"id\", \"cname\");\r\n\r\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"detailsDiv\").attr(\"id\", \"details\");\r\n\r\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"recoDiv\").attr(\"id\", \"recommendations\");\r\n\r\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\r\n\r\n  var closeButton;\r\n\r\n  var offsetL;\r\n  var offsetT;\r\n\r\n  //---------------------- Color preferences -------------//\r\n  var themes = {\r\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\r\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\r\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\r\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\r\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\r\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\r\n  };\r\n\r\n  let nextTheme = window.nextTheme = function(toTheme) {\r\n    // Go to next theme\r\n    var themeList = d3.keys(themes);\r\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\r\n    colorArray = themes[theme];\r\n\r\n    //Change body class\r\n    d3.select(document.body).attr(\"class\", theme);\r\n\r\n    // Save :)\r\n    window.localStorage.theme = theme;\r\n\r\n    // Redraw map :)\r\n    if (topo) redraw();\r\n  }\r\n  map.nextTheme = nextTheme;\r\n\r\n  nextTheme(theme);\r\n  updateScale();\r\n  updateDimensions();\r\n  setup(width, height);\r\n\r\n  function setup(width, height) {\r\n    projection = d3.geo.naturalEarth()\r\n      .translate([(width / 2), (height / 2) + height * 0.08])\r\n      .scale(width / 1.7 / Math.PI);\r\n\r\n    path = d3.geo.path().projection(projection);\r\n\r\n    svg = d3.select(\"#map-container\").append(\"svg\")\r\n      .attr(\"id\", \"map-svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\r\n      .call(zoom)\r\n      .on(\"click\", click)\r\n      .append(\"g\");\r\n\r\n    g = svg.append(\"g\");\r\n    svg.append(\"g\").attr(\"id\", \"legend\")\r\n    svg.append(\"text\").attr({\r\n      id: \"filter-text\",\r\n      class: \"legend\"\r\n    });\r\n    svg.append(\"text\").attr({\r\n      id: \"filter\",\r\n      class: \"legend\"\r\n    });\r\n  }\r\n\r\n  //Load country aliases and names\r\n  api.getCountriesData().then(countries => (countryNames = countries));\r\n  \r\n  //Load map\r\n  d3.json(\"assets/data/world-50m.json\", function(error, world) {\r\n\r\n    var countries = topojson.feature(world, world.objects.countries).features;\r\n\r\n    topo = countries;\r\n    draw(topo, true);\r\n\r\n  });\r\n\r\n  function draw(topo, redrawMap) {\r\n    var country = g.selectAll(\".country\").data(topo);\r\n\r\n    var progress = d3.select(\"#progress-bar\").style({\r\n      \"height\": updateProgressBar() * 100 + \"%\",\r\n      \"background-color\": colorArray[6]\r\n    });\r\n    d3.select(\"#countryCount\").style({\r\n      \"background-color\": colorArray[1],\r\n      \"border-color\": colorArray[6]\r\n    })\r\n    //Show progressbar text on mouse-over\r\n    .on(\"mousemove\", function() {\r\n      d3.select(\"#progress-text\")\r\n        .transition().duration(150).style(\"opacity\", 0.9);\r\n    })\r\n      .on(\"mouseout\", function() {\r\n        d3.select(\"#progress-text\").transition().duration(150).style(\"opacity\", 0);\r\n      });\r\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/210 countries\")\r\n\r\n    //Draw countries\r\n    if (redrawMap) {\r\n      country.enter().insert(\"path\")\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"d\", path)\r\n        .attr(\"id\", function(d, i) {\r\n          return d.id;\r\n        })\r\n        .attr(\"title\", function(d, i) {\r\n          return d.properties.name;\r\n        })\r\n        .style(\"fill\", function() {\r\n          return color(0);\r\n        });\r\n    }\r\n    //Color countries\r\n    country.transition().style(\"fill\", function(d) {\r\n      switch (filter) {\r\n        case \"artists\":\r\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\r\n            color(0);\r\n          //break;\r\n        case \"scrobbles\":\r\n          return color(getCountryPlaycount(d));\r\n      }\r\n    })\r\n\r\n    //offsets for tooltips\r\n    offsetL = document.getElementById('map-container').offsetLeft;\r\n    offsetT = document.getElementById('map-container').offsetTop;\r\n\r\n    //tooltips\r\n    country\r\n      .on(\"mousemove\", function(d, i) {\r\n        var name;\r\n        var tag;\r\n        countryNames.forEach(function(e, i) {\r\n          if (e.id === d.id) {\r\n            name = e.name;\r\n            tag = e.tag;\r\n          };\r\n        })\r\n        var mouse = d3.mouse(svg.node()).map(function(d) {\r\n          return parseInt(d);\r\n        });\r\n\r\n        tooltip.classed(\"hidden\", false)\r\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\r\n            mouse[1] +\r\n            offsetT + 10) + \"px\")\r\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\r\n      })\r\n      .on(\"mouseout\", function(d, i) {\r\n        tooltip.classed(\"hidden\", true);\r\n      })\r\n      //Show div with top 10 artists for country when clicked\r\n      .on(\"click\", function(d, i) {\r\n        var name;\r\n        var tag;\r\n        var id;\r\n\r\n        clicked(d);\r\n\r\n        countryNames.forEach(function(e, i) {\r\n          if (e.id === d.id) {\r\n            name = e.name;\r\n            tag = e.tag;\r\n            id = d.id;\r\n          };\r\n        })\r\n        var mouse = d3.mouse(svg.node()).map(function(d) {\r\n          return parseInt(d);\r\n        });\r\n\r\n        closeButton\r\n          .on(\"click\", function(d, i) {\r\n            removeArtistDiv();\r\n            // zoom out map, fulhack\r\n            clicked(centered);\r\n          }) //\"stäng\" onclick slutar\r\n      }) // on click slutar\r\n\r\n  }\r\n\r\n  /*-------redraw----*/\r\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean\r\n  function redraw(redrawMap) {\r\n    updateDimensions();\r\n\r\n    if (redrawMap) {\r\n      d3.select('#map-svg').remove();\r\n      setup(width, height);\r\n    }\r\n\r\n    maxartists = d3.max(d3.keys(countryCount), function(cname) {\r\n      return countryCount[cname].length;\r\n    });\r\n    maxplaycount = d3.max(d3.keys(countryCount), function(cname) {\r\n      return getCountryPlaycount({\r\n        id: cname\r\n      });\r\n    })\r\n    updateScale();\r\n    updateLegend();\r\n\r\n    draw(topo, redrawMap);\r\n  }\r\n\r\n\r\n  /**\r\n   * Moves the map to the specified location or based on the current zoom event\r\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\r\n   * @param  {Number} sc      Optional: Scale factor\r\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\r\n   */\r\n  function move(tr, sc, animate) {\r\n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\r\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\r\n\r\n    // If move was not initiated by clicking on a country, deselect the selected country\r\n    if (!tr && !sc && centered) {\r\n      highlightCountry(false);\r\n      removeArtistDiv();\r\n      centered = null;\r\n    }\r\n\r\n    var zscale = s;\r\n    var h = height / 4;\r\n\r\n    t[0] = Math.min(\r\n      (width / height) * (s - 1),\r\n      Math.max((width * 1.2) * (1 - s), t[0])\r\n    );\r\n\r\n    t[1] = Math.min(\r\n      h * (s - 1) + h * s,\r\n      Math.max(height * (1 - s) - h * s, t[1])\r\n    );\r\n\r\n    zoom.translate(t);\r\n    zoom.scale(s);\r\n\r\n    if (animate) {\r\n      g.transition().duration(950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\r\n\r\n    } else {\r\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\r\n    }\r\n\r\n    //adjust the country hover stroke width based on zoom level\r\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\r\n  }\r\n  map.move = move;\r\n\r\n  var throttleTimer;\r\n\r\n  function throttle() {\r\n    window.clearTimeout(throttleTimer);\r\n    throttleTimer = window.setTimeout(function() {\r\n      redraw(true);\r\n      move([0, 0], 1); // Reset position\r\n    }, 200);\r\n  }\r\n\r\n\r\n  //geo translation on mouse click in map\r\n  function click() {\r\n    var latlon = projection.invert(d3.mouse(this));\r\n    // console.log(latlon);\r\n    //console.log(countryCount);\r\n  }\r\n\r\n\r\n  /*----------------------------makeArtistDiv------------------------------------------------*/\r\n  //Skapar \"details-on-demand\"-divarna.\r\n  function makeArtistDiv(d) {\r\n\r\n    //lägga till namn till detailseDiv\r\n    var name;\r\n    var tag;\r\n    var nameTags;\r\n    var tagTags;\r\n    var recoms;\r\n    //var id;\r\n    countryNames.forEach(function(e, i) {\r\n      if (e.id === d.id) {\r\n        name = e.name;\r\n        tag = e.tag;\r\n\r\n        nameTags = (e.names || [e.name]).map(n => \"<span class=\\\"demonym\\\">#\" + n + \"</span>\").join(\", \");\r\n        tagTags = (e.tags || [e.tag]).map(t => \"<span class=\\\"demonym\\\">#\" + t + \"</span>\").join(\", \");\r\n      };\r\n    })\r\n    d3.select(\"#recommendations\").html(\"\");\r\n    //Show country name and info div on left hand side\r\n    infoContainer\r\n      .classed(\"hidden\", false)\r\n      .transition()\r\n      .style(\"opacity\", 1)\r\n      .duration(750);\r\n\r\n    //Hide progressbar when showing\r\n    d3.selectAll(\"#countryCount, .on-map-view\")\r\n      .classed(\"hidden\", true);\r\n\r\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"class\", \"close-button\").html(\"X\");\r\n\r\n    //Populate country information div\r\n    cnameDiv\r\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\r\n      .append(\"h1\").html(name);\r\n    d3.select(\"#cnameCont\").append(\"h5\")\r\n      .html(function() {\r\n        if (countryCount[d.id])\r\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\r\n        else return \"No artists yet - Find new here ->\"\r\n      })\r\n\r\n    let pl = countryPlaylists.find(c => c.name === name);\r\n    let linkdiv = d3.select(\"#cnameCont\")\r\n      .append(\"div\").attr(\"class\", \"playlist-link\")\r\n\r\n   let lastFmLink =  linkdiv.append(\"a\").attr(\"href\", \"https://last.fm/tag/\" + name)\r\n   lastFmLink.append(\"img\").attr(\"class\", \"playlist-link__img\").attr(\"src\", \"https://www.shareicon.net/data/32x32/2016/05/24/769923_logo_512x512.png\").attr(\"style\",\"background:none\");\r\n   lastFmLink.append(\"span\").html(\"#\"+name);\r\n\r\n    if (pl) {\r\n\r\n      linkdiv.append(\"span\").attr(\"class\",\"divider\").html(\"/\");\r\n\r\n      let a = linkdiv.append(\"a\").attr(\"href\", pl.uri).attr(\"target\", \"_self\");\r\n\r\n      a.append(\"img\")\r\n        .attr(\"class\", \"playlist-link__img\")\r\n        .attr(\"src\", \"https://upload.wikimedia.org/wikipedia/commons/1/19/Spotify_logo_without_text.svg\");\r\n\r\n      a.append(\"span\").html(pl.playlistName);\r\n\r\n    }\r\n\r\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\r\n\r\n      var currentNoArtists = 0;\r\n      var currentCount = 0;\r\n\r\n\r\n      d3.select(\"#details\").append(\"div\")\r\n        .html(\"<span>Your top artists tagged with </span>\" + nameTags + \"<span> or </span>\" + tagTags + \"<span>: </span>\")\r\n        .attr(\"class\", \"topartists-desc\");\r\n      //Show top 5 artists\r\n\r\n      d3.select(\"#artistContainer\").append(\"i\")\r\n        .attr(\"class\", \"fa artist-control right fa-angle-right\")\r\n        .on(\"click\", function(){\r\n          showNextFive();\r\n        });\r\n\r\n      d3.select(\"#artistContainer\").append(\"i\")\r\n        .attr(\"class\", \"fa artist-control left disabled fa-angle-left\")\r\n        .on(\"click\", function(){\r\n          showPreviousFive();\r\n        });\r\n\r\n      function showNextFive(){\r\n        showArtists(currentNoArtists+1, currentNoArtists+5, false);\r\n        //Send event to google analytics\r\n        ga('send', {\r\n          hitType: 'event',\r\n          eventCategory: 'Artist viewer',\r\n          eventAction: 'Next five',\r\n          eventLabel: 'test'\r\n        });\r\n      }\r\n\r\n      function showPreviousFive(){\r\n        showArtists(currentNoArtists-9, currentNoArtists-5, false);\r\n        //Trigger GA event\r\n        ga('send', {\r\n          hitType: 'event',\r\n          eventCategory: 'Artist viewer',\r\n          eventAction: 'Previous five',\r\n          eventLabel: 'test'\r\n        });\r\n      }\r\n\r\n      function showArtists(first, last, initial){\r\n        //Clean-up previous five artist images\r\n        d3.selectAll(\".scrobbled\").remove();\r\n        //console.log(\"displaying \"+first+\" to \"+last)\r\n\r\n        //Generate new artist images for all artists within the desired range!\r\n          for (let i = first-1; i <= last-1; i++) {\r\n            if (countryCount[d.id][i]) {\r\n              //console.log(i+\" \"+countryCount[d.id][i].artist)\r\n              var artistDiv = d3.select(\"#details\").append(\"div\")\r\n                .attr({\r\n                  \"class\": \"scrobbled artist-div lowlight\",\r\n                  \"data-artist\": countryCount[d.id][i].artist\r\n                })\r\n                .on(\"click\", function() {\r\n                  // Lowlight not selected artists\r\n                  d3.selectAll(\".artist-div\").classed({\r\n                    \"lowlight\": true,\r\n                    \"highlight\": false\r\n                  });\r\n                  // Highlight selected artist\r\n                  d3.select(this).classed({\r\n                    \"highlight\": true,\r\n                    \"lowlight\": false\r\n                  });\r\n\r\n                  makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\r\n                });\r\n\r\n              var artistLink = artistDiv.append(\"a\").style(\"display\", \"block\")\r\n              artistLink.append(\"div\")\r\n                .attr(\"class\", \"image-div\")\r\n                // .style(\"background-image\", \"url(\" + \"'\" + countryCount[d.id][i].image + \"'\" + \" )\")\r\n                .style(\"background-image\", \"url(https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png\")\r\n                //.append(\"span\").attr(\"class\", \"overlayNo\").html(i+1);\r\n\r\n              var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\r\n\r\n              playCountDiv.append(\"p\")\r\n                .html(\"<b>\" + countryCount[d.id][i].artist + \"</b><br>\" + countryCount[d.id][i].playcount + \" scrobbles\")\r\n                .attr(\"class\", \"details-p\");\r\n\r\n              currentCount++;\r\n            } else {\r\n              i = last;\r\n            }\r\n        }\r\n        //\r\n        //Check to see if we are moving backwards or forwards through the list..\r\n        if (first<currentNoArtists) //Backwards!\r\n          currentNoArtists = Math.ceil((currentNoArtists-currentCount)/5)*5;\r\n        else if (last>currentNoArtists) //Forwards!\r\n          currentNoArtists = currentNoArtists+currentCount;\r\n        //console.log(\"currentNoArtists är \"+currentNoArtists);\r\n\r\n        //Reset the count!\r\n        currentCount = 0;\r\n\r\n        //\r\n        //Disable and enable user controls\r\n        //\r\n\r\n        //Left arrow...\r\n        if (currentNoArtists>=10 && !initial){\r\n          d3.selectAll(\".artist-control.left\")\r\n            .classed(\"disabled\", false)\r\n            .on(\"click\", function(){\r\n              showPreviousFive();\r\n            });\r\n        }\r\n        else{\r\n          d3.selectAll(\".artist-control.left\")\r\n            .classed(\"disabled\", true)\r\n            .on('click',function(){\r\n              d3.select(this).on('click',null); //Remove click listener!\r\n            });\r\n        }\r\n        //and right...\r\n        if (currentNoArtists>countryCount[d.id].length-1){ //There are no more artists!\r\n          d3.selectAll(\".artist-control.right\")\r\n            .classed(\"disabled\", true)\r\n            .on('click',function(){\r\n              d3.select(this).on('click',null); //Remove click listener!\r\n            });\r\n        }\r\n        else{\r\n          d3.selectAll(\".artist-control.right\")\r\n            .classed(\"disabled\", false)\r\n            .on(\"click\", function(){\r\n              showNextFive();\r\n            });\r\n        }\r\n      }\r\n      //Fetch the initial five artists!!\r\n      showArtists(1, 5, true);\r\n\r\n\r\n    } else { //Om landet vi klickat på inte har några lyssnade artister...\r\n      // console.log(\"landet har inga lyssnade artister\");\r\n    }\r\n    //\"Recommended\"-heading\r\n    d3.select(\"#recommendations\").append(\"h4\")\r\n      .html(\"You may like: \")\r\n      .attr(\"class\", \"topartists-desc\");\r\n\r\n    // show loading message\r\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\r\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\r\n      .attr(\"id\", \"rec-loading\")\r\n      .html(\"Looking for artists tagged #\" + tag);\r\n    recLoadingDiv.append(\"img\")\r\n      .attr({\r\n        id: \"rec-loading-img\",\r\n        src: \"assets/img/loader_horizontal.gif\"\r\n      })\r\n      .style({\r\n        display: \"inline-block\",\r\n        margin: \"0 5px\"\r\n      })\r\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\r\n\r\n\r\n\r\n    //Get list of recommendations for country based on tags!\r\n    api.getRecommendations(tag, function(taglist) {\r\n      // Return if this callback is from an old (not active) country\r\n      if (!centered || centered.id !== d.id) {\r\n        return;\r\n      }\r\n      // Show loading message\r\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\r\n\r\n      //Get list of recommendations for country based on country name!\r\n      api.getRecommendations(name, function(namelist) {\r\n        // Return if this callback is from an old (not active) country\r\n        if (!centered || centered.id !== d.id) {\r\n          return;\r\n        }\r\n        //Show loading message\r\n        recLoadingMessage.html(\"Loading images for recommended artists\");\r\n\r\n        //Join the two lists\r\n        var list = taglist.concat(namelist);\r\n\r\n        //Removing duplicates from the list!\r\n        var arr = {};\r\n        for (let i = 0; i < list.length; i++)\r\n          arr[list[i]['name']] = list[i];\r\n\r\n        list = new Array();\r\n        for (let key in arr)\r\n          list.push(arr[key]);\r\n\r\n        list.sort(function(a, b) {\r\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n        });\r\n        //Get the first 20 artists\r\n        list = list.slice(0, 20);\r\n        //Randomize list\r\n        list = shuffleArray(list);\r\n\r\n        if (list.length === 0) { // Found no recommendations\r\n          recLoadingDiv.remove();\r\n          d3.select(\"#recommendations\").append(\"p\")\r\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\r\n          d3.select(\"#recommendations\").append(\"a\").attr({\r\n            href: \"https://www.last.fm/tag/\" + name,\r\n            target: \"_blank\",\r\n          }).html(\"Try searching last.fm yourself!\");\r\n        }\r\n\r\n        for (let i = 0; i < Math.min(list.length, 5); i++) {\r\n          // Return if this callback is from an old (not active) country\r\n          if (centered.id !== d.id) {\r\n            return;\r\n          }\r\n\r\n          var artisturl, artistimg, artistname;\r\n\r\n          //Get url and images for recommended artists!\r\n          api.getArtistInfo(list[i].name, function(art) {\r\n            recLoadingDiv.remove();\r\n            var artisturl = art[0].url;\r\n            var artistimg = art[0].image;\r\n            var artistname = art[0].name;\r\n\r\n\r\n            var recoArtistDiv = d3.select(\"#recommendations\").insert(\"div\", \"#summaryText\").attr(\"class\", \"artist-div lowlight\");\r\n            var recoArtistLink = recoArtistDiv.append(\"a\").style(\"display\", \"block\")\r\n              //.attr(\"href\", artisturl)\r\n              //.attr(\"target\", \"_blank\");\r\n            recoArtistLink.append(\"div\")\r\n              .attr(\"class\", \"image-div\")\r\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\r\n\r\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\r\n\r\n            recoArtistInfoDiv.append(\"p\")\r\n              .html(\"<b>\" + artistname + \"</b>\")\r\n              .attr(\"class\", \"details-p\");\r\n\r\n            recoArtistDiv.on(\"click\", function() {\r\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\r\n                \"lowlight\": true,\r\n                \"highlight\": false\r\n              });\r\n\r\n              d3.select(this).classed({ // Highlight selected artist\r\n                \"highlight\": true,\r\n                \"lowlight\": false\r\n              });\r\n              makeSummaryDiv(artistname);\r\n            });\r\n\r\n          })\r\n        }\r\n\r\n\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n  function removeArtistDiv() {\r\n    api.cancelRecommendationRequests();\r\n\r\n    infoContainer.transition().style(\"opacity\", 0).duration(1000);\r\n    infoContainer.classed(\"hidden\", true);\r\n    d3.selectAll(\"#countryCount, .on-map-view\").classed(\"hidden\", false);\r\n    d3.selectAll(\".artist-div\").remove(\"div\");\r\n    d3.selectAll(\".close-button\").remove(\"button\");\r\n    d3.selectAll(\".details-h\").remove(\"p\");\r\n    d3.selectAll(\".details-h4\").remove(\"h4\");\r\n    d3.selectAll(\".recom-h4\").remove(\"h4\");\r\n    d3.selectAll(\".artist-control\").remove();\r\n    d3.selectAll(\".topartists-desc\").remove();\r\n\r\n    cnameDiv.classed(\"hidden\", true);\r\n    d3.select(\"#cnameCont\").remove(\"h1\");\r\n    d3.select(\"#cnameCont\").remove(\"h5\");\r\n  }\r\n\r\n  function makeSummaryDiv(artistname) {\r\n    var usertaglist = [];\r\n    //console.log(usertaglist);\r\n    var artisttaglist = [];\r\n\r\n    d3.select(\"#summaryText\").remove();\r\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\r\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\r\n    d3.select(\"#summaryText\").append(\"img\")\r\n      .attr({\r\n        id: \"sum-loading-img\",\r\n        src: \"assets/img/loader_horizontal.gif\"\r\n      })\r\n      .style({\r\n        display: \"inline-block\",\r\n        margin: \"0 5px\"\r\n      });\r\n\r\n    //Get artist info from Lastfm\r\n    api.getArtistInfo(artistname, function(art) {\r\n      var text = art[0].description.replace(/(\\n)+/g, '<br />');\r\n      //var text = text.substring(6);\r\n      //Get artist's top tags\r\n      artisttaglist = art[0].tags;\r\n      //Create list of user tags\r\n\r\n      //Make list of artist tags which are also user's top tags:\r\n      for (let y = 0; y < 15; y++) {\r\n        for (let z = 0; z < artisttaglist.length; z++) {\r\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\r\n            usertaglist.push(USER_TAGS[y].tag)\r\n          }\r\n        }\r\n      }\r\n\r\n      //Create combined tag list and remove duplicates\r\n      var taglist = usertaglist.concat(artisttaglist);\r\n      taglist = taglist.filter(function(elem, pos) {\r\n        return taglist.indexOf(elem) == pos;\r\n      })\r\n      // Remove loading text\r\n      d3.select(\"#summaryText\").html(\"\");\r\n      //Create containing div\r\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\r\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\r\n      summaryText.style(\"max-height\", h + \"px\");\r\n\r\n      summaryText.append(\"h4\").html(artistname);\r\n\r\n      //Show top 7 tags\r\n      for (let i = 0; i < Math.min(taglist.length, 6); i++) {\r\n        var tagdiv = summaryText.append(\"div\").attr(\"class\", \"tagdiv\").append(\"h4\").html(\"#\" + taglist[i]);\r\n        //Mark all user tags\r\n        for (let p = 0; p < usertaglist.length; p++) {\r\n          if (taglist[i] === usertaglist[p])\r\n            tagdiv.classed(\"usertag\", true);\r\n        }\r\n      }\r\n      //Display artist summary\r\n      summaryText.append(\"p\").html(text || \"No description available - <a href='https://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\r\n\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Toggles highlight of a specified country\r\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\r\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\r\n   */\r\n  function highlightCountry(highlight, countryElement) {\r\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\r\n\r\n    if (highlight) {\r\n      // Fade out all other countries\r\n      d3.selectAll(\".country\").transition()\r\n        .style(\"opacity\", function() {\r\n          return (+this.id === +countryElement.id ? 1.0 : 0.3);\r\n        })\r\n\r\n      var ce = d3.select(document.getElementById(\"\" + countryElement.id)); // d3 can't select ids that are only numbers\r\n      ce.classed(\"highlighted\", true);\r\n    } else {\r\n      // Fade in all countries\r\n      d3.selectAll(\".country\").transition()\r\n        .style(\"opacity\", 1.0)\r\n    }\r\n\r\n  }\r\n\r\n  function clicked(d) { //d är det en har klickat på\r\n\r\n    var x, y, k;\r\n    //bounding box for clicked country\r\n    var b = path.bounds(d);\r\n\r\n    getCountryPlaycount(d);\r\n\r\n    //Set scale\r\n    var modscaleX = (b[1][0] - b[0][0]);\r\n    var modscaleY = (b[1][1] - b[0][1]);\r\n\r\n    //Dom't zoom too far with small countries!\r\n    if (modscaleX < 80)\r\n      modscaleX = 80;\r\n\r\n    //Landet är inte centrerat redan\r\n    if (d && centered !== d) {\r\n      centered = d;\r\n      removeArtistDiv();\r\n      makeArtistDiv(d);\r\n      highlightCountry(true, d);\r\n\r\n\r\n      //Special rules for special countries:\r\n      switch (d.id) {\r\n        case 840: //US\r\n          k = 3;\r\n          x = -(b[1][0] + b[0][0]) / 3;\r\n          y = -(b[1][1] + b[0][1]) / 1.7;\r\n          break;\r\n        case 250: //France\r\n          k = 7.012;\r\n          x = -(b[1][0] + b[0][0]) / 1.8;\r\n          y = -(b[1][1] + b[0][1]) / 3.4;\r\n          break;\r\n        case 528: //Netherlands\r\n          k = 9.0124;\r\n          x = -(b[1][0] + b[0][0]) / 1.5;\r\n          y = -(b[1][1] + b[0][1]) / 3.3;\r\n          break;\r\n        case 643: //Russia\r\n          k = 1.9;\r\n          x = -(b[1][0] + b[0][0]) / 1.25;\r\n          y = -(b[1][1] + b[0][1]) / 2;\r\n          break;\r\n        case 554: //New Zeeland\r\n          k = 4;\r\n          x = -(b[1][0] + b[0][0]) / 0.90;\r\n          y = -(b[1][1] + b[0][1]) / 1.8;\r\n          break;\r\n        case 36: //Australia\r\n          k = 3.3;\r\n          x = -(b[1][0] + b[0][0]) / 1.8;\r\n          y = -(b[1][1] + b[0][1]) / 2.1;\r\n          break;\r\n\r\n        default: //Everybody else\r\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\r\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\r\n          y = -(b[1][1] + b[0][1]) / 2;\r\n          break;\r\n      }\r\n\r\n      //Landet är redan centrerat\r\n    } else {\r\n      x = -width / 2;\r\n      y = -height / 2 - height * 0.08;\r\n      k = 1\r\n      removeArtistDiv();\r\n      highlightCountry(false);\r\n      centered = null;\r\n\r\n      //detailsDiv.classed(\"hidden\", true);\r\n    }\r\n\r\n    var pt = projection.translate();\r\n    // Tell map to move with animation\r\n    // Basically does the same as before: translate to middle,\r\n    // then to x and y with respect to scale\r\n    move([pt[0] + x * k, pt[1] + y * k], k, true);\r\n\r\n  }\r\n\r\n  //function to add points and text to the map (used in plotting capitals)\r\n  function addpoint(lat, lon, text) {\r\n\r\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\r\n    var x = projection([lat, lon])[0];\r\n    var y = projection([lat, lon])[1];\r\n\r\n    gpoint.append(\"svg:circle\")\r\n      .attr(\"cx\", x)\r\n      .attr(\"cy\", y)\r\n      .attr(\"class\", \"point\")\r\n      .attr(\"r\", 1.5);\r\n\r\n    //conditional in case a point has no associated text\r\n    if (text.length > 0) {\r\n\r\n      gpoint.append(\"text\")\r\n        .attr(\"x\", x + 2)\r\n        .attr(\"y\", y + 2)\r\n        .attr(\"class\", \"text\")\r\n        .text(text);\r\n    }\r\n\r\n  }\r\n\r\n  /** \"PUBLUC\" FUNCTIONS **/\r\n  map.putCountryCount = function(object) {\r\n    countryCount = JSON.parse(JSON.stringify(object));\r\n    countryScore = 0;\r\n    var countryList = [];\r\n\r\n    // Extract info for the current user\r\n    d3.keys(countryCount).forEach(function(id) {\r\n      if (countryCount[id][SESSION.name]) {\r\n        countryCount[id] = countryCount[id][SESSION.name];\r\n        countryScore = countryScore + 1;\r\n        countryList.push(+id)\r\n      } else {\r\n        // delete countryCount[id];\r\n      }\r\n    })\r\n\r\n    if (topo) redraw();\r\n\r\n    window.countryScore = countryScore;\r\n\r\n  }\r\n})(window, document)\r\n","var screenshot = {};\r\n\r\n(function (window, document) {\r\n\tscreenshot.render = function () {\r\n\t\tvar titleString,\r\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\r\n\t\t\timg;\r\n\r\n\t\tvar explrLogo = new Image();\r\n\r\n\t\tvar svg = d3.select(\"#map-svg\");\r\n\t\tvar w = svg.attr(\"width\");\r\n\t\tvar h = svg.attr(\"height\");\r\n\r\n\t\tvar canvas = document.createElement(\"canvas\");\r\n\t\tvar ctx = canvas.getContext(\"2d\");\r\n\r\n\t\t// canvg(canvas, document.getElementById(\"map-svg\").outerHTML);\r\n\r\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\r\n\t\tvar textColor = window.getComputedStyle(document.body).color;\r\n\r\n\t\tvar drawCenteredText = function (obj) {\r\n\t\t\tctx.font = obj.font;\r\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\r\n\r\n\t\t\tif (obj.lineWidth) {\r\n\t\t\t\tctx.lineWidth = obj.lineWidth;\r\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\r\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcanvas.width = w;\r\n\t\tcanvas.height = h;\r\n\r\n\t\t// insert background rect\r\n\t\tsvg.insert(\"rect\", \"g\")\r\n\t\t\t.attr({\r\n\t\t\t\tid: \"background-rect\",\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\theight: \"100%\",\r\n\r\n\t\t\t})\r\n\t\t\t.style({\r\n\t\t\t\tfill: backgroundColor,\r\n\t\t\t});\r\n\r\n\t\t// Add color, font to legend text\r\n\t\td3.selectAll('.legend text, text.legend').style({\r\n\t\t\t\"font-family\": function () {\r\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\r\n\t\t\t},\r\n\t\t\t\"font-size\": function () {\r\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\r\n\t\t\t},\r\n\t\t\t\"fill\": textColor,\r\n\t\t});\r\n\t\td3.selectAll(\".legend rect\").style({\r\n\t\t\tstroke: backgroundColor,\r\n\t\t})\r\n\r\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\r\n\r\n\t\texplrLogo.onload = function () {\r\n\t\t\t/* Add text and shiiet */\r\n\t\t\t// Add text background box\r\n\t\t\tctx.save(); // To draw with different opaticy\r\n\t\t\tctx.globalAlpha = 0.6;\r\n\t\t\tctx.fillStyle = backgroundColor;\r\n\t\t\tlet scoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 210 countries\";\r\n\t\t\tlet titleString = SESSION.name + \"'s musical world map\";\r\n\t\t\tctx.font = \"34px Patua One\";\r\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\r\n\t\t\tctx.fillStyle = textColor;\r\n\r\n\t\t\t// Add text\r\n\t\t\tctx.fillStyle = textColor;\r\n\t\t\tdrawCenteredText({\r\n\t\t\t\tstring: titleString,\r\n\t\t\t\tfont: \"34px Patua One\",\r\n\t\t\t\ty: h - 60,\r\n\t\t\t});\r\n\t\t\tdrawCenteredText({\r\n\t\t\t\tstring: scoreString,\r\n\t\t\t\tfont: \"20px Didact Gothic\",\r\n\t\t\t\ty: h - 40,\r\n\t\t\t});\r\n\r\n\t\t\t// Add explr.fm logo\r\n\t\t\tctx.restore();\r\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\r\n\r\n\t\t\td3.select(\"#background-rect\").remove();\r\n\r\n\t\t\t//console.log(canvas.toDataURL())\r\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\r\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL(\"image/png\");\r\n\t\t\t// d3.select(\"body\").append(img);\r\n\t\t\t//\r\n\r\n\t\t\tvar dataurl = canvas.toDataURL(\"image/png\");\r\n\t\t\t// console.log(\"dataurl:\", dataurl)\r\n\r\n\t\t\t// window.open(dataurl, \"_blank\");\r\n\r\n\t\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"\";\r\n\r\n\t\t}\r\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\r\n\t}\r\n\r\n\tscreenshot.close = function () {\r\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"display:none;\";\r\n\t}\r\n\r\n})(window, document);\r\n"]}