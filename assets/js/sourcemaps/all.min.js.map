{"version":3,"sources":["api/lastfm.js","api/api.js","script.js","map.js","screenshot.js"],"names":["api","lastfm","key","url","send","method","options","callback","xhr","gotResponse","forEach","el","replace","d3","json","e","d","setTimeout","abort","error","superCount","window","document","csv","err","data","alias","nest","tag","toLowerCase","map","cname","name","getCountry","artist","responseData2","running","toptags","length","t","i","cid","tname","id","countryName","getCountries","artists","returnList","count","checkCount","select","html","SESSION","total_artists","localStorage","JSON","stringify","STORED_ARTISTS","country","returnObject","push","Date","getTime","getTags","tags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","cancelRecommendationRequests","getRecommendations","recommendations","USER_TAGS","slice","userTagObj","rollup","xhr1","tagCounts","topartists","a","num","xhr2","data2","hasTags","keys","sort","b","getFriends","parse","CACHED_USERS","cached_users","user","maxPage","currPage","countryCountObj","tries","randomcountrylist","getAllArtists","responseData","console","refresh","confirm","clear","location","reload","total","totalPages","remove","style","artistNames","newArtist","playcount","dataObj","leaves","artistList","concat","putCountryCount","end","getUserTags","c","tagCount","topArtists","done","forbidden","nogood","log","user_tags","taglist","lim","Math","min","random","begin","ga","welcomeOverlay","transition","duration","each","selectAll","visibility","friends","friendName","updateName","append","attr","href","origin","pathname","target","on","this","classed","theme","loader","delay","param","split","addEventListener","evt","keyCode","screenshot","render","hitType","eventCategory","eventAction","eventLabel","nextTheme","substr","floor","colorArray","legend","countryScore","updateDimensions","height","innerHeight","width","getElementById","offsetWidth","getCountryPlaycount","countryCount","updateProgressBar","progressPro","numbersWithSpace","x","toString","shuffleArray","array","j","temp","updateScale","max","filter","maxartists","mydomain","pow","E","maxplaycount","color","scale","threshold","domain","range","updateLegend","len","ceil","legend_labels","svg","ls_w","ls_h","y","text1","text","text2","getComputedTextLength","redraw","enter","_","setup","projection","geo","naturalEarth","translate","PI","path","call","zoom","click","g","class","draw","topo","redrawMap","background-color","border-color","insert","properties","offsetL","offsetLeft","offsetT","offsetTop","countryNames","mouse","node","parseInt","tooltip","clicked","closeButton","removeArtistDiv","centered","move","tr","sc","animate","event","s","highlightCountry","h","throttle","clearTimeout","throttleTimer","invert","makeArtistDiv","showNextFive","showArtists","currentNoArtists","showPreviousFive","first","last","initial","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","artistLink","playCountDiv","currentCount","infoContainer","cnameDiv","recLoadingDiv","recLoadingMessage","src","display","margin","namelist","list","arr","Array","art","artistimg","artistname","recoArtistDiv","recoArtistLink","recoArtistInfoDiv","usertaglist","artisttaglist","summaryText","z","elem","pos","indexOf","offsetHeight","tagdiv","p","countryElement","ce","k","bounds","modscaleX","modscaleY","pt","behavior","scaleExtent","drawPlays","themes","blue_black","green_black","pink_black","pink_white","green_white","red_white","toTheme","themeList","body","countries","world","topojson","feature","objects","features","object","countryList","titleString","explrLogo","Image","w","canvas","createElement","ctx","getContext","backgroundColor","getComputedStyle","textColor","drawCenteredText","obj","font","fillText","string","measureText","lineWidth","strokeStyle","strokeText","fill","font-family","font-size","stroke","canvg","XMLSerializer","serializeToString","onload","save","globalAlpha","fillStyle","scoreString","fillRect","restore","drawImage","toDataURL","open"],"mappings":"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","file":"../all.min.js","sourcesContent":["var api = api || {};\n\napi.lastfm = {};\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\napi.lastfm.url = \"http://ws.audioscrobbler.com/2.0/\";\n\n/**\n* Send an API call to last.fm\n* @param {String} method    The method name (e.g. \"library.getartists\")\n* @param {Array} options    An array of tuples (arrays with two elements)\n                            with options for the request: [\"key\", \"value\"]\n* @param {Function} callback    The callback function to call with the data\n                                returned from the request. Takes two arguments,\n                                error and data (callback(error, data))\n*/\napi.lastfm.send = function(method, options, callback) {\n\tvar url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\n\t\tapi.lastfm.key + \"&format=json\";\n\tvar xhr, gotResponse;\n\n\toptions.forEach(function(el) {\n\t\turl += \"&\" + el[0] + \"=\" +\n\t\t\t(el[1] + \"\")\n\t\t\t.replace(\"&\", \"%26\")\n\t\t\t.replace(\"/\", \"%2F\")\n\t\t\t.replace(\"+\", \"%2B\")\n\t\t\t.replace(\"\\\\\", \"%5C\");\n\t});\n\n\txhr = d3.json(url, function(e, d) {\n\t\tgotResponse = true;\n\t\tcallback(e, d);\n\t});\n\n\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\n\tsetTimeout(function() {\n\t\tif (!gotResponse) {\n\t\t\t//console.log(\"GET \" + url + \" took to long, aborting\");\n\t\t\txhr.abort();\n\t\t\tcallback(\"ERROR\", {\n\t\t\t\terror: \"Took to long to respond\"\n\t\t\t});\n\t\t}\n\t}, 20000);\n\n\treturn xhr;\n}","/*requires:\napi/lastfm.js\n*/\n\nvar api = api || {};\nvar superCount = 0;\n\n(function(window, document) {\n\td3.csv(\"assets/data/countries.csv\", function(err, data) {\n\t\talias = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\treturn d.tag.toLowerCase();\n\t\t\t})\n\t\t\t.map(data);\n\n\t\tcname = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\treturn d.name.toLowerCase();\n\t\t\t})\n\t\t\t.map(data);\n\n\t\t/**\n\t\t * Tries to find out the country for a specified artist.\n\t\t * @param  {String}   artist   Name of the artist to get country for\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\n\t\t *                             The callback function takes one argument, this object:\n\t\t *\n\t\t *                             {\n\t\t *                             \t\"artist\": <artist name>,\n\t\t *                             \t\"country\": <country name>,\n\t\t *                             \t\"id\": <country id>,\n\t\t *                             \t\"tag\": <the tag that decided the country (e.g. Swedish for Sweden)>\n\t\t *                             }\n\t\t *\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\n\t\t *\n\t\t */\n\t\tapi.getCountry = function(artist, callback) {\n\t\t\t// Get artists country code here, from last.fm or whatever\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err,\n\t\t\t\tresponseData2) {\n\t\t\t\tvar running = true; // To stop searching when a country-tag has been found\n\n\t\t\t\t// Return if something failed\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\n\t\t\t\t\tresponseData2.toptags.tag.length) {\n\t\t\t\t\tcallback({\n\t\t\t\t\t\t\"artist\": artist\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Else check for country-tags in the artist's tags\n\t\t\t\tresponseData2.toptags.tag.forEach(function(t, i) {\n\t\t\t\t\tif (running) {\n\t\t\t\t\t\tvar tname = t.name.toLowerCase();\n\t\t\t\t\t\tvar cid;\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\tif (cname[tname] && cname[tname][0].id) { // sweden->sweden\n\t\t\t\t\t\t\t\tcid = cname[tname][0].id;\n\t\t\t\t\t\t\t\tcountryName = cname[tname][0].name;\n\t\t\t\t\t\t\t} else if (alias[tname] && alias[tname][0].id) { // swedish->sweden\n\t\t\t\t\t\t\t\tcid = alias[tname][0].id;\n\t\t\t\t\t\t\t\tcountryName = alias[tname][0].name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (cid) { // We found a country!\n\t\t\t\t\t\t\t\tcallback({ // Call callback method\n\t\t\t\t\t\t\t\t\t\"artist\": artist,\n\t\t\t\t\t\t\t\t\t\"id\": cid,\n\t\t\t\t\t\t\t\t\t\"tag\": t.name,\n\t\t\t\t\t\t\t\t\t\"name\": countryName,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\trunning = false; // Stop searching for country-tags\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t//console.log(artist, tname)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\tif (running) { // We got no country :(\n\t\t\t\t\tcallback({\n\t\t\t\t\t\t\"artist\": artist\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Returns a list of country objects for a list of artist names.\n\t\t *\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\n\t\t * @param  {Array}   artists  Array of artist names (String)\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\n\t\t *                             containing only those artists that have a country\n\t\t *                             associated with them. For object structure, see api.getCountry\n\t\t */\n\t\tapi.getCountries = function(artists, callback) {\n\t\t\tvar returnList = [],\n\t\t\t\tcount = 0;\n\t\t\t/**\n\t\t\t * Increases a count and checks if we've tried\n\t\t\t * to get country for all artists\n\t\t\t */\n\t\t\tvar checkCount = function() {\n\t\t\t\tcount++;\n\t\t\t\tsuperCount++;\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>Feel free to start<br>exploring!\");\n\t\t\t\tif (count === artists.length) {\n\t\t\t\t\t// We done, save artists and call back\n\t\t\t\t\twindow.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n\t\t\t\t\tcallback(returnList);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get countries for all artists\n\t\t\tartists.forEach(function(el, i) {\n\t\t\t\t// first check stored artists to see if we've already checked this artist\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\n\t\t\t\t\treturnObject.artist = el;\n\t\t\t\t\treturnList.push(returnObject);\n\t\t\t\t\tcheckCount();\n\t\t\t\t} else {\n\t\t\t\t\tvar start = new Date().getTime();\n\n\t\t\t\t\tapi.getCountry(el, function(data) {\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\n\t\t\t\t\t\t// console.error(data)\n\n\t\t\t\t\t\t// if (data.name) {\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\n\t\t\t\t\t\t\t\"id\": data.id,\n\t\t\t\t\t\t\t\"name\": data.name,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturnList.push(data);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\n\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\n\n\n\t\t\t\t\t\tcheckCount();\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\t\t}\n\t})\n\n\t/**\n\t * Get all tags for an artist.\n\t * @param  {String}   artist   Artist name\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\n\t */\n\tapi.getTags = function(artist, callback) {\n\t\t// Check if artist tags are already saved, if so return them\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\n\t\t\t// console.log(\"Had in store, no api call\");\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t} else {\n\t\t\t// Create object in localstorage\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\n\t\t\tSTORED_ARTISTS[artist].tags = [];\n\n\t\t\t// Get from lastfm\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\n\t\t\t\tfunction(err, responseData2) {\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\n\t\t\t\t\twindow.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t\t\t});\n\t\t}\n\t}\n\n\tapi.getArtistInfo = function(artist, callback) {\n\t\tvar artistInfo = [];\n\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\n\t\t\t//Creating a list of tag names\n\t\t\tvar tagnamelist = [];\n\t\t\tif (data1.artist.tags.tag) {\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\n\t\t\t\t\ttagnamelist.push(t.name);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tartistInfo.push({\n\t\t\t\tname: artist,\n\t\t\t\turl: data1.artist.url,\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\n\t\t\t\tdescription: data1.artist.bio.summary,\n\t\t\t\ttags: tagnamelist\n\t\t\t})\n\t\t\tcallback(artistInfo);\n\t\t})\n\n\n\n\t}\n\n\t/**\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\n\t * Also included are which tags matched.\n\t *\n\t * Calling this function cancels previous requests initiated by this function.\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\n\t */\n\tvar recommendationRequests = [];\n\tvar cancelRecommendationRequests = function() {\n\t\trecommendationRequests.forEach(function(xhr) {\n\t\t\txhr.abort();\n\t\t});\n\n\t\trecommendationRequests = [];\n\t}\n\tapi.getRecommendations = function(country, callback) {\n\t\tcancelRecommendationRequests();\n\n\t\tvar recommendations = [];\n\n\t\t// get top tags for user\n\t\tvar toptags = USER_TAGS.slice(0, 15);\n\t\t// make tag list to an object (back n forthss)\n\t\tvar userTagObj = d3.nest().key(function(d) {\n\t\t\treturn d.tag;\n\t\t}).rollup(function(d) {\n\t\t\treturn d[0].count;\n\t\t}).map(toptags);\n\n\n\t\t//console.log(\"Got top tags for user!\")\n\n\t\t// Get top artists for tag country\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\n\t\t\t// Gotta count matching tags to then sort\n\t\t\tvar tagCounts = {};\n\n\t\t\t// Get the tags for these artists\n\t\t\t//console.log(data1, err)\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\n\t\t\t\tcallback([]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar artists = data1.topartists.artist;\n\n\t\t\tartists.forEach(function(a, num) {\n\t\t\t\ttagCounts[a.name] = [];\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\n\t\t\t\t\tif (hasTags) {\n\t\t\t\t\t\t// Compare top 10 tags to user tags\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\n\t\t\t\t\t\t\treturn d.name;\n\t\t\t\t\t\t}).map(data2.toptags.tag);\n\n\t\t\t\t\t\t// Get rid of justin bieber\n\t\t\t\t\t\tif (tags[country]) {\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (num === artists.length - 1) {\n\t\t\t\t\t\t//console.log(\"We've gotten tag counts for all artists, make a list!\")\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\n\t\t\t\t\t\t\trecommendations.push({\n\t\t\t\t\t\t\t\tname: d,\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t//console.log(recommendations)\n\t\t\t\t\t\tcallback(recommendations);\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\trecommendationRequests.push(xhr2);\n\t\t\t})\n\t\t})\n\n\t\trecommendationRequests.push(xhr1);\n\t}\n\n\tapi.getFriends = function(callback) {\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\n\t}\n})(window, document);","/* requires:\napi/api.js\napi/lastfm.js\n*/\n\nvar STORED_ARTISTS = JSON.parse(window.localStorage.artists || \"{}\");\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\nvar SESSION = {};\n\n(function() {\n    // user = prompt(\"Input your user name, get top 20 artists\")\n    var user, currPage = 1,\n        maxPage;\n    var countryCountObj = {};\n    var count = 0;\n    var tries = 0;\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\n\n    var getAllArtists = function() {\n        api.lastfm.send(\"library.getartists\", [[\"user\", user], [\"limit\", 50],\n    [\"page\", currPage]],\n            function(error, responseData) {\n                // Special case for unfortunate users\n                if (responseData === \"\") {\n                    console.error('Got empty string (\"\") as response, skipping page.')\n                    currPage++;\n                    getAllArtists();\n                    return;\n                }\n                if (error || responseData.error) {\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\n\n                    // Try again, but not forever\n                    if (tries++ < 5) {\n                        getAllArtists();\n\n                        // TODO: Show erorr message ;)\n                    } else {\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\n                        if (refresh) {\n                            window.localStorage.clear();\n                            window.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n                            window.location.reload();\n                        }\n                    }\n                    return;\n                }\n\n                tries = 0;\n\n                if (currPage === 1) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\n\n                    if(SESSION.total_artists === 0){\n                        d3.select(\".bubblingG\").remove();\n                        d3.select(\"#loading-text\")\n                            .html(\"You haven't listened to any<br> artists yet. Start scrobbling with <br>\\\n                                                        <a href='http://evolver.fm/2012/05/08/how-to-scrobble-to-last-fm-from-itunes-\"\n                                                        +\"spotify-and-more/'>your favorite music player!</a>\");\n                        d3.select(\".loader\").style(\"pointer-events\",\"all\");\n                        return;\n                    }\n                }\n\n                currPage++;\n                // console.log(\"Artists done, get countries\");\n\n                // Save artist data to localStorage (and create a list of artist names)\n                var artistNames = []\n                responseData.artists.artist.forEach(function(newArtist) {\n                    var a = STORED_ARTISTS[newArtist.name] || {};\n\n                    a.playcount = +newArtist.playcount;\n                    a.url = newArtist.url;\n\n                    a.image = [newArtist.image[3]];\n\n                    STORED_ARTISTS[newArtist.name] = a;\n                    artistNames.push(newArtist.name);\n                })\n                window.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n                // var n = count++;\n\n                // Get country for all artists\n                api.getCountries(artistNames,\n                    function(data) {\n                        // Count plays for each country?\n                        // countryCountList = countryCountList.concat(data);\n                        var dataObj = d3.nest() //Gör så att man kan slå upp på land-id och få upp en lista på artister.\n                            .key(function(d) {\n                                return d.id;\n                            })\n                            .rollup(function(leaves) { //gör så att man får en lista på alla artister för ett land.\n                                return leaves;\n                            })\n                            .map(data); //Skickar in en lista med ett objekt för varje artist.\n\n                        d3.keys(dataObj).forEach(function(id) {\n                            countryCountObj[id] = countryCountObj[id] || {};\n                            countryCountObj[id][user] = countryCountObj[id][user] || [];\n                            var artistList = countryCountObj[id][user]; // list of artists for a country\n\n                            // if (artistList) {\n                            artistList = artistList.concat(dataObj[id]);\n\n                            //Lägger på de nya dataObj-elementen i countryCountObj-listan.\n                            // } else {\n                            //     artistList = dataObj[id];\n                            // }\n\n                            artistList.forEach(function(el, i) {\n                                //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\n                                artistList[i].image = STORED_ARTISTS[el.artist].image[0][\"#text\"];\n                                artistList[i].url = STORED_ARTISTS[el.artist].url;\n                                artistList[i].playcount = STORED_ARTISTS[el.artist].playcount;\n                                // if (artistList[i].users) {\n                                //     artistList[i].users.push(user);\n                                // } else {\n                                //     artistList[i].users = [user];\n                                // }\n                            });\n                            //countryCountObj är en lista med \"country\"-objekt. \n                            //Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\n                            //dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\n                            countryCountObj[id][user] = artistList;\n                        })\n\n                        map.putCountryCount(countryCountObj);\n\n                        if (currPage > maxPage) {\n                            end();\n                            return;\n                        } else {\n                            getAllArtists();\n                        }\n                    });\n            });\n    }\n\n    var getRecommendations = function() {\n        var currPage = 1,\n            limit = 50,\n            maxPage = 1000 / limit;\n        var countriesList = JSON.parse(window.localStorage.countries);\n\n        var countriesObj = d3.nest().key(function(d) {\n            return d.name;\n        }).rollup(function(d) {\n            return d[0];\n        }).map(countriesList);\n        // Get \"all\" artists from one country\n        // countriesList.forEach(function(country){\n\n        // });\n        api.lastfm.send(\"tag.gettopartists\", [\n            [\"tag\", \"swedish\"],\n            [\"limit\", limit],\n            [\"page\", currPage]\n            ], function(err, data) {\n            var artists = data.topartists.artist;\n            // For each artist, get their tags\n            artists.forEach(function(a) {\n                api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data) {\n                    // console.log(data);\n                })\n            })\n            // Look for user's top tags in artist tags\n            // If a lot of matches, save to recommended artists for that country\n        });\n\n    }\n\n    var getUserTags = function(err, data) {\n        /*if (err || data.error) {\n            console.error(\"Erorr in getUserTags\", err, data);\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\n            window.location.replace(window.location.origin + window.location.pathname);\n        }*/\n\n        var c = 0;\n\n        var tagCount = {};\n\n        //console.log(\"Gotta get tags\")\n\n        var topArtists = data.topartists.artist;\n        var done = function() {\n            // make list of tags to sort\n            USER_TAGS = [];\n            //Remove specific tags from user's top tags\n            forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\"];\n            d3.keys(tagCount).forEach(function(el) {\n                var nogood = false\n                for (i = 0; i < forbidden.length; i++) {\n                    if (el === forbidden[i]) {\n                        nogood = true;\n                    }\n                }\n                if (!nogood) {\n                    USER_TAGS.push({\n                        tag: el,\n                        count: tagCount[el]\n                    });\n                }\n            })\n            USER_TAGS.sort(function(a, b) {\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n            });\n            console.log(\"Done getting tags, saved to localStorage.user_tags\")\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\n        }\n\n\n        topArtists.forEach(function(el, i) {\n            // get top ten tags and save to users tag count....\n            setTimeout(function() { // Set timeout to not stop artists from loading...\n                api.lastfm.send(\"artist.gettoptags\", [[\"artist\", el.name]], function(err, data) {\n                    taglist = data.toptags.tag;\n                    if (taglist) {\n                        var lim = Math.min(taglist.length, 10);\n                        for (var i = 0; i < lim; i++) {\n                            if (tagCount[taglist[i].name]) {\n                                tagCount[taglist[i].name]++;\n                            } else {\n                                tagCount[taglist[i].name] = 1;\n                            }\n                        }\n                        // console.log(c, topArtists.length)\n                    }\n\n                    c++;\n                    if (c == topArtists.length - 1) {\n                        done();\n                    }\n                });\n            }, Math.random() * 3000);\n        });\n\n    }\n\n    var begin = function() {\n        //Send analytics event\n        ga('send', 'event', 'splash screen', 'Go!', 'test');\n        // fade out username input box\n        var welcomeOverlay = d3.select(\"#welcome-container\");\n        welcomeOverlay.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function() {\n                welcomeOverlay.remove();\n            });\n\n        // Fade in loader\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\n        d3.select(\"#loading-text\").html(\"Getting library...\");\n        setTimeout(function() {\n            if (d3.select(\"#loading-text\").html() === \"Getting library...\") {\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\n\n                setTimeout(function() {\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\n                            .style(\"pointer-events\", \"all\");\n                    }\n                }, 8000);\n            }\n        }, 8000);\n\n        // Fade in legend, progress-bar etc\n        d3.selectAll(\".on-map-view\").style({\n            \"visibility\": \"visible\",\n            //            \"opacity\": 0\n        }) //.transition().duration(1000).style(\"opacity\", 1);\n\n        // Get user tags\n        api.lastfm.send(\"user.gettopartists\", [[\"user\", user], [\"period\", \"12months\"], [\"limit\", \"50\"]], getUserTags);\n\n        // Get user friends\n        api.getFriends(function(err, data) {\n            try {\n                var friends = data.friends.user;\n                var i = 0;\n                var friendName = d3.select(\"#friend-name\");\n\n                var updateName = function() {\n                    friendName.html(\"\");\n                    friendName.append(\"a\").attr({\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\n                        target: \"_self\",\n                    }).html(friends[i].name);\n                }\n\n                d3.selectAll(\".arrow\").on(\"click\", function() {\n                    if (d3.select(this).classed(\"left\")) {\n                        // Go left\n                        i = (i === 0 ? friends.length - 1 : i - 1);\n                    } else {\n                        // Go right\n                        i = (i + 1) % friends.length;\n                    }\n\n                    updateName();\n                })\n\n                updateName();\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n\n            } catch (e) {\n                console.error(\"getFriends()\",e);\n                d3.select(\"#friends\").html(\"&nbsp;Couldn't find any<br>friends on last.fm :(&nbsp;\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n            }\n        });\n\n        if (CACHED_USERS[user]) {\n            // TODO: use timestamp\n            console.log(\"No new artists on last.fm!\");\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\n\n            // Get number of artists for screenshot etc.\n            api.lastfm.send(\"library.getartists\", [[\"user\", user], [\"limit\", 1], [\"page\", 1]],\n                function(error, responseData) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                });\n\n            setTimeout(function() {\n                map.putCountryCount(countryCountObj);\n                end();\n            }, 1000)\n        } else {\n            // Save theme\n            var theme = window.localStorage.theme;\n            window.localStorage.clear();\n            if (theme) {\n                window.localStorage.theme = theme;\n            }\n            getAllArtists();\n        }\n    }\n\n    var end = function() {\n        // We're done, fade out loader\n        var loader = d3.select(\".loader\");\n        loader.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function() {\n                loader.remove();\n            });\n        //Also fade out progress bar text (after a short delay)\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\n            .style(\"opacity\", 0);\n\n        CACHED_USERS = {};\n        CACHED_USERS[user] = new Date().getTime();\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\n    }\n\n    // // Set theme\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\n\n    // Try to get username from url\n    var param = window.location.href.split(\"username=\")[1];\n\n    if (param) { // We already have a user\n        // set up keyboard shortcuts\n        window.addEventListener(\"keydown\", function(evt){\n            switch(evt.keyCode){\n                // s\n                case 83: \n                    screenshot.render();\n                    //Send google analytics event\n                    ga('send', {\n                      hitType: 'event',\n                      eventCategory: 'Hotkeys',\n                      eventAction: 'Take screenshot',\n                      eventLabel: 'test'\n                    });\n                    break;\n                // t\n                case 84: \n                    nextTheme();\n                    //Send google analytics event\n                    ga('send', {\n                      hitType: 'event',\n                      eventCategory: 'Hotkeys',\n                      eventAction: 'Cycle theme',\n                      eventLabel: 'test'\n                    });\n                    break;\n                default: break;\n            }\n        });\n        \n        if (param.length > 15) {\n            param = param.substr(0, 15);\n        }\n        user = param;\n        SESSION.name = param;\n        begin();\n    } else {\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\n    }\n})();","/* requires:\napi/api.js\napi/lastfm.js\nscript.js\n*/\n\nvar map = {};\n//White theme default:\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\nvar legend;\nvar countryScore = 0;\n\n\n(function(window, document) {\n  d3.select(window).on(\"resize\", throttle);\n\n  var doThrottle = false;\n  var filter = \"artists\"; // filter by artists or plays\n\n  var zoom = d3.behavior.zoom()\n    .scaleExtent([1, 9])\n    .on(\"zoom\", move);\n\n\n  var height, width;\n\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\n  countryCount = {};\n\n  //Variables needed to update scale and legend\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\n  var maxartists = 1,\n    maxplaycount = 0;\n\n  //Setting color and range to be used\n  var color;\n\n  // Set theme\n  var theme = window.localStorage.theme || \"pink_white\";\n\n  map.drawPlays = function() {\n    filter = \"scrobbles\";\n    redraw();\n  };\n\n  /**\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\n   */\n  function updateDimensions() {\n    height = window.innerHeight - 5;\n    width = document.getElementById('map-container').offsetWidth;\n  }\n\n  //Returns total number of plays for country\n  function getCountryPlaycount(c) {\n    if (countryCount[c.id]) {\n      var count = 0;\n      for (i = 0; i < countryCount[c.id].length; i++) {\n        count += countryCount[c.id][i].playcount;\n      }\n      return count;\n    } else return 0;\n  };\n\n\n  function updateProgressBar() {\n    var progressPro = (countryScore / 197);\n    return progressPro;\n  }\n;\n\n  //Function to format numbers over 1000 with a space\n  function numbersWithSpace(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  }\n  /**\n   * Randomize array element order in-place.\n   * Using Fisher-Yates shuffle algorithm.\n   */\n  function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  //Function to remove duplicates from arrays\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  function updateScale() {\n    var max = -1;\n    switch (filter) {\n      case \"artists\":\n        max = maxartists;\n        for (i = 0; i < 5; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1));\n        }\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\n        break;\n      case \"scrobbles\":\n        max = maxplaycount;\n        for (i = 0; i < 7; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\n        }\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\n        break;\n    };\n\n\n    color = d3.scale.threshold()\n      .domain(mydomain)\n      .range(colorArray);\n  };\n\n  function updateLegend() {\n    //Remove decimals from domain\n    var x = 0;\n    var len = mydomain.length\n    while (x < len) {\n      mydomain[x] = Math.ceil(mydomain[x]);\n      x++;\n    };\n\n    //Array of text\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\n\n    //Create Legend\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\n      .data(mydomain);\n\n    //Color box sizes\n    var ls_w = 20,\n      ls_h = 20;\n    var x = width * 0.03;\n    var y = height * 0.03;\n\n    // Add legend filter text\n    var text1 = svg.select(\"#filter-text\")\n      .attr(\"x\", x)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(\"Number of \");\n    var text2 = svg.select(\"#filter\")\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(filter);\n    text2.on(\"click\", function() {\n      // Toggle filter method\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\n      redraw();\n    })\n\n    var enter = legend.enter()\n      .append(\"g\")\n      .attr(\"class\", \"legend\");\n\n    enter.append(\"rect\")\n      .attr(\"x\", x)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - 2 * ls_h - y;\n      })\n      .attr(\"width\", ls_w)\n      .attr(\"height\", ls_h)\n      .style(\"fill\", function(d) {\n        return color(d);\n      });\n    enter.append(\"text\")\n      .attr(\"x\", x + 30)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - ls_h - 4 - y;\n      });\n\n    legend.selectAll(\"text\").data(mydomain)\n      .text(function(d, _, i) {\n        return legend_labels[i];\n      });\n  }\n  //Variables for color legend\n\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\n    \"tooltip hidden\");\n\n  var infoContainer = d3.select(\"body\").append(\"div\").attr(\"class\",\n    \"infoContainer hidden\").attr(\"id\", \"infoContainer\");\n\n  var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\n\n\n  var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"cnameDiv\").attr(\"id\", \"cname\");\n\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"detailsDiv\").attr(\"id\", \"details\");\n\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"recoDiv\").attr(\"id\", \"recommendations\");\n\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\n\n  var closeButton;\n\n  var offsetL;\n  var offsetT;\n\n  //---------------------- Color preferences -------------//\n  var themes = {\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\n  };\n\n  nextTheme = function(toTheme) {\n    // Go to next theme\n    var themeList = d3.keys(themes);\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\n    colorArray = themes[theme];\n\n    //Change body class\n    d3.select(document.body).attr(\"class\", theme);\n\n    // Save :)\n    window.localStorage.theme = theme;\n\n    // Redraw map :)\n    if (topo) redraw();\n  }\n  map.nextTheme = nextTheme;\n\n  nextTheme(theme);\n  updateScale();\n  updateDimensions();\n  setup(width, height);\n\n  function setup(width, height) {\n    projection = d3.geo.naturalEarth()\n      .translate([(width / 2), (height / 2) + height * 0.08])\n      .scale(width / 1.7 / Math.PI);\n\n    path = d3.geo.path().projection(projection);\n\n    svg = d3.select(\"#map-container\").append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\n      .call(zoom)\n      .on(\"click\", click)\n      .append(\"g\");\n\n    g = svg.append(\"g\");\n    svg.append(\"g\").attr(\"id\", \"legend\")\n    svg.append(\"text\").attr({\n      id: \"filter-text\",\n      class: \"legend\"\n    });\n    svg.append(\"text\").attr({\n      id: \"filter\",\n      class: \"legend\"\n    });\n  }\n\n  //Load country aliases and names\n  if (!window.localStorage.countries) {\n    d3.csv(\"assets/data/countries.csv\", function(err, countries) {\n      countryNames = countries;\n\n      countries.forEach(function(i) {\n        //Turning CSV values into numeric data\n        i.id = +i.id;\n      });\n\n      // save countries\n      window.localStorage.countries = JSON.stringify(countries);\n    });\n\n  } else {\n    countryNames = JSON.parse(window.localStorage.countries);\n  }\n  //Load map\n  d3.json(\"assets/data/world-50m.json\", function(error, world) {\n\n    var countries = topojson.feature(world, world.objects.countries).features;\n\n    topo = countries;\n    draw(topo, true);\n\n  });\n\n  function draw(topo, redrawMap) {\n    var country = g.selectAll(\".country\").data(topo);\n\n    var progress = d3.select(\"#progress-bar\").style({\n      \"height\": updateProgressBar() * 100 + \"%\",\n      \"background-color\": colorArray[6]\n    });\n    d3.select(\"#countryCount\").style({\n      \"background-color\": colorArray[1],\n      \"border-color\": colorArray[6]\n    })\n    //Show progressbar text on mouse-over\n    .on(\"mousemove\", function() {\n      d3.select(\"#progress-text\")\n        .transition().duration(150).style(\"opacity\", 0.9);\n    })\n      .on(\"mouseout\", function() {\n        d3.select(\"#progress-text\").transition().duration(150).style(\"opacity\", 0);\n      });\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/197 countries\")\n\n    //Draw countries\n    if (redrawMap) {\n      country.enter().insert(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"id\", function(d, i) {\n          return d.id;\n        })\n        .attr(\"title\", function(d, i) {\n          return d.properties.name;\n        })\n        .style(\"fill\", function() {\n          return color(0);\n        });\n    }\n    //Color countries\n    country.transition().style(\"fill\", function(d) {\n      switch (filter) {\n        case \"artists\":\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\n            color(0);\n          //break;\n        case \"scrobbles\":\n          return color(getCountryPlaycount(d));\n      }\n    })\n\n    //offsets for tooltips\n    offsetL = document.getElementById('map-container').offsetLeft;\n    offsetT = document.getElementById('map-container').offsetTop;\n\n    //tooltips\n    country\n      .on(\"mousemove\", function(d, i) {\n        var name;\n        var tag;\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        tooltip.classed(\"hidden\", false)\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\n            mouse[1] +\n            offsetT + 10) + \"px\")\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\n      })\n      .on(\"mouseout\", function(d, i) {\n        tooltip.classed(\"hidden\", true);\n      })\n      //Show div with top 10 artists for country when clicked\n      .on(\"click\", function(d, i) {\n        var name;\n        var tag;\n        var id;\n\n        clicked(d);\n\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n            id = d.id;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        closeButton\n          .on(\"click\", function(d, i) {\n            removeArtistDiv();\n            // zoom out map, fulhack\n            clicked(centered);\n          }) //\"stäng\" onclick slutar\n      }) // on click slutar\n\n  }\n  \n  /*-------redraw----*/\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean \n  function redraw(redrawMap) {\n    updateDimensions();\n\n    if (redrawMap) {\n      d3.select('svg').remove();\n      setup(width, height);\n    }\n\n    maxartists = d3.max(d3.keys(countryCount), function(cname) {\n      return countryCount[cname].length;\n    });\n    maxplaycount = d3.max(d3.keys(countryCount), function(cname) {\n      return getCountryPlaycount({\n        id: cname\n      });\n    })\n    updateScale();\n    updateLegend();\n\n    draw(topo, redrawMap);\n  }\n\n\n  /**\n   * Moves the map to the specified location or based on the current zoom event\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\n   * @param  {Number} sc      Optional: Scale factor\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\n   */\n  function move(tr, sc, animate) {\n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\n\n    // If move was not initiated by clicking on a country, deselect the selected country\n    if (!tr && !sc && centered) {\n      highlightCountry(false);\n      removeArtistDiv();\n      centered = null;\n    }\n\n    var zscale = s;\n    var h = height / 4;\n\n    t[0] = Math.min(\n      (width / height) * (s - 1),\n      Math.max((width * 1.2) * (1 - s), t[0])\n    );\n\n    t[1] = Math.min(\n      h * (s - 1) + h * s,\n      Math.max(height * (1 - s) - h * s, t[1])\n    );\n\n    zoom.translate(t);\n    zoom.scale(s);\n\n    if (animate) {\n      g.transition().duration(950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n\n    } else {\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n    }\n\n    //adjust the country hover stroke width based on zoom level\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\n  }\n  map.move = move;\n\n  var throttleTimer;\n\n  function throttle() {\n    window.clearTimeout(throttleTimer);\n    throttleTimer = window.setTimeout(function() {\n      redraw(true);\n      move([0, 0], 1); // Reset position\n    }, 200);\n  }\n\n\n  //geo translation on mouse click in map\n  function click() {\n    var latlon = projection.invert(d3.mouse(this));\n    // console.log(latlon);\n    //console.log(countryCount);\n  }\n\n\n  /*----------------------------makeArtistDiv------------------------------------------------*/\n  //Skapar \"details-on-demand\"-divarna.\n  function makeArtistDiv(d) {\n\n    //lägga till namn till detailseDiv\n    var name;\n    var tag;\n    var recoms;\n    //var id;\n    countryNames.forEach(function(e, i) {\n      if (e.id === d.id) {\n        name = e.name;\n        tag = e.tag;\n        //id = d.id;\n      };\n    })\n    d3.select(\"#recommendations\").html(\"\");\n    //Show country name and info div on left hand side\n    infoContainer\n      .classed(\"hidden\", false)\n      .transition()\n      .style(\"opacity\", 1)\n      .duration(750);\n\n    //Hide progressbar when showing \n    d3.selectAll(\"#countryCount, .on-map-view\")\n      .classed(\"hidden\", true);\n\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"class\", \"close-button\").html(\"X\");\n\n    //Populate country information div\n    cnameDiv\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\n      .append(\"h1\").html(name);\n    d3.select(\"#cnameCont\").append(\"h5\")\n      .html(function() {\n        if (countryCount[d.id])\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\n        else return \"No artists yet - Find new here ->\"\n      })\n\n\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\n\n      var currentNoArtists = 0;\n      var currentCount = 0;\n\n\n      d3.select(\"#details\").append(\"div\")\n        .html(\"<span>Your top artists tagged with </span><span class=\\\"demonym\\\">#\" + name + \"</span><span> or </span><span class=\\\"demonym\\\">#\" + tag + \"</span><span>: </span>\")\n        .attr(\"class\", \"topartists-desc\");\n      //Show top 5 artists\n\n      d3.select(\"#artistContainer\").append(\"i\")\n        .attr(\"class\", \"fa artist-control right fa-angle-right\")\n        .on(\"click\", function(){\n          showNextFive();\n        });\n\n      d3.select(\"#artistContainer\").append(\"i\")\n        .attr(\"class\", \"fa artist-control left disabled fa-angle-left\")\n        .on(\"click\", function(){\n          showPreviousFive();\n        });\n\n      function showNextFive(){\n        showArtists(currentNoArtists+1, currentNoArtists+5, false);\n        //Send event to google analytics\n        ga('send', {\n          hitType: 'event',\n          eventCategory: 'Artist viewer',\n          eventAction: 'Next five',\n          eventLabel: 'test'\n        });\n      }\n  \n      function showPreviousFive(){\n        showArtists(currentNoArtists-9, currentNoArtists-5, false);\n        //Trigger GA event\n        ga('send', {\n          hitType: 'event',\n          eventCategory: 'Artist viewer',\n          eventAction: 'Previous five',\n          eventLabel: 'test'\n        });\n      }\n\n      function showArtists(first, last, initial){\n        //Clean-up previous five artist images\n        d3.selectAll(\".scrobbled\").remove();\n        //console.log(\"displaying \"+first+\" to \"+last)\n\n        //Generate new artist images for all artists within the desired range!\n          for (i = first-1; i <= last-1; i++) {\n            if (countryCount[d.id][i]) {\n              //console.log(i+\" \"+countryCount[d.id][i].artist)\n              var artistDiv = d3.select(\"#details\").append(\"div\")\n                .attr({\n                  \"class\": \"scrobbled artist-div lowlight\",\n                  \"data-artist\": countryCount[d.id][i].artist\n                })\n                .on(\"click\", function() {\n                  // Lowlight not selected artists\n                  d3.selectAll(\".artist-div\").classed({\n                    \"lowlight\": true,\n                    \"highlight\": false\n                  });\n                  // Highlight selected artist\n                  d3.select(this).classed({\n                    \"highlight\": true,\n                    \"lowlight\": false\n                  });\n\n                  makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\n                });\n\n              var artistLink = artistDiv.append(\"a\").style(\"display\", \"block\")\n              artistLink.append(\"div\")\n                .attr(\"class\", \"image-div\")\n                .style(\"background-image\", \"url(\" + \"'\" + countryCount[d.id][i].image + \"'\" + \" )\")\n                //.append(\"span\").attr(\"class\", \"overlayNo\").html(i+1);\n                \n              var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\n\n              playCountDiv.append(\"p\")\n                .html(\"<b>\" + countryCount[d.id][i].artist + \"</b><br>\" + countryCount[d.id][i].playcount + \" scrobbles\")\n                .attr(\"class\", \"details-p\");\n\n              currentCount++;\n            } else {\n              i = last;\n            }\n        }\n        //\n        //Check to see if we are moving backwards or forwards through the list..\n        if (first<currentNoArtists) //Backwards!\n          currentNoArtists = Math.ceil((currentNoArtists-currentCount)/5)*5;\n        else if (last>currentNoArtists) //Forwards!\n          currentNoArtists = currentNoArtists+currentCount;\n        //console.log(\"currentNoArtists är \"+currentNoArtists);\n\n        //Reset the count!\n        currentCount = 0;\n\n        //\n        //Disable and enable user controls\n        //\n        \n        //Left arrow...\n        if (currentNoArtists>=10 && !initial){\n          d3.selectAll(\".artist-control.left\")\n            .classed(\"disabled\", false)\n            .on(\"click\", function(){\n              showPreviousFive();\n            });\n        }\n        else{\n          d3.selectAll(\".artist-control.left\")\n            .classed(\"disabled\", true)\n            .on('click',function(){\n              d3.select(this).on('click',null); //Remove click listener!\n            });\n        }\n        //and right...\n        if (currentNoArtists>countryCount[d.id].length-1){ //There are no more artists!\n          d3.selectAll(\".artist-control.right\")\n            .classed(\"disabled\", true)\n            .on('click',function(){\n              d3.select(this).on('click',null); //Remove click listener!\n            });\n        }\n        else{\n          d3.selectAll(\".artist-control.right\")\n            .classed(\"disabled\", false)\n            .on(\"click\", function(){\n              showNextFive();\n            });\n        }\n      }\n      //Fetch the initial five artists!! \n      showArtists(1, 5, true);\n    \n      \n    } else { //Om landet vi klickat på inte har några lyssnade artister... \n      console.log(\"landet har inga lyssnade artister\");\n    }\n    //\"Recommended\"-heading\n    d3.select(\"#recommendations\").append(\"h4\")\n      .html(\"You may like: \")\n      .attr(\"class\", \"topartists-desc\");\n\n    // show loading message\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\n      .attr(\"id\", \"rec-loading\")\n      .html(\"Looking for artists tagged #\" + tag);\n    recLoadingDiv.append(\"img\")\n      .attr({\n        id: \"rec-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      })\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\n\n\n\n    //Get list of recommendations for country based on tags!\n    api.getRecommendations(tag, function(taglist) {\n      // Return if this callback is from an old (not active) country\n      if (!centered || centered.id !== d.id) {\n        return;\n      }\n      // Show loading message\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\n\n      //Get list of recommendations for country based on country name!\n      api.getRecommendations(name, function(namelist) {\n        // Return if this callback is from an old (not active) country\n        if (!centered || centered.id !== d.id) {\n          return;\n        }\n        //Show loading message\n        recLoadingMessage.html(\"Loading images for recommended artists\");\n\n        //Join the two lists\n        var list = taglist.concat(namelist);\n\n        //Removing duplicates from the list!\n        var arr = {};\n        for (var i = 0; i < list.length; i++)\n          arr[list[i]['name']] = list[i];\n\n        list = new Array();\n        for (key in arr)\n          list.push(arr[key]);\n\n        list.sort(function(a, b) {\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n        });\n\n        //Get the first 20 artists\n        list = list.slice(0, 20);\n        //Randomize list\n        list = shuffleArray(list);\n\n        if (list.length === 0) { // Found no recommendations\n          recLoadingDiv.remove();\n          d3.select(\"#recommendations\").append(\"p\")\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\n          d3.select(\"#recommendations\").append(\"a\").attr({\n            href: \"http://www.last.fm/tag/\" + name,\n            target: \"_blank\",\n          }).html(\"Try searching last.fm yourself!\");\n        }\n\n        for (i = 0; i < Math.min(list.length, 5); i++) {\n          // Return if this callback is from an old (not active) country\n          if (centered.id !== d.id) {\n            return;\n          }\n\n          var artisturl, artistimg, artistname;\n\n          //Get url and images for recommended artists!\n          api.getArtistInfo(list[i].name, function(art) {\n            recLoadingDiv.remove();\n            var artisturl = art[0].url;\n            var artistimg = art[0].image;\n            var artistname = art[0].name;\n\n\n            var recoArtistDiv = d3.select(\"#recommendations\").insert(\"div\", \"#summaryText\").attr(\"class\", \"artist-div lowlight\");\n            var recoArtistLink = recoArtistDiv.append(\"a\").style(\"display\", \"block\")\n              //.attr(\"href\", artisturl)\n              //.attr(\"target\", \"_blank\");\n            recoArtistLink.append(\"div\")\n              .attr(\"class\", \"image-div\")\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\n\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\n\n            recoArtistInfoDiv.append(\"p\")\n              .html(\"<b>\" + artistname + \"</b>\")\n              .attr(\"class\", \"details-p\");\n\n            recoArtistDiv.on(\"click\", function() {\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\n                \"lowlight\": true,\n                \"highlight\": false\n              });\n\n              d3.select(this).classed({ // Highlight selected artist\n                \"highlight\": true,\n                \"lowlight\": false\n              });\n              makeSummaryDiv(artistname);\n            });\n\n          })\n        }\n\n\n      })\n    });\n\n  }\n\n  function removeArtistDiv() {\n    infoContainer.transition().style(\"opacity\", 0).duration(1000);\n    infoContainer.classed(\"hidden\", true);\n    d3.selectAll(\"#countryCount, .on-map-view\").classed(\"hidden\", false);\n    d3.selectAll(\".artist-div\").remove(\"div\");\n    d3.selectAll(\".close-button\").remove(\"button\");\n    d3.selectAll(\".details-h\").remove(\"p\");\n    d3.selectAll(\".details-h4\").remove(\"h4\");\n    d3.selectAll(\".recom-h4\").remove(\"h4\");\n    d3.selectAll(\".artist-control\").remove();\n    d3.selectAll(\".topartists-desc\").remove();\n\n\n\n\n\n    cnameDiv.classed(\"hidden\", true);\n    d3.select(\"#cnameCont\").remove(\"h1\");\n    d3.select(\"#cnameCont\").remove(\"h5\");\n  }\n\n  function makeSummaryDiv(artistname) {\n    var usertaglist = [];\n    //console.log(usertaglist);\n    var artisttaglist = [];\n\n    d3.select(\"#summaryText\").remove();\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\n    d3.select(\"#summaryText\").append(\"img\")\n      .attr({\n        id: \"sum-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      });\n\n    //Get artist info from Lastfm\n    api.getArtistInfo(artistname, function(art) {\n      var text = art[0].description.replace(/(\\n)+/g, '<br />');\n      //var text = text.substring(6);\n      //Get artist's top tags\n      artisttaglist = art[0].tags;\n      //Create list of user tags\n\n      //Make list of artist tags which are also user's top tags:\n      for (y = 0; y < 15; y++) {\n        for (z = 0; z < artisttaglist.length; z++) {\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\n            usertaglist.push(USER_TAGS[y].tag)\n          }\n        }\n      }\n\n      //Create combined tag list and remove duplicates\n      var taglist = usertaglist.concat(artisttaglist);\n      taglist = taglist.filter(function(elem, pos) {\n        return taglist.indexOf(elem) == pos;\n      })\n      // Remove loading text\n      d3.select(\"#summaryText\").html(\"\");\n      //Create containing div\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\n      summaryText.style(\"max-height\", h + \"px\");\n\n      summaryText.append(\"h4\").html(artistname);\n\n      //Show top 7 tags\n      for (i = 0; i < Math.min(taglist.length, 6); i++) {\n        var tagdiv = summaryText.append(\"div\").attr(\"class\", \"tagdiv\").append(\"h4\").html(\"#\" + taglist[i]);\n        //Mark all user tags\n        for (p = 0; p < usertaglist.length; p++) {\n          if (taglist[i] === usertaglist[p])\n            tagdiv.classed(\"usertag\", true);\n        }\n      }\n      //Display artist summary\n      summaryText.append(\"p\").html(text || \"No description available - <a href='http://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\n\n    })\n\n  }\n\n  /**\n   * Toggles highlight of a specified country\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\n   */\n  function highlightCountry(highlight, countryElement) {\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\n\n    if (highlight) {\n      // Fade out all other countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", function() {\n          return (+this.id === +countryElement.id ? 1.0 : 0.3);\n        })\n\n      var ce = d3.select(document.getElementById(\"\" + countryElement.id)); // d3 can't select ids that are only numbers\n      ce.classed(\"highlighted\", true);\n    } else {\n      // Fade in all countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", 1.0)\n    }\n\n  }\n\n  function clicked(d) { //d är det en har klickat på\n\n    var x, y, k;\n    //bounding box for clicked country\n    var b = path.bounds(d);\n\n    getCountryPlaycount(d);\n\n    //Set scale\n    var modscaleX = (b[1][0] - b[0][0]);\n    var modscaleY = (b[1][1] - b[0][1]);\n\n    //Dom't zoom too far with small countries!\n    if (modscaleX < 80)\n      modscaleX = 80;\n\n    //Landet är inte centrerat redan\n    if (d && centered !== d) {\n      centered = d;\n      removeArtistDiv();\n      makeArtistDiv(d);\n      highlightCountry(true, d);\n\n\n      //Special rules for special countries:\n      switch (d.id) {\n        case 840: //US\n          k = 3;\n          x = -(b[1][0] + b[0][0]) / 3;\n          y = -(b[1][1] + b[0][1]) / 1.7;\n          break;\n        case 250: //France\n          k = 7.012;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 3.4;\n          break;\n        case 528: //Netherlands\n          k = 9.0124;\n          x = -(b[1][0] + b[0][0]) / 1.5;\n          y = -(b[1][1] + b[0][1]) / 3.3;\n          break;\n        case 643: //Russia\n          k = 1.9;\n          x = -(b[1][0] + b[0][0]) / 1.25;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n        case 554: //New Zeeland\n          k = 4;\n          x = -(b[1][0] + b[0][0]) / 0.90;\n          y = -(b[1][1] + b[0][1]) / 1.8;\n          break;\n        case 36: //Australia\n          k = 3.3;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 2.1;\n          break;\n\n        default: //Everybody else\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n      }\n\n      //Landet är redan centrerat\n    } else {\n      x = -width / 2;\n      y = -height / 2 - height * 0.08;\n      k = 1\n      removeArtistDiv();\n      highlightCountry(false);\n      centered = null;\n\n      //detailsDiv.classed(\"hidden\", true);\n    }\n\n    var pt = projection.translate();\n    // Tell map to move with animation\n    // Basically does the same as before: translate to middle,\n    // then to x and y with respect to scale\n    move([pt[0] + x * k, pt[1] + y * k], k, true);\n\n  }\n\n  //function to add points and text to the map (used in plotting capitals)\n  function addpoint(lat, lon, text) {\n\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\n    var x = projection([lat, lon])[0];\n    var y = projection([lat, lon])[1];\n\n    gpoint.append(\"svg:circle\")\n      .attr(\"cx\", x)\n      .attr(\"cy\", y)\n      .attr(\"class\", \"point\")\n      .attr(\"r\", 1.5);\n\n    //conditional in case a point has no associated text\n    if (text.length > 0) {\n\n      gpoint.append(\"text\")\n        .attr(\"x\", x + 2)\n        .attr(\"y\", y + 2)\n        .attr(\"class\", \"text\")\n        .text(text);\n    }\n\n  }\n\n  /** \"PUBLUC\" FUNCTIONS **/\n  map.putCountryCount = function(object) {\n    countryCount = JSON.parse(JSON.stringify(object));\n    countryScore = 0;\n    var countryList = [];\n\n    // Extract info for the current user\n    d3.keys(countryCount).forEach(function(id) {\n      if (countryCount[id][SESSION.name]) {\n        countryCount[id] = countryCount[id][SESSION.name];\n        countryScore = countryScore + 1;\n        countryList.push(+id)\n      } else {\n        // delete countryCount[id];\n      }\n    })\n\n    if (topo) redraw();\n\n    window.countryScore = countryScore;\n\n  }\n})(window, document)","var screenshot = {};\n\n(function(window, document) {\n\tscreenshot.render = function() {\n\t\tvar titleString,\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\n\t\t\timg;\n\n\t\tvar explrLogo = new Image();\n\n\t\tvar svg = d3.select(\"svg\");\n\t\tvar w = svg.attr(\"width\");\n\t\tvar h = svg.attr(\"height\");\n\n\t\tvar canvas = document.createElement(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\n\t\tvar textColor = window.getComputedStyle(document.body).color;\n\n\t\tvar drawCenteredText = function(obj) {\n\t\t\tctx.font = obj.font;\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\n\t\t\tif (obj.lineWidth) {\n\t\t\t\tctx.lineWidth = obj.lineWidth;\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\t\t\t}\n\t\t}\n\n\t\tcanvas.width = w;\n\t\tcanvas.height = h;\n\n\t\t// insert background rect\n\t\tsvg.insert(\"rect\", \"g\")\n\t\t\t.attr({\n\t\t\t\tid: \"background-rect\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\theight: \"100%\",\n\n\t\t\t})\n\t\t\t.style({\n\t\t\t\tfill: backgroundColor,\n\t\t\t});\n\n\t\t// Add color, font to legend text\n\t\td3.selectAll('.legend text, text.legend').style({\n\t\t\t\"font-family\": function() {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\n\t\t\t},\n\t\t\t\"font-size\": function() {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\n\t\t\t},\n\t\t\t\"fill\": textColor,\n\t\t});\n\t\td3.selectAll(\".legend rect\").style({\n\t\t\tstroke: backgroundColor,\n\t\t})\n\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\n\n\t\texplrLogo.onload = function() {\n\t\t\t/* Add text and shiiet */\n\t\t\t// Add text background box\n\t\t\tctx.save(); // To draw with different opaticy\n\t\t\tctx.globalAlpha = 0.6;\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tscoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 197 countries\";\n\t\t\ttitleString = SESSION.name + \"'s musical world map\";\n\t\t\tctx.font = \"34px Patua One\";\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\n\t\t\tctx.fillStyle = textColor;\n\n\t\t\t// Add text\n\t\t\tctx.fillStyle = textColor;\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: titleString,\n\t\t\t\tfont: \"34px Patua One\",\n\t\t\t\ty: h - 60,\n\t\t\t});\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: scoreString,\n\t\t\t\tfont: \"20px Didact Gothic\",\n\t\t\t\ty: h - 40,\n\t\t\t});\n\n\t\t\t// Add explr.fm logo\n\t\t\tctx.restore();\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\n\n\t\t\td3.select(\"#background-rect\").remove();\n\n\t\t\t//console.log(canvas.toDataURL())\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL();\n\t\t\t// d3.select(\"body\").append(img);\n\t\t\t// \n\t\t\twindow.open(canvas.toDataURL(), \"_blank\");\n\t\t}\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\n\t}\n\n})(window, document);"]}