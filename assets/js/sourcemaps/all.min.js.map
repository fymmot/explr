{"version":3,"sources":["api/lastfm.js","api/api.js","script.js","map.js","screenshot.js"],"names":["api","lastfm","key","url","keyI","keys","send","method","options","callback","retries","length","xhr","gotResponse","aborted","undefined","forEach","el","replace","tryGet","tries","cb","d3","json","e","d","clearTimeout","timeout","JSON","parse","response","error","errInfo","errorCode","try","console","log","setTimeout","bind","abort","STORED_ARTISTS","CACHED_NO_COUNTRIES","superCount","csv","err","data","names","split","tags","mainName","tag","name","map","splits","concat","_objectSpread","splice","flat","alias","nest","toLowerCase","cname","getCountry","artist","responseData2","toptags","theTroubles","demonymTag","id","country","count","countryTag","some","t","i","tname","bestTag","includes","Object","assign","getCountries","artists","checkCount","select","html","SESSION","total_artists","localforage","setItem","returnList","returnObject","push","Date","getTime","getTags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","cancelRecommendationRequests","getRecommendations","recommendations","USER_TAGS","slice","userTagObj","rollup","xhr1","tagCounts","topartists","a","num","xhr2","data2","hasTags","sort","b","getFriends","window","document","getItem","val","CACHED_USERS","localStorage","cached_users","addArtistsWithNoCountry","listOfArtistsWithNoCountry","noCountriesListEl","_art","append","saveToStorage","style","visibility","pointer-events","getUserTags","alert","location","origin","pathname","tagCount","topArtists","taglist","nogood","forbidden","user_tags","stringify","done","Math","random","user","maxPage","currPage","countryCountObj","randomcountrylist","end","loader","transition","duration","each","remove","delay","param","addEventListener","evt","keyCode","screenshot","hitType","eventCategory","eventAction","eventLabel","nextTheme","substr","begin","welcomeOverlay","selectAll","friends","friendName","href","attr","target","classed","this","updateName","responseData","total","putCountryCount","theme","getAllArtists","confirm","clear","reload","totalPages","newArtist","playcount","artistNames","dataObj","leaves","artistList","filter","floor","object","countryScore","legend","doThrottle","on","throttleTimer","redraw","move","topo","projection","countryCount","path","svg","g","countryNames","centered","height","width","zoom","scaleExtent","maxartists","maxplaycount","updateDimensions","innerHeight","getElementById","offsetWidth","c","x","toString","updateScale","max","mydomain","pow","E","_i","color","scale","threshold","domain","range","colorArray","countryPlaylists","list","offsetL","offsetT","infoContainer","artistContainer","detailsDiv","blue_black","artistSummaryDiv","green_black","pink_black","pink_white","green_white","red_white","toTheme","themeList","indexOf","naturalEarth","PI","call","click","class","progress","updateProgressBar","background-color","border-color","enter","insert","properties","getCountryPlaycount","offsetTop","mouse","parseInt","node","tooltip","numbersWithSpace","removeArtistDiv","clicked","redrawMap","setup","updateLegend","len","ceil","y","text2","text1","getComputedTextLength","text","ls_h","ls_w","legend_labels","_","draw","tr","event","s","sc","highlightCountry","h","min","translate","latlon","invert","makeArtistDiv","nameTags","tagTags","recoms","n","join","closeButton","pl","find","lastFmLink","linkdiv","uri","playlistName","showNextFive","showArtists","currentNoArtists","first","last","initial","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","currentCount","showPreviousFive","recLoadingMessage","recLoadingDiv","src","display","margin","namelist","arr","temp","array","j","_i2","art","artistname","recoArtistDiv","recoArtistLink","recoArtistInfoDiv","artistimg","cnameDiv","usertaglist","summaryText","artisttaglist","z","elem","pos","offsetHeight","tagdiv","p","countryElement","modscaleY","modscaleX","k","pt","countries","world","objects","topojson","feature","features","countryList","titleString","ctx","obj","fillText","lineWidth","strokeStyle","strokeText","string","w","measureText","Image","canvas","getContext","textColor","getComputedStyle","backgroundColor","fill","font-family","font-size","stroke","explrLogo","onload","fillStyle","scoreString","font","fillRect","drawCenteredText","drawImage","toDataURL","getElementsByClassName"],"mappings":"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","file":"../all.min.js","sourcesContent":["var api = api || {};\r\n\r\napi.lastfm = {};\r\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\r\napi.lastfm.url = \"https://ws.audioscrobbler.com/2.0/\";\r\n\r\n(function (api) {\r\n\tvar keyI = 0;\r\n\tvar keys = [\r\n\t\t// https://github.com/ampache/ampache/issues/1694\r\n\t\t\"13893ba930c63b1b2cbe21441dc7f550\",\r\n\r\n\t\t// https://www.reddit.com/r/lastfm/comments/3okkij/cant_create_lastfm_api_key/\r\n\t\t\"4cb074e4b8ec4ee9ad3eb37d6f7eb240\",\r\n\r\n\t\t// https://www.w3resource.com/API/last.fm/tutorial.php\r\n\t\t\"4a9f5581a9cdf20a699f540ac52a95c9\",\r\n\r\n\t\t// https://www.reddit.com/r/lastfm/comments/3l3cae/cant_get_a_lastfm_api_key/\r\n\t\t\"57ee3318536b23ee81d6b27e36997cde\",\r\n\r\n\t\t// original explr api key\r\n\t\t\"865b1653dbe200905a5b75d9d839467a\",\r\n\t\t\r\n\t\t// https://www.w3resource.com/API/last.fm/example.html\r\n\t\t\"68b2125fd8f8fbadeb2195e551f32bc4\",\r\n\t\t\r\n\t\t// https://rstudio-pubs-static.s3.amazonaws.com/236264_81312ba4d795474c8641dd0e2af83cba.html\r\n\t\t\"1ba315d4d1673bbf88aed473f1917306\"\t\t\r\n\t];\r\n\r\n\tvar rotateKey = function () {\r\n\t\tapi.lastfm.key = keys[++keyI % keys.length];\r\n\t}\r\n\r\n\t/**\r\n\t* Send an API call to last.fm\r\n\t* @param {String} method    The method name (e.g. \"library.getartists\")\r\n\t* @param {Array} options    An array of tuples (arrays with two elements)\r\n\t                            with options for the request: [\"key\", \"value\"]\r\n\t* @param {Function} callback    The callback function to call with the data\r\n\t                                returned from the request. Takes two arguments,\r\n\t                                error and data (callback(error, data))\r\n\t*/\r\n\tapi.lastfm.send = function (method, options, callback, retries) {\r\n\t\trotateKey();\r\n\r\n\t\tvar url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\r\n\t\t\tapi.lastfm.key + \"&format=json\";\r\n\t\tvar xhr, gotResponse, retries = undefined === retries ? 10 : retries,\r\n\t\t\taborted = false;\r\n\r\n\t\toptions.forEach(function (el) {\r\n\t\t\turl += \"&\" + el[0] + \"=\" +\r\n\t\t\t\t(el[1] + \"\")\r\n\t\t\t\t.replace(\"&\", \"%26\")\r\n\t\t\t\t.replace(\"/\", \"%2F\")\r\n\t\t\t\t.replace(\"+\", \"%2B\")\r\n\t\t\t\t.replace(\"\\\\\", \"%5C\");\r\n\t\t});\r\n\r\n\t\tfunction tryGet(tries, cb) {\r\n\t\t\txhr = d3.json(url, function (e, d) {\r\n\t\t\t\tif (aborted) {\r\n\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (e) { // we got an actual server error: 4xx, 5xx\r\n\t\t\t\t\td = JSON.parse(e.response);\r\n\t\t\t\t\t// now e and d are the same\r\n\t\t\t\t} else if (d.error) {\r\n\t\t\t\t\t// we got 200 BUT it's an error\r\n\t\t\t\t\te = d;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// console.log({\r\n\t\t\t\t// \te: e,\r\n\t\t\t\t// \td: d\r\n\t\t\t\t// });\r\n\r\n\t\t\t\tif (e) {\r\n\t\t\t\t\tvar errInfo = {\r\n\t\t\t\t\t\tmethod: method,\r\n\t\t\t\t\t\terrorCode: e.error,\r\n\t\t\t\t\t\ttry: tries,\r\n\t\t\t\t\t\toptions: options,\r\n\t\t\t\t\t\tkey: api.lastfm.key,\r\n\t\t\t\t\t};\r\n\t\t\t\t\t// alert(\"ERROR\");\r\n\t\t\t\t\tif ((\r\n\t\t\t\t\t\t\te.error === 29 || // Rate Limit Exceeded\r\n\t\t\t\t\t\t\te.error === 8 // Operation failed\r\n\t\t\t\t\t\t) && tries < retries) {\r\n\t\t\t\t\t\tconsole.log(\"Retry request: \", errInfo);\r\n\t\t\t\t\t\tsetTimeout(tryGet.bind(null, tries + 1, cb), tries * 3000);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (tries >= retries) {\r\n\t\t\t\t\t\tconsole.log(\"Retry failed after \" + retries + \" attempts, will stop trying.\", errInfo);\r\n\t\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t\t\taborted = true;\r\n\t\t\t\t\t\te = \"ERROR\";\r\n\t\t\t\t\t\td = {\r\n\t\t\t\t\t\t\terror: \"Took to long to respond\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgotResponse = true;\r\n\t\t\t\tcb(e, d);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\ttryGet(0, callback);\r\n\r\n\t\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\r\n\t\tvar timeout = setTimeout(function () {\r\n\t\t\tif (!gotResponse) {\r\n\t\t\t\t//console.log(\"GET \" + url + \" took to long, aborting\");\r\n\t\t\t\txhr.abort();\r\n\t\t\t\tcallback(\"ERROR\", {\r\n\t\t\t\t\terror: \"Took to long to respond\"\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}, 20000);\r\n\r\n\t\treturn {\r\n\t\t\tabort: function () {\r\n\t\t\t\taborted = true;\r\n\t\t\t\txhr.abort();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n})(api);\r\n","/*requires:\r\napi/lastfm.js\r\n*/\r\n\r\nvar api = api || {};\r\nvar superCount = 0;\r\n\r\n(function(window, document) {\r\n\td3.csv(\"assets/data/countries.csv\", function(err, data) {\r\n\t\tdata.forEach(d => {\r\n\t\t\td.names = d.names ? d.names.split(\"|\") : [];\r\n\t\t\td.tags = d.tags ? d.tags.split(\"|\") : [];\r\n\t\t\td.mainName = d.names[0];\r\n\t\t\td.tag = d.tags[0];\r\n\t\t\td.name = d.mainName;\r\n\t\t});\r\n\r\n\t\tdata = data.map(d => {\r\n\t\t\tlet splits = [];\r\n\r\n\t\t\tif (d.names.length === 1 && d.tags.length === 0) {\r\n\t\t\t\tsplits = [d];\r\n\t\t\t}\r\n\t\t\tif (d.names.length > 1) {\r\n\t\t\t\tsplits = splits.concat(d.names.map(name => ({ ...d, name })));\r\n\t\t\t}\r\n\t\t\tif (d.tags.length > 0) {\r\n\t\t\t\tsplits = splits.concat(d.tags.map(tag => ({ ...d, tag }))); \r\n\t\t\t}\r\n\r\n\t\t\tif(d.names.length > 1 &&d.tags.length > 0){ splits.splice(0,1); }\r\n\t\t\t\r\n\t\t\treturn splits;\r\n\t\t}).flat();\r\n\r\n\t\tlet alias = d3.nest()\r\n\t\t\t.key(function(d) {\r\n\t\t\t\tif (d && d.tag) {\r\n\t\t\t\t\treturn d.tag.toLowerCase();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.map(data);\r\n\r\n\t\tlet cname = d3.nest()\r\n\t\t\t.key(function(d) {\r\n\t\t\t\treturn d.name.toLowerCase();\r\n\t\t\t})\r\n\t\t\t.map(data);\r\n\r\n\t\t\tconsole.log({data,alias,cname});\r\n\r\n\t\t/**\r\n\t\t * Tries to find out the country for a specified artist.\r\n\t\t * @param  {String}   artist   Name of the artist to get country for\r\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\r\n\t\t *                             The callback function takes one argument, this object:\r\n\t\t *\r\n\t\t * \t\t\t\t\t\t\t\t```\r\n\t\t *                             {\r\n\t\t *                             \t\"artist\": \"\", // <artist name>,\r\n\t\t *                             \t\"country\": \"\", // <country name>,\r\n\t\t *                             \t\"id\": \"\", // <country id>,\r\n\t\t *                             \t\"tag\": \"\", // <the tag that decided the country (e.g. Swedish for Sweden)>\r\n\t\t *                             }\r\n\t\t * \t\t\t\t\t\t\t\t```\r\n\t\t *\r\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\r\n\t\t *\r\n\t\t */\r\n\t\tapi.getCountry = function(artist, callback) {\r\n\t\t\t// Get artists country code here, from last.fm or whatever\r\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err, responseData2) {\r\n\t\t\t\t// Return if something failed\r\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\r\n\t\t\t\t\tresponseData2.toptags.tag.length) {\r\n\t\t\t\t\tcallback({\r\n\t\t\t\t\t\t\"artist\": artist\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Lista med taggar vi vill dubbelkolla\r\n\t\t\t\tvar troubleCountries = [\"georgia\", \"ireland\"];\r\n\t\t\t\tvar troubleLanguages = [\"spanish\", \"french\", \"english\", \"portuguese\", \"russian\", \"italian\", \"japanese\", \"korean\", \"indian\", \"swedish\", \"irish\"];\r\n\t\t\t\tvar theTroubles = [].concat(troubleCountries, troubleLanguages);\r\n\r\n\t\t\t\t// check for country-tags in the artist's tags\r\n\t\t\t\tlet demonymTag = { tag: \"\", id: null, country: \"\", count: 0 };\r\n\t\t\t\tlet countryTag = demonymTag;\r\n\r\n\t\t\t\tresponseData2.toptags.tag.some(function (t, i) {\r\n\t\t\t\t\tvar tname = t.name.toLowerCase();\r\n\r\n\t\t\t\t\t// no need to search anymore since we only care\r\n\t\t\t\t\t// about the créme de la creme i.e. the tag with the\r\n\t\t\t\t\t// highest count\r\n\t\t\t\t\tif (countryTag.id && demonymTag.id) { return true; }\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// sweden->sweden\r\n\t\t\t\t\t\tif (cname[tname] && cname[tname][0].id) {\r\n\t\t\t\t\t\t\tcountryTag = { tag: tname, id: cname[tname][0].id, country: cname[tname][0].mainName, count: t.count };\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// swedish -> sweden\r\n\t\t\t\t\t\tif (alias[tname] && alias[tname][0].id) {\r\n\t\t\t\t\t\t\tdemonymTag = { tag: tname, id: alias[tname][0].id, country: alias[tname][0].name, count: t.count };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (e) {}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// country is best, demonym second\r\n\t\t\t\tvar bestTag = (countryTag.id && demonymTag.count < 10 * countryTag.count) ?\r\n\t\t\t\t\tcountryTag :\r\n\t\t\t\t\t(demonymTag.id \r\n\t\t\t\t\t\t? demonymTag\r\n\t\t\t\t\t\t: {});\r\n\r\n\t\t\t\tif (countryTag.tag === \"georgia\" && responseData2.toptags.tag.some(function (t) {\r\n\t\t\t\t\t\treturn [\"american\", \"us\", \"usa\"].includes(t.name.toLowerCase())\r\n\t\t\t\t\t})) {\r\n\t\t\t\t\t// it's not the country...\r\n\t\t\t\t\tbestTag = demonymTag;\r\n\r\n\t\t\t\t\tconsole.log(\"'\" + artist + \"' is tagged with 'georgia', but I'm gonna go ahead and guess they're really from the U.S.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (theTroubles.includes(bestTag.tag)) {\r\n\t\t\t\t\tconsole.log(\"Potentially incorrect country for '\" + artist + \"': \" + bestTag.country + \", using the tag '\" + bestTag.tag + \"'\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback(Object.assign({ \"artist\": artist, }, bestTag));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a list of country objects for a list of artist names.\r\n\t\t *\r\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\r\n\t\t * @param  {Array}   artists  Array of artist names (String)\r\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\r\n\t\t *                             containing only those artists that have a country\r\n\t\t *                             associated with them. For object structure, see api.getCountry\r\n\t\t */\r\n\t\tapi.getCountries = function(artists, callback) {\r\n\t\t\tvar returnList = [],\r\n\t\t\t\tcount = 0;\r\n\t\t\t/**\r\n\t\t\t * Increases a count and checks if we've tried\r\n\t\t\t * to get country for all artists\r\n\t\t\t */\r\n\t\t\tvar checkCount = function() {\r\n\t\t\t\tcount++;\r\n\t\t\t\tsuperCount++;\r\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>You can start exploring,<br>but it might interfere<br>with loading your artists.\");\r\n\t\t\t\tif (count === artists.length) {\r\n\t\t\t\t\t// We done, save artists and call back\r\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\r\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\r\n\t\t\t\t\t\tcallback(returnList);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Get countries for all artists\r\n\t\t\tartists.forEach(function(el, i) {\r\n\t\t\t\t// first check stored artists to see if we've already checked this artist\r\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\r\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\r\n\t\t\t\t\treturnObject.artist = el;\r\n\t\t\t\t\treturnList.push(returnObject);\r\n\t\t\t\t\tcheckCount();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar start = new Date().getTime();\r\n\r\n\t\t\t\t\tapi.getCountry(el, function(data) {\r\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\r\n\t\t\t\t\t\t// console.error(data)\r\n\r\n\t\t\t\t\t\t// if (data.name) {\r\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\r\n\t\t\t\t\t\t\t\"id\": data.id,\r\n\t\t\t\t\t\t\t\"name\": data.name,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\treturnList.push(data);\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\r\n\r\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\r\n\r\n\r\n\t\t\t\t\t\tcheckCount();\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n\r\n\t/**\r\n\t * Get all tags for an artist.\r\n\t * @param  {String}   artist   Artist name\r\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\r\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\r\n\t */\r\n\tapi.getTags = function(artist, callback) {\r\n\t\t// Check if artist tags are already saved, if so return them\r\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\r\n\t\t\t// console.log(\"Had in store, no api call\");\r\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\r\n\t\t} else {\r\n\t\t\t// Create object in localstorage\r\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\r\n\t\t\tSTORED_ARTISTS[artist].tags = [];\r\n\r\n\t\t\t// Get from lastfm\r\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\r\n\t\t\t\tfunction(err, responseData2) {\r\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\r\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\r\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\r\n\t\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tapi.getArtistInfo = function(artist, callback) {\r\n\t\tvar artistInfo = [];\r\n\r\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\r\n\t\t\t//Creating a list of tag names\r\n\t\t\tvar tagnamelist = [];\r\n\t\t\tif (data1.artist.tags.tag) {\r\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\r\n\t\t\t\t\ttagnamelist.push(t.name);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tartistInfo.push({\r\n\t\t\t\tname: artist,\r\n\t\t\t\turl: data1.artist.url,\r\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\r\n\t\t\t\tdescription: data1.artist.bio.summary,\r\n\t\t\t\ttags: tagnamelist\r\n\t\t\t})\r\n\t\t\tcallback(artistInfo);\r\n\t\t})\r\n\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\r\n\t * Also included are which tags matched.\r\n\t *\r\n\t * Calling this function cancels previous requests initiated by this function.\r\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\r\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\r\n\t */\r\n\tvar recommendationRequests = [];\r\n\tapi.cancelRecommendationRequests = function () {\r\n\t\trecommendationRequests.forEach(function (xhr) {\r\n\t\t\txhr.abort();\r\n\t\t});\r\n\r\n\t\trecommendationRequests = [];\r\n\t}\r\n\tapi.getRecommendations = function (country, callback) {\r\n\t\tapi.cancelRecommendationRequests();\r\n\r\n\t\tvar recommendations = [];\r\n\r\n\t\t// get top tags for user\r\n\t\tvar toptags = USER_TAGS.slice(0, 15);\r\n\t\t// make tag list to an object (back n forthss)\r\n\t\tvar userTagObj = d3.nest().key(function(d) {\r\n\t\t\treturn d.tag;\r\n\t\t}).rollup(function(d) {\r\n\t\t\treturn d[0].count;\r\n\t\t}).map(toptags);\r\n\r\n\r\n\t\t//console.log(\"Got top tags for user!\")\r\n\r\n\t\t// Get top artists for tag country\r\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\r\n\t\t\t// Gotta count matching tags to then sort\r\n\t\t\tvar tagCounts = {};\r\n\r\n\t\t\t// Get the tags for these artists\r\n\t\t\t//console.log(data1, err)\r\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\r\n\t\t\t\tcallback([]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar artists = data1.topartists.artist;\r\n\r\n\t\t\tartists.forEach(function(a, num) {\r\n\t\t\t\ttagCounts[a.name] = [];\r\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\r\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\r\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\r\n\t\t\t\t\tif (hasTags) {\r\n\t\t\t\t\t\t// Compare top 10 tags to user tags\r\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\r\n\t\t\t\t\t\t\treturn d.name;\r\n\t\t\t\t\t\t}).map(data2.toptags.tag);\r\n\r\n\t\t\t\t\t\t// Get rid of justin bieber\r\n\t\t\t\t\t\tif (tags[country]) {\r\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\r\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (num === artists.length - 1) {\r\n\t\t\t\t\t\t//console.log(\"We've gotten tag counts for all artists, make a list!\")\r\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\r\n\t\t\t\t\t\t\trecommendations.push({\r\n\t\t\t\t\t\t\t\tname: d,\r\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\r\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\r\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t//console.log(recommendations)\r\n\t\t\t\t\t\tcallback(recommendations);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\r\n\t\t\t\trecommendationRequests.push(xhr2);\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\trecommendationRequests.push(xhr1);\r\n\t}\r\n\r\n\tapi.getFriends = function(callback) {\r\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\r\n\t}\r\n})(window, document);\r\n","/* requires:\r\napi/api.js\r\napi/lastfm.js\r\n*/\r\n\r\nvar STORED_ARTISTS;\r\nlocalforage.getItem(\"artists\", function (err, val) {\r\n    STORED_ARTISTS = val || {};\r\n});\r\n\r\nvar CACHED_NO_COUNTRIES;\r\nlocalforage.getItem(\"no_countries\", function (err, val) {\r\n    CACHED_NO_COUNTRIES = val || {};\r\n})\r\n\r\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\r\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\r\nvar SESSION = {};\r\n\r\n(function () {\r\n    // user = prompt(\"Input your user name, get top 20 artists\")\r\n    var user, currPage = 1,\r\n        maxPage;\r\n    var countryCountObj = {};\r\n    var count = 0;\r\n    var tries = 0;\r\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\r\n    var listOfArtistsWithNoCountry = [];\r\n\r\n    /**\r\n     * adds artists with no country to the array of artists with\r\n     * no country :)\r\n     * \r\n     * @param {*} data Response from api.getCountries; array of\r\n     * artists that may or may not have country\r\n     */\r\n    var addArtistsWithNoCountry = function (data) {\r\n        listOfArtistsWithNoCountry = listOfArtistsWithNoCountry.concat(data);\r\n\r\n        var noCountriesListEl = d3.select(\".no-countries ul\");\r\n        data.forEach(function (_art) {\r\n            noCountriesListEl.append(\"li\").html('<a href=\"' + _art.url + '\" target=\"blank\" class=\"no-countries__link\">' + _art.artist + '</a>');\r\n        })\r\n\r\n        d3.select(\".no-countries__info\").html(listOfArtistsWithNoCountry.length + \" artists without a country:\");\r\n\r\n        saveToStorage(\"no_countres\", listOfArtistsWithNoCountry);\r\n\r\n        if (listOfArtistsWithNoCountry.length) {\r\n            d3.select(\".no-countries\").style({\r\n                visibility: \"visible\",\r\n                \"pointer-events\": \"all\",\r\n            });\r\n        }\r\n    }\r\n\r\n    var getAllArtists = function () {\r\n        // console.log(\"get artists\")\r\n\r\n        api.lastfm.send(\"library.getartists\", [\r\n                [\"user\", user],\r\n                [\"limit\", 50],\r\n                [\"page\", currPage]\r\n            ],\r\n            function (error, responseData) {\r\n                // Special case for unfortunate users\r\n                if (responseData === \"\") {\r\n                    console.error('Got empty string (\"\") as response, skipping page.')\r\n                    currPage++;\r\n                    getAllArtists();\r\n                    return;\r\n                }\r\n                if (error || responseData.error) {\r\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\r\n\r\n                    // Try again, but not forever\r\n                    if (tries++ < 5) {\r\n                        getAllArtists();\r\n\r\n                        // TODO: Show erorr message ;)\r\n                    } else {\r\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\r\n                        if (refresh) {\r\n                            window.localStorage.clear();\r\n                            localforage.clear();\r\n                            saveToStorage(\"artists\", STORED_ARTISTS, function () {\r\n                                window.location.reload()\r\n                            });\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                tries = 0;\r\n\r\n                if (currPage === 1) {\r\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\r\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\r\n\r\n                    if (SESSION.total_artists === 0) {\r\n                        d3.select(\".bubblingG\").remove();\r\n                        d3.select(\"#loading-text\")\r\n                            .html(\"You haven't listened to any<br> artists yet. Start scrobbling with <br>\\\r\n                                                        <a href='http://evolver.fm/2012/05/08/how-to-scrobble-to-last-fm-from-itunes-\" +\r\n                                \"spotify-and-more/'>your favorite music player!</a>\");\r\n                        d3.select(\".loader\").style(\"pointer-events\", \"all\");\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                currPage++;\r\n                // console.log(\"Artists done, get countries\");\r\n\r\n                // Save artist data to localStorage (and create a list of artist names)\r\n                var artistNames = []\r\n                responseData.artists.artist.forEach(function (newArtist) {\r\n                    var a = STORED_ARTISTS[newArtist.name] || {};\r\n\r\n                    a.playcount = +newArtist.playcount;\r\n                    a.url = newArtist.url;\r\n\r\n                    STORED_ARTISTS[newArtist.name] = a;\r\n                    artistNames.push(newArtist.name);\r\n                })\r\n                saveToStorage(\"artists\", STORED_ARTISTS);\r\n                // var n = count++;\r\n\r\n                // Get country for all artists\r\n                api.getCountries(artistNames,\r\n                    function (data) {\r\n                        // Count plays for each country?\r\n                        // countryCountList = countryCountList.concat(data);\r\n                        var dataObj = d3.nest() //Gör så att man kan slå upp på land-id och få upp en lista på artister.\r\n                            .key(function (d) {\r\n                                return d.id;\r\n                            })\r\n                            .rollup(function (leaves) { //gör så att man får en lista på alla artister för ett land.\r\n                                return leaves;\r\n                            })\r\n                            .map(data); //Skickar in en lista med ett objekt för varje artist.\r\n\r\n                        d3.keys(dataObj).forEach(function (id) {\r\n                            countryCountObj[id] = countryCountObj[id] || {};\r\n                            countryCountObj[id][user] = countryCountObj[id][user] || [];\r\n                            var artistList = countryCountObj[id][user]; // list of artists for a country\r\n\r\n                            // if (artistList) {\r\n                            artistList = artistList.concat(dataObj[id]);\r\n\r\n                            //Lägger på de nya dataObj-elementen i countryCountObj-listan.\r\n                            // } else {\r\n                            //     artistList = dataObj[id];\r\n                            // }\r\n\r\n                            artistList.forEach(function (el, i) {\r\n                                //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\r\n                                artistList[i].url = STORED_ARTISTS[el.artist].url;\r\n                                artistList[i].playcount = STORED_ARTISTS[el.artist].playcount;\r\n                                // if (artistList[i].users) {\r\n                                //     artistList[i].users.push(user);\r\n                                // } else {\r\n                                //     artistList[i].users = [user];\r\n                                // }\r\n                            });\r\n                            //countryCountObj är en lista med \"country\"-objekt. \r\n                            //Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\r\n                            //dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\r\n                            countryCountObj[id][user] = artistList;\r\n                        })\r\n\r\n                        addArtistsWithNoCountry(data.filter(function (artist) {\r\n                            return !artist.id; // && artist.artist && artist.url;\r\n                        }));\r\n\r\n                        map.putCountryCount(countryCountObj);\r\n\r\n                        if (currPage > maxPage) {\r\n                            end();\r\n                            return;\r\n                        } else {\r\n                            getAllArtists();\r\n                        }\r\n                    });\r\n            });\r\n    }\r\n\r\n    var getRecommendations = function () {\r\n        var currPage = 1,\r\n            limit = 50,\r\n            maxPage = 1000 / limit;\r\n        var countriesList = JSON.parse(window.localStorage.countries);\r\n\r\n        var countriesObj = d3.nest().key(function (d) {\r\n            return d.name;\r\n        }).rollup(function (d) {\r\n            return d[0];\r\n        }).map(countriesList);\r\n        // Get \"all\" artists from one country\r\n        // countriesList.forEach(function(country){\r\n\r\n        // });\r\n        api.lastfm.send(\"tag.gettopartists\", [\r\n            [\"tag\", \"swedish\"],\r\n            [\"limit\", limit],\r\n            [\"page\", currPage]\r\n        ], function (err, data) {\r\n            var artists = data.topartists.artist;\r\n            // For each artist, get their tags\r\n            artists.forEach(function (a) {\r\n                api.lastfm.send(\"artist.gettoptags\", [\r\n                    [\"artist\", a.name]\r\n                ], function (err, data) {\r\n                    // console.log(data);\r\n                })\r\n            })\r\n            // Look for user's top tags in artist tags\r\n            // If a lot of matches, save to recommended artists for that country\r\n        });\r\n\r\n    }\r\n\r\n    var getUserTags = function (err, data) {\r\n        // err = err ||data.error;\r\n        if (err || data.error) {\r\n            if (data && data.error === 6) {\r\n                alert(\"User not found\");\r\n                window.location.assign(window.location.origin + window.location.pathname);\r\n            }\r\n        }\r\n\r\n\r\n        /*if (err || data.error) {\r\n            console.error(\"Erorr in getUserTags\", err, data);\r\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\r\n            window.location.replace(window.location.origin + window.location.pathname);\r\n        }*/\r\n\r\n        var c = 0;\r\n\r\n        var tagCount = {};\r\n\r\n        //console.log(\"Gotta get tags\")\r\n\r\n        var topArtists = data.topartists.artist;\r\n        var done = function () {\r\n            // make list of tags to sort\r\n            USER_TAGS = [];\r\n            //Remove specific tags from user's top tags\r\n            let forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\", \"seen live\", \"english\", \"singer-songwriter\", \"spanish\", \"french\"];\r\n            d3.keys(tagCount).forEach(function (el) {\r\n                var nogood = false\r\n                for (let i = 0; i < forbidden.length; i++) {\r\n                    if (el === forbidden[i]) {\r\n                        nogood = true;\r\n                    }\r\n                }\r\n                if (!nogood) {\r\n                    USER_TAGS.push({\r\n                        tag: el,\r\n                        count: tagCount[el]\r\n                    });\r\n                }\r\n            })\r\n            USER_TAGS.sort(function (a, b) {\r\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n            });\r\n            console.log(\"Done getting tags, saved to localStorage.user_tags\")\r\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\r\n        }\r\n\r\n\r\n        topArtists.forEach(function (el, i) {\r\n            // get top ten tags and save to users tag count....\r\n            setTimeout(function () { // Set timeout to not stop artists from loading...\r\n                api.lastfm.send(\"artist.gettoptags\", [\r\n                    [\"artist\", el.name]\r\n                ], function (err, data) {\r\n                    let taglist = data.toptags && data.toptags.tag;\r\n                    if (taglist) {\r\n                        var lim = Math.min(taglist.length, 10);\r\n                        for (var i = 0; i < lim; i++) {\r\n                            if (tagCount[taglist[i].name]) {\r\n                                tagCount[taglist[i].name]++;\r\n                            } else {\r\n                                tagCount[taglist[i].name] = 1;\r\n                            }\r\n                        }\r\n                        // console.log(c, topArtists.length)\r\n                    }\r\n\r\n                    c++;\r\n                    if (c == topArtists.length - 1) {\r\n                        done();\r\n                    }\r\n                });\r\n            }, Math.random() * 3000);\r\n        });\r\n\r\n    }\r\n\r\n    var begin = function () {\r\n        //Send analytics event\r\n        ga('send', 'event', 'splash screen', 'Go!', 'test');\r\n        // fade out username input box\r\n        var welcomeOverlay = d3.select(\"#welcome-container\");\r\n        welcomeOverlay.transition().duration(2000)\r\n            .style(\"opacity\", 0)\r\n            .each(\"end\", function () {\r\n                welcomeOverlay.remove();\r\n            });\r\n\r\n        // Fade in loader\r\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\r\n        d3.select(\"#loading-text\").html(\"Getting library...\");\r\n        setTimeout(function () {\r\n            if (d3.select(\"#loading-text\").html() === \"Getting library...\") {\r\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\r\n\r\n                setTimeout(function () {\r\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\r\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\r\n                            .style(\"pointer-events\", \"all\");\r\n                    }\r\n                }, 8000);\r\n            }\r\n        }, 8000);\r\n\r\n        // Fade in legend, progress-bar etc\r\n        d3.selectAll(\".on-map-view\").style({\r\n            \"visibility\": \"visible\",\r\n            //            \"opacity\": 0\r\n        }) //.transition().duration(1000).style(\"opacity\", 1);\r\n\r\n        // Get user tags\r\n        api.lastfm.send(\"user.gettopartists\", [\r\n            [\"user\", user],\r\n            [\"period\", \"12months\"],\r\n            [\"limit\", \"50\"]\r\n        ], getUserTags);\r\n\r\n        // Get user friends\r\n        api.getFriends(function (err, data) {\r\n            try {\r\n                var friends = data.friends.user;\r\n                var i = 0;\r\n                var friendName = d3.select(\"#friend-name\");\r\n\r\n                var updateName = function () {\r\n                    friendName.html(\"\");\r\n                    friendName.append(\"a\").attr({\r\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\r\n                        target: \"_self\",\r\n                    }).html(friends[i].name);\r\n                }\r\n\r\n                d3.selectAll(\".arrow\").on(\"click\", function () {\r\n                    if (d3.select(this).classed(\"left\")) {\r\n                        // Go left\r\n                        i = (i === 0 ? friends.length - 1 : i - 1);\r\n                    } else {\r\n                        // Go right\r\n                        i = (i + 1) % friends.length;\r\n                    }\r\n\r\n                    updateName();\r\n                })\r\n\r\n                updateName();\r\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\r\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\r\n\r\n            } catch (e) {\r\n                console.error(\"getFriends()\", e);\r\n                d3.select(\"#friends\").html(\"&nbsp;Couldn't find any<br>friends on last.fm :(&nbsp;\")\r\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\r\n            }\r\n        });\r\n\r\n        if (CACHED_USERS[user]) {\r\n            // TODO: use timestamp\r\n            console.log(\"No new artists on last.fm!\");\r\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\r\n\r\n            localforage.getItem(\"no_countries\", function (err, val) {\r\n                addArtistsWithNoCountry(val || []);\r\n            });\r\n\r\n            // Get number of artists for screenshot etc.\r\n            api.lastfm.send(\"library.getartists\", [\r\n                    [\"user\", user],\r\n                    [\"limit\", 1],\r\n                    [\"page\", 1]\r\n                ],\r\n                function (error, responseData) {\r\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\r\n                });\r\n\r\n            setTimeout(function () {\r\n                map.putCountryCount(countryCountObj);\r\n                end();\r\n            }, 1000)\r\n        } else {\r\n            // Save theme\r\n            var theme = window.localStorage.theme;\r\n            window.localStorage.clear();\r\n            if (theme) {\r\n                window.localStorage.theme = theme;\r\n            }\r\n            getAllArtists();\r\n        }\r\n    }\r\n\r\n    var end = function () {\r\n        // We're done, fade out loader\r\n        var loader = d3.select(\".loader\");\r\n        loader.transition().duration(2000)\r\n            .style(\"opacity\", 0)\r\n            .each(\"end\", function () {\r\n                loader.remove();\r\n            });\r\n        //Also fade out progress bar text (after a short delay)\r\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\r\n            .style(\"opacity\", 0);\r\n\r\n        CACHED_USERS = {};\r\n        CACHED_USERS[user] = new Date().getTime();\r\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\r\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\r\n    }\r\n\r\n    // // Set theme\r\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\r\n\r\n    // Try to get username from url\r\n    var param = window.location.href.split(\"username=\")[1];\r\n\r\n    if (param) { // We already have a user\r\n        // set up keyboard shortcuts\r\n        window.addEventListener(\"keydown\", function (evt) {\r\n            switch (evt.keyCode) {\r\n                // s\r\n                case 83:\r\n                    screenshot.render();\r\n                    //Send google analytics event\r\n                    ga('send', {\r\n                        hitType: 'event',\r\n                        eventCategory: 'Hotkeys',\r\n                        eventAction: 'Take screenshot',\r\n                        eventLabel: 'test'\r\n                    });\r\n                    break;\r\n                    // t\r\n                case 84:\r\n                    nextTheme();\r\n                    //Send google analytics event\r\n                    ga('send', {\r\n                        hitType: 'event',\r\n                        eventCategory: 'Hotkeys',\r\n                        eventAction: 'Cycle theme',\r\n                        eventLabel: 'test'\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        if (param.length > 15) {\r\n            param = param.substr(0, 15);\r\n        }\r\n        user = param;\r\n        SESSION.name = param;\r\n        begin();\r\n    } else {\r\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\r\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\r\n    }\r\n\r\n    var saveToStorage = function (key, object, cb) {\r\n        localforage.setItem(key, object, cb || function () {});\r\n    }\r\n})();","/* requires:\r\napi/api.js\r\napi/lastfm.js\r\nscript.js\r\n*/\r\n\r\nvar map = {};\r\n//White theme default:\r\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\r\nvar legend;\r\nvar countryScore = 0;\r\n\r\n(function(window, document) {\r\n  d3.select(window).on(\"resize\", throttle);\r\n\r\n  var doThrottle = false;\r\n  var filter = \"artists\"; // filter by artists or plays\r\n\r\n  var zoom = d3.behavior.zoom()\r\n    .scaleExtent([1, 9])\r\n    .on(\"zoom\", move);\r\n\r\n\r\n  var height, width;\r\n\r\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\r\n  let countryCount = {};\r\n\r\n  //Variables needed to update scale and legend\r\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\r\n  var maxartists = 1,\r\n    maxplaycount = 0;\r\n\r\n  //Setting color and range to be used\r\n  var color;\r\n\r\n  // Set theme\r\n  var theme = window.localStorage.theme || \"pink_white\";\r\n\r\n  map.drawPlays = function() {\r\n    filter = \"scrobbles\";\r\n    redraw();\r\n  };\r\n\r\n  let countryPlaylists; \r\n  // load links to country playlists\r\n  d3.json(\"assets/data/playlists.json\", (err, list) => {\r\n    countryPlaylists = list;\r\n  });  \r\n\r\n  /**\r\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\r\n   */\r\n  function updateDimensions() {\r\n    height = window.innerHeight - 5;\r\n    width = document.getElementById('map-container').offsetWidth;\r\n  }\r\n\r\n  //Returns total number of plays for country\r\n  function getCountryPlaycount(c) {\r\n    if (countryCount[c.id]) {\r\n      var count = 0;\r\n      for (let i = 0; i < countryCount[c.id].length; i++) {\r\n        count += countryCount[c.id][i].playcount;\r\n      }\r\n      return count;\r\n    } else return 0;\r\n  };\r\n\r\n\r\n  function updateProgressBar() {\r\n    var progressPro = (countryScore / 210);\r\n    return progressPro;\r\n  }\r\n;\r\n\r\n  //Function to format numbers over 1000 with a space\r\n  function numbersWithSpace(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n  }\r\n  /**\r\n   * Randomize array element order in-place.\r\n   * Using Fisher-Yates shuffle algorithm.\r\n   */\r\n  function shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n  //Function to remove duplicates from arrays\r\n  function onlyUnique(value, index, self) {\r\n    return self.indexOf(value) === index;\r\n  }\r\n\r\n  function updateScale() {\r\n    var max = -1;\r\n    switch (filter) {\r\n      case \"artists\":\r\n        max = maxartists;\r\n        for (let i = 0; i < 5; i++) {\r\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1));\r\n        }\r\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\r\n        break;\r\n      case \"scrobbles\":\r\n        max = maxplaycount;\r\n        for (let i = 0; i < 7; i++) {\r\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\r\n        }\r\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\r\n        break;\r\n    };\r\n\r\n\r\n    color = d3.scale.threshold()\r\n      .domain(mydomain)\r\n      .range(colorArray);\r\n  };\r\n\r\n  function updateLegend() {\r\n    //Remove decimals from domain\r\n    var x = 0;\r\n    var len = mydomain.length\r\n    while (x < len) {\r\n      mydomain[x] = Math.ceil(mydomain[x]);\r\n      x++;\r\n    };\r\n\r\n    //Array of text\r\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\r\n\r\n    //Create Legend\r\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\r\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\r\n      .data(mydomain);\r\n\r\n    //Color box sizes\r\n    var ls_w = 20,\r\n      ls_h = 20;\r\n    var x = width * 0.03;\r\n    var y = height * 0.03;\r\n\r\n    // Add legend filter text\r\n    var text1 = svg.select(\"#filter-text\")\r\n      .attr(\"x\", x)\r\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\r\n      .text(\"Number of \");\r\n    var text2 = svg.select(\"#filter\")\r\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\r\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\r\n      .text(filter);\r\n    text2.on(\"click\", function() {\r\n      // Toggle filter method\r\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\r\n      redraw();\r\n    });\r\n\r\n    var noCountryArtists = d3.select(\".no-countries\")\r\n      .style(\"bottom\", (y + mydomain.length * ls_h + 1.5 * ls_h + 30) + \"px\"); // <<< magic numbers broo\r\n\r\n    var enter = legend.enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"legend\");\r\n\r\n    enter.append(\"rect\")\r\n      .attr(\"x\", x)\r\n      .attr(\"y\", function(d, i) {\r\n        return height - (i * ls_h) - 2 * ls_h - y;\r\n      })\r\n      .attr(\"width\", ls_w)\r\n      .attr(\"height\", ls_h)\r\n      .style(\"fill\", function(d) {\r\n        return color(d);\r\n      });\r\n    enter.append(\"text\")\r\n      .attr(\"x\", x + 30)\r\n      .attr(\"y\", function(d, i) {\r\n        return height - (i * ls_h) - ls_h - 4 - y;\r\n      });\r\n\r\n    legend.selectAll(\"text\").data(mydomain)\r\n      .text(function(d, _, i) {\r\n        return legend_labels[i];\r\n      });\r\n  }\r\n  //Variables for color legend\r\n\r\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\r\n    \"tooltip hidden\");\r\n\r\n  var infoContainer = d3.select(\"body\").append(\"div\").attr(\"class\",\r\n    \"infoContainer hidden\").attr(\"id\", \"infoContainer\");\r\n\r\n  var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\r\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\r\n\r\n\r\n  var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\r\n    \"cnameDiv\").attr(\"id\", \"cname\");\r\n\r\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"detailsDiv\").attr(\"id\", \"details\");\r\n\r\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"recoDiv\").attr(\"id\", \"recommendations\");\r\n\r\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\r\n\r\n  var closeButton;\r\n\r\n  var offsetL;\r\n  var offsetT;\r\n\r\n  //---------------------- Color preferences -------------//\r\n  var themes = {\r\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\r\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\r\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\r\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\r\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\r\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\r\n  };\r\n\r\n  let nextTheme = window.nextTheme = function(toTheme) {\r\n    // Go to next theme\r\n    var themeList = d3.keys(themes);\r\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\r\n    colorArray = themes[theme];\r\n\r\n    //Change body class\r\n    d3.select(document.body).attr(\"class\", theme);\r\n\r\n    // Save :)\r\n    window.localStorage.theme = theme;\r\n\r\n    // Redraw map :)\r\n    if (topo) redraw();\r\n  }\r\n  map.nextTheme = nextTheme;\r\n\r\n  nextTheme(theme);\r\n  updateScale();\r\n  updateDimensions();\r\n  setup(width, height);\r\n\r\n  function setup(width, height) {\r\n    projection = d3.geo.naturalEarth()\r\n      .translate([(width / 2), (height / 2) + height * 0.08])\r\n      .scale(width / 1.7 / Math.PI);\r\n\r\n    path = d3.geo.path().projection(projection);\r\n\r\n    svg = d3.select(\"#map-container\").append(\"svg\")\r\n      .attr(\"id\", \"map-svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\r\n      .call(zoom)\r\n      .on(\"click\", click)\r\n      .append(\"g\");\r\n\r\n    g = svg.append(\"g\");\r\n    svg.append(\"g\").attr(\"id\", \"legend\")\r\n    svg.append(\"text\").attr({\r\n      id: \"filter-text\",\r\n      class: \"legend\"\r\n    });\r\n    svg.append(\"text\").attr({\r\n      id: \"filter\",\r\n      class: \"legend\"\r\n    });\r\n  }\r\n\r\n  //Load country aliases and names\r\n  if (!window.localStorage.countries) {\r\n    d3.csv(\"assets/data/countries.csv\", function(err, countries) {\r\n      countryNames = countries;\r\n\r\n      countries.forEach(function(c) {\r\n        c.id = +c.id; //Turning CSV values into numeric data\r\n        c.names = c.names.split(\"|\");\r\n        c.tags = c.tags ? c.tags.split(\"|\") : [];\r\n        c.name = c.names[0];\r\n        c.tag = c.tags[0];\r\n      });\r\n\r\n      // save countries\r\n      window.localStorage.countries = JSON.stringify(countries);\r\n    });\r\n\r\n  } else {\r\n    countryNames = JSON.parse(window.localStorage.countries);\r\n  }\r\n  //Load map\r\n  d3.json(\"assets/data/world-50m.json\", function(error, world) {\r\n\r\n    var countries = topojson.feature(world, world.objects.countries).features;\r\n\r\n    topo = countries;\r\n    draw(topo, true);\r\n\r\n  });\r\n\r\n  function draw(topo, redrawMap) {\r\n    var country = g.selectAll(\".country\").data(topo);\r\n\r\n    var progress = d3.select(\"#progress-bar\").style({\r\n      \"height\": updateProgressBar() * 100 + \"%\",\r\n      \"background-color\": colorArray[6]\r\n    });\r\n    d3.select(\"#countryCount\").style({\r\n      \"background-color\": colorArray[1],\r\n      \"border-color\": colorArray[6]\r\n    })\r\n    //Show progressbar text on mouse-over\r\n    .on(\"mousemove\", function() {\r\n      d3.select(\"#progress-text\")\r\n        .transition().duration(150).style(\"opacity\", 0.9);\r\n    })\r\n      .on(\"mouseout\", function() {\r\n        d3.select(\"#progress-text\").transition().duration(150).style(\"opacity\", 0);\r\n      });\r\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/210 countries\")\r\n\r\n    //Draw countries\r\n    if (redrawMap) {\r\n      country.enter().insert(\"path\")\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"d\", path)\r\n        .attr(\"id\", function(d, i) {\r\n          return d.id;\r\n        })\r\n        .attr(\"title\", function(d, i) {\r\n          return d.properties.name;\r\n        })\r\n        .style(\"fill\", function() {\r\n          return color(0);\r\n        });\r\n    }\r\n    //Color countries\r\n    country.transition().style(\"fill\", function(d) {\r\n      switch (filter) {\r\n        case \"artists\":\r\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\r\n            color(0);\r\n          //break;\r\n        case \"scrobbles\":\r\n          return color(getCountryPlaycount(d));\r\n      }\r\n    })\r\n\r\n    //offsets for tooltips\r\n    offsetL = document.getElementById('map-container').offsetLeft;\r\n    offsetT = document.getElementById('map-container').offsetTop;\r\n\r\n    //tooltips\r\n    country\r\n      .on(\"mousemove\", function(d, i) {\r\n        var name;\r\n        var tag;\r\n        countryNames.forEach(function(e, i) {\r\n          if (e.id === d.id) {\r\n            name = e.name;\r\n            tag = e.tag;\r\n          };\r\n        })\r\n        var mouse = d3.mouse(svg.node()).map(function(d) {\r\n          return parseInt(d);\r\n        });\r\n\r\n        tooltip.classed(\"hidden\", false)\r\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\r\n            mouse[1] +\r\n            offsetT + 10) + \"px\")\r\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\r\n      })\r\n      .on(\"mouseout\", function(d, i) {\r\n        tooltip.classed(\"hidden\", true);\r\n      })\r\n      //Show div with top 10 artists for country when clicked\r\n      .on(\"click\", function(d, i) {\r\n        var name;\r\n        var tag;\r\n        var id;\r\n\r\n        clicked(d);\r\n\r\n        countryNames.forEach(function(e, i) {\r\n          if (e.id === d.id) {\r\n            name = e.name;\r\n            tag = e.tag;\r\n            id = d.id;\r\n          };\r\n        })\r\n        var mouse = d3.mouse(svg.node()).map(function(d) {\r\n          return parseInt(d);\r\n        });\r\n\r\n        closeButton\r\n          .on(\"click\", function(d, i) {\r\n            removeArtistDiv();\r\n            // zoom out map, fulhack\r\n            clicked(centered);\r\n          }) //\"stäng\" onclick slutar\r\n      }) // on click slutar\r\n\r\n  }\r\n\r\n  /*-------redraw----*/\r\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean\r\n  function redraw(redrawMap) {\r\n    updateDimensions();\r\n\r\n    if (redrawMap) {\r\n      d3.select('#map-svg').remove();\r\n      setup(width, height);\r\n    }\r\n\r\n    maxartists = d3.max(d3.keys(countryCount), function(cname) {\r\n      return countryCount[cname].length;\r\n    });\r\n    maxplaycount = d3.max(d3.keys(countryCount), function(cname) {\r\n      return getCountryPlaycount({\r\n        id: cname\r\n      });\r\n    })\r\n    updateScale();\r\n    updateLegend();\r\n\r\n    draw(topo, redrawMap);\r\n  }\r\n\r\n\r\n  /**\r\n   * Moves the map to the specified location or based on the current zoom event\r\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\r\n   * @param  {Number} sc      Optional: Scale factor\r\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\r\n   */\r\n  function move(tr, sc, animate) {\r\n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\r\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\r\n\r\n    // If move was not initiated by clicking on a country, deselect the selected country\r\n    if (!tr && !sc && centered) {\r\n      highlightCountry(false);\r\n      removeArtistDiv();\r\n      centered = null;\r\n    }\r\n\r\n    var zscale = s;\r\n    var h = height / 4;\r\n\r\n    t[0] = Math.min(\r\n      (width / height) * (s - 1),\r\n      Math.max((width * 1.2) * (1 - s), t[0])\r\n    );\r\n\r\n    t[1] = Math.min(\r\n      h * (s - 1) + h * s,\r\n      Math.max(height * (1 - s) - h * s, t[1])\r\n    );\r\n\r\n    zoom.translate(t);\r\n    zoom.scale(s);\r\n\r\n    if (animate) {\r\n      g.transition().duration(950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\r\n\r\n    } else {\r\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\r\n    }\r\n\r\n    //adjust the country hover stroke width based on zoom level\r\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\r\n  }\r\n  map.move = move;\r\n\r\n  var throttleTimer;\r\n\r\n  function throttle() {\r\n    window.clearTimeout(throttleTimer);\r\n    throttleTimer = window.setTimeout(function() {\r\n      redraw(true);\r\n      move([0, 0], 1); // Reset position\r\n    }, 200);\r\n  }\r\n\r\n\r\n  //geo translation on mouse click in map\r\n  function click() {\r\n    var latlon = projection.invert(d3.mouse(this));\r\n    // console.log(latlon);\r\n    //console.log(countryCount);\r\n  }\r\n\r\n\r\n  /*----------------------------makeArtistDiv------------------------------------------------*/\r\n  //Skapar \"details-on-demand\"-divarna.\r\n  function makeArtistDiv(d) {\r\n\r\n    //lägga till namn till detailseDiv\r\n    var name;\r\n    var tag;\r\n    var nameTags;\r\n    var tagTags;\r\n    var recoms;\r\n    //var id;\r\n    countryNames.forEach(function(e, i) {\r\n      if (e.id === d.id) {\r\n        name = e.name;\r\n        tag = e.tag;\r\n\r\n        nameTags = e.names.map(n => \"<span class=\\\"demonym\\\">#\" + n + \"</span>\").join(\", \");\r\n        tagTags = e.tags.map(t => \"<span class=\\\"demonym\\\">#\" + t + \"</span>\").join(\", \");\r\n      };\r\n    })\r\n    d3.select(\"#recommendations\").html(\"\");\r\n    //Show country name and info div on left hand side\r\n    infoContainer\r\n      .classed(\"hidden\", false)\r\n      .transition()\r\n      .style(\"opacity\", 1)\r\n      .duration(750);\r\n\r\n    //Hide progressbar when showing\r\n    d3.selectAll(\"#countryCount, .on-map-view\")\r\n      .classed(\"hidden\", true);\r\n\r\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"class\", \"close-button\").html(\"X\");\r\n\r\n    //Populate country information div\r\n    cnameDiv\r\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\r\n      .append(\"h1\").html(name);\r\n    d3.select(\"#cnameCont\").append(\"h5\")\r\n      .html(function() {\r\n        if (countryCount[d.id])\r\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\r\n        else return \"No artists yet - Find new here ->\"\r\n      })\r\n\r\n    let pl = countryPlaylists.find(c => c.name === name);\r\n    let linkdiv = d3.select(\"#cnameCont\")\r\n      .append(\"div\").attr(\"class\", \"playlist-link\")\r\n\r\n   let lastFmLink =  linkdiv.append(\"a\").attr(\"href\", \"https://last.fm/tag/\" + name)\r\n   lastFmLink.append(\"img\").attr(\"class\", \"playlist-link__img\").attr(\"src\", \"https://www.shareicon.net/data/32x32/2016/05/24/769923_logo_512x512.png\").attr(\"style\",\"background:none\");\r\n   lastFmLink.append(\"span\").html(\"#\"+name);\r\n\r\n    if (pl) {\r\n\r\n      linkdiv.append(\"span\").attr(\"class\",\"divider\").html(\"/\");\r\n\r\n      let a = linkdiv.append(\"a\").attr(\"href\", pl.uri).attr(\"target\", \"_self\");\r\n\r\n      a.append(\"img\")\r\n        .attr(\"class\", \"playlist-link__img\")\r\n        .attr(\"src\", \"https://upload.wikimedia.org/wikipedia/commons/1/19/Spotify_logo_without_text.svg\");\r\n\r\n      a.append(\"span\").html(pl.playlistName);\r\n\r\n    }\r\n\r\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\r\n\r\n      var currentNoArtists = 0;\r\n      var currentCount = 0;\r\n\r\n\r\n      d3.select(\"#details\").append(\"div\")\r\n        .html(\"<span>Your top artists tagged with </span>\" + nameTags + \"<span> or </span>\" + tagTags + \"<span>: </span>\")\r\n        .attr(\"class\", \"topartists-desc\");\r\n      //Show top 5 artists\r\n\r\n      d3.select(\"#artistContainer\").append(\"i\")\r\n        .attr(\"class\", \"fa artist-control right fa-angle-right\")\r\n        .on(\"click\", function(){\r\n          showNextFive();\r\n        });\r\n\r\n      d3.select(\"#artistContainer\").append(\"i\")\r\n        .attr(\"class\", \"fa artist-control left disabled fa-angle-left\")\r\n        .on(\"click\", function(){\r\n          showPreviousFive();\r\n        });\r\n\r\n      function showNextFive(){\r\n        showArtists(currentNoArtists+1, currentNoArtists+5, false);\r\n        //Send event to google analytics\r\n        ga('send', {\r\n          hitType: 'event',\r\n          eventCategory: 'Artist viewer',\r\n          eventAction: 'Next five',\r\n          eventLabel: 'test'\r\n        });\r\n      }\r\n\r\n      function showPreviousFive(){\r\n        showArtists(currentNoArtists-9, currentNoArtists-5, false);\r\n        //Trigger GA event\r\n        ga('send', {\r\n          hitType: 'event',\r\n          eventCategory: 'Artist viewer',\r\n          eventAction: 'Previous five',\r\n          eventLabel: 'test'\r\n        });\r\n      }\r\n\r\n      function showArtists(first, last, initial){\r\n        //Clean-up previous five artist images\r\n        d3.selectAll(\".scrobbled\").remove();\r\n        //console.log(\"displaying \"+first+\" to \"+last)\r\n\r\n        //Generate new artist images for all artists within the desired range!\r\n          for (let i = first-1; i <= last-1; i++) {\r\n            if (countryCount[d.id][i]) {\r\n              //console.log(i+\" \"+countryCount[d.id][i].artist)\r\n              var artistDiv = d3.select(\"#details\").append(\"div\")\r\n                .attr({\r\n                  \"class\": \"scrobbled artist-div lowlight\",\r\n                  \"data-artist\": countryCount[d.id][i].artist\r\n                })\r\n                .on(\"click\", function() {\r\n                  // Lowlight not selected artists\r\n                  d3.selectAll(\".artist-div\").classed({\r\n                    \"lowlight\": true,\r\n                    \"highlight\": false\r\n                  });\r\n                  // Highlight selected artist\r\n                  d3.select(this).classed({\r\n                    \"highlight\": true,\r\n                    \"lowlight\": false\r\n                  });\r\n\r\n                  makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\r\n                });\r\n\r\n              var artistLink = artistDiv.append(\"a\").style(\"display\", \"block\")\r\n              artistLink.append(\"div\")\r\n                .attr(\"class\", \"image-div\")\r\n                // .style(\"background-image\", \"url(\" + \"'\" + countryCount[d.id][i].image + \"'\" + \" )\")\r\n                .style(\"background-image\", \"url(https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png\")\r\n                //.append(\"span\").attr(\"class\", \"overlayNo\").html(i+1);\r\n\r\n              var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\r\n\r\n              playCountDiv.append(\"p\")\r\n                .html(\"<b>\" + countryCount[d.id][i].artist + \"</b><br>\" + countryCount[d.id][i].playcount + \" scrobbles\")\r\n                .attr(\"class\", \"details-p\");\r\n\r\n              currentCount++;\r\n            } else {\r\n              i = last;\r\n            }\r\n        }\r\n        //\r\n        //Check to see if we are moving backwards or forwards through the list..\r\n        if (first<currentNoArtists) //Backwards!\r\n          currentNoArtists = Math.ceil((currentNoArtists-currentCount)/5)*5;\r\n        else if (last>currentNoArtists) //Forwards!\r\n          currentNoArtists = currentNoArtists+currentCount;\r\n        //console.log(\"currentNoArtists är \"+currentNoArtists);\r\n\r\n        //Reset the count!\r\n        currentCount = 0;\r\n\r\n        //\r\n        //Disable and enable user controls\r\n        //\r\n\r\n        //Left arrow...\r\n        if (currentNoArtists>=10 && !initial){\r\n          d3.selectAll(\".artist-control.left\")\r\n            .classed(\"disabled\", false)\r\n            .on(\"click\", function(){\r\n              showPreviousFive();\r\n            });\r\n        }\r\n        else{\r\n          d3.selectAll(\".artist-control.left\")\r\n            .classed(\"disabled\", true)\r\n            .on('click',function(){\r\n              d3.select(this).on('click',null); //Remove click listener!\r\n            });\r\n        }\r\n        //and right...\r\n        if (currentNoArtists>countryCount[d.id].length-1){ //There are no more artists!\r\n          d3.selectAll(\".artist-control.right\")\r\n            .classed(\"disabled\", true)\r\n            .on('click',function(){\r\n              d3.select(this).on('click',null); //Remove click listener!\r\n            });\r\n        }\r\n        else{\r\n          d3.selectAll(\".artist-control.right\")\r\n            .classed(\"disabled\", false)\r\n            .on(\"click\", function(){\r\n              showNextFive();\r\n            });\r\n        }\r\n      }\r\n      //Fetch the initial five artists!!\r\n      showArtists(1, 5, true);\r\n\r\n\r\n    } else { //Om landet vi klickat på inte har några lyssnade artister...\r\n      console.log(\"landet har inga lyssnade artister\");\r\n    }\r\n    //\"Recommended\"-heading\r\n    d3.select(\"#recommendations\").append(\"h4\")\r\n      .html(\"You may like: \")\r\n      .attr(\"class\", \"topartists-desc\");\r\n\r\n    // show loading message\r\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\r\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\r\n      .attr(\"id\", \"rec-loading\")\r\n      .html(\"Looking for artists tagged #\" + tag);\r\n    recLoadingDiv.append(\"img\")\r\n      .attr({\r\n        id: \"rec-loading-img\",\r\n        src: \"assets/img/loader_horizontal.gif\"\r\n      })\r\n      .style({\r\n        display: \"inline-block\",\r\n        margin: \"0 5px\"\r\n      })\r\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\r\n\r\n\r\n\r\n    //Get list of recommendations for country based on tags!\r\n    api.getRecommendations(tag, function(taglist) {\r\n      // Return if this callback is from an old (not active) country\r\n      if (!centered || centered.id !== d.id) {\r\n        return;\r\n      }\r\n      // Show loading message\r\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\r\n\r\n      //Get list of recommendations for country based on country name!\r\n      api.getRecommendations(name, function(namelist) {\r\n        // Return if this callback is from an old (not active) country\r\n        if (!centered || centered.id !== d.id) {\r\n          return;\r\n        }\r\n        //Show loading message\r\n        recLoadingMessage.html(\"Loading images for recommended artists\");\r\n\r\n        //Join the two lists\r\n        var list = taglist.concat(namelist);\r\n\r\n        //Removing duplicates from the list!\r\n        var arr = {};\r\n        for (let i = 0; i < list.length; i++)\r\n          arr[list[i]['name']] = list[i];\r\n\r\n        list = new Array();\r\n        for (let key in arr)\r\n          list.push(arr[key]);\r\n\r\n        list.sort(function(a, b) {\r\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n        });\r\n        //Get the first 20 artists\r\n        list = list.slice(0, 20);\r\n        //Randomize list\r\n        list = shuffleArray(list);\r\n\r\n        if (list.length === 0) { // Found no recommendations\r\n          recLoadingDiv.remove();\r\n          d3.select(\"#recommendations\").append(\"p\")\r\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\r\n          d3.select(\"#recommendations\").append(\"a\").attr({\r\n            href: \"https://www.last.fm/tag/\" + name,\r\n            target: \"_blank\",\r\n          }).html(\"Try searching last.fm yourself!\");\r\n        }\r\n\r\n        for (let i = 0; i < Math.min(list.length, 5); i++) {\r\n          // Return if this callback is from an old (not active) country\r\n          if (centered.id !== d.id) {\r\n            return;\r\n          }\r\n\r\n          var artisturl, artistimg, artistname;\r\n\r\n          //Get url and images for recommended artists!\r\n          api.getArtistInfo(list[i].name, function(art) {\r\n            recLoadingDiv.remove();\r\n            var artisturl = art[0].url;\r\n            var artistimg = art[0].image;\r\n            var artistname = art[0].name;\r\n\r\n\r\n            var recoArtistDiv = d3.select(\"#recommendations\").insert(\"div\", \"#summaryText\").attr(\"class\", \"artist-div lowlight\");\r\n            var recoArtistLink = recoArtistDiv.append(\"a\").style(\"display\", \"block\")\r\n              //.attr(\"href\", artisturl)\r\n              //.attr(\"target\", \"_blank\");\r\n            recoArtistLink.append(\"div\")\r\n              .attr(\"class\", \"image-div\")\r\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\r\n\r\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\r\n\r\n            recoArtistInfoDiv.append(\"p\")\r\n              .html(\"<b>\" + artistname + \"</b>\")\r\n              .attr(\"class\", \"details-p\");\r\n\r\n            recoArtistDiv.on(\"click\", function() {\r\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\r\n                \"lowlight\": true,\r\n                \"highlight\": false\r\n              });\r\n\r\n              d3.select(this).classed({ // Highlight selected artist\r\n                \"highlight\": true,\r\n                \"lowlight\": false\r\n              });\r\n              makeSummaryDiv(artistname);\r\n            });\r\n\r\n          })\r\n        }\r\n\r\n\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n  function removeArtistDiv() {\r\n    api.cancelRecommendationRequests();\r\n\r\n    infoContainer.transition().style(\"opacity\", 0).duration(1000);\r\n    infoContainer.classed(\"hidden\", true);\r\n    d3.selectAll(\"#countryCount, .on-map-view\").classed(\"hidden\", false);\r\n    d3.selectAll(\".artist-div\").remove(\"div\");\r\n    d3.selectAll(\".close-button\").remove(\"button\");\r\n    d3.selectAll(\".details-h\").remove(\"p\");\r\n    d3.selectAll(\".details-h4\").remove(\"h4\");\r\n    d3.selectAll(\".recom-h4\").remove(\"h4\");\r\n    d3.selectAll(\".artist-control\").remove();\r\n    d3.selectAll(\".topartists-desc\").remove();\r\n\r\n    cnameDiv.classed(\"hidden\", true);\r\n    d3.select(\"#cnameCont\").remove(\"h1\");\r\n    d3.select(\"#cnameCont\").remove(\"h5\");\r\n  }\r\n\r\n  function makeSummaryDiv(artistname) {\r\n    var usertaglist = [];\r\n    //console.log(usertaglist);\r\n    var artisttaglist = [];\r\n\r\n    d3.select(\"#summaryText\").remove();\r\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\r\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\r\n    d3.select(\"#summaryText\").append(\"img\")\r\n      .attr({\r\n        id: \"sum-loading-img\",\r\n        src: \"assets/img/loader_horizontal.gif\"\r\n      })\r\n      .style({\r\n        display: \"inline-block\",\r\n        margin: \"0 5px\"\r\n      });\r\n\r\n    //Get artist info from Lastfm\r\n    api.getArtistInfo(artistname, function(art) {\r\n      var text = art[0].description.replace(/(\\n)+/g, '<br />');\r\n      //var text = text.substring(6);\r\n      //Get artist's top tags\r\n      artisttaglist = art[0].tags;\r\n      //Create list of user tags\r\n\r\n      //Make list of artist tags which are also user's top tags:\r\n      for (let y = 0; y < 15; y++) {\r\n        for (let z = 0; z < artisttaglist.length; z++) {\r\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\r\n            usertaglist.push(USER_TAGS[y].tag)\r\n          }\r\n        }\r\n      }\r\n\r\n      //Create combined tag list and remove duplicates\r\n      var taglist = usertaglist.concat(artisttaglist);\r\n      taglist = taglist.filter(function(elem, pos) {\r\n        return taglist.indexOf(elem) == pos;\r\n      })\r\n      // Remove loading text\r\n      d3.select(\"#summaryText\").html(\"\");\r\n      //Create containing div\r\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\r\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\r\n      summaryText.style(\"max-height\", h + \"px\");\r\n\r\n      summaryText.append(\"h4\").html(artistname);\r\n\r\n      //Show top 7 tags\r\n      for (let i = 0; i < Math.min(taglist.length, 6); i++) {\r\n        var tagdiv = summaryText.append(\"div\").attr(\"class\", \"tagdiv\").append(\"h4\").html(\"#\" + taglist[i]);\r\n        //Mark all user tags\r\n        for (let p = 0; p < usertaglist.length; p++) {\r\n          if (taglist[i] === usertaglist[p])\r\n            tagdiv.classed(\"usertag\", true);\r\n        }\r\n      }\r\n      //Display artist summary\r\n      summaryText.append(\"p\").html(text || \"No description available - <a href='https://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\r\n\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Toggles highlight of a specified country\r\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\r\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\r\n   */\r\n  function highlightCountry(highlight, countryElement) {\r\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\r\n\r\n    if (highlight) {\r\n      // Fade out all other countries\r\n      d3.selectAll(\".country\").transition()\r\n        .style(\"opacity\", function() {\r\n          return (+this.id === +countryElement.id ? 1.0 : 0.3);\r\n        })\r\n\r\n      var ce = d3.select(document.getElementById(\"\" + countryElement.id)); // d3 can't select ids that are only numbers\r\n      ce.classed(\"highlighted\", true);\r\n    } else {\r\n      // Fade in all countries\r\n      d3.selectAll(\".country\").transition()\r\n        .style(\"opacity\", 1.0)\r\n    }\r\n\r\n  }\r\n\r\n  function clicked(d) { //d är det en har klickat på\r\n\r\n    var x, y, k;\r\n    //bounding box for clicked country\r\n    var b = path.bounds(d);\r\n\r\n    getCountryPlaycount(d);\r\n\r\n    //Set scale\r\n    var modscaleX = (b[1][0] - b[0][0]);\r\n    var modscaleY = (b[1][1] - b[0][1]);\r\n\r\n    //Dom't zoom too far with small countries!\r\n    if (modscaleX < 80)\r\n      modscaleX = 80;\r\n\r\n    //Landet är inte centrerat redan\r\n    if (d && centered !== d) {\r\n      centered = d;\r\n      removeArtistDiv();\r\n      makeArtistDiv(d);\r\n      highlightCountry(true, d);\r\n\r\n\r\n      //Special rules for special countries:\r\n      switch (d.id) {\r\n        case 840: //US\r\n          k = 3;\r\n          x = -(b[1][0] + b[0][0]) / 3;\r\n          y = -(b[1][1] + b[0][1]) / 1.7;\r\n          break;\r\n        case 250: //France\r\n          k = 7.012;\r\n          x = -(b[1][0] + b[0][0]) / 1.8;\r\n          y = -(b[1][1] + b[0][1]) / 3.4;\r\n          break;\r\n        case 528: //Netherlands\r\n          k = 9.0124;\r\n          x = -(b[1][0] + b[0][0]) / 1.5;\r\n          y = -(b[1][1] + b[0][1]) / 3.3;\r\n          break;\r\n        case 643: //Russia\r\n          k = 1.9;\r\n          x = -(b[1][0] + b[0][0]) / 1.25;\r\n          y = -(b[1][1] + b[0][1]) / 2;\r\n          break;\r\n        case 554: //New Zeeland\r\n          k = 4;\r\n          x = -(b[1][0] + b[0][0]) / 0.90;\r\n          y = -(b[1][1] + b[0][1]) / 1.8;\r\n          break;\r\n        case 36: //Australia\r\n          k = 3.3;\r\n          x = -(b[1][0] + b[0][0]) / 1.8;\r\n          y = -(b[1][1] + b[0][1]) / 2.1;\r\n          break;\r\n\r\n        default: //Everybody else\r\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\r\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\r\n          y = -(b[1][1] + b[0][1]) / 2;\r\n          break;\r\n      }\r\n\r\n      //Landet är redan centrerat\r\n    } else {\r\n      x = -width / 2;\r\n      y = -height / 2 - height * 0.08;\r\n      k = 1\r\n      removeArtistDiv();\r\n      highlightCountry(false);\r\n      centered = null;\r\n\r\n      //detailsDiv.classed(\"hidden\", true);\r\n    }\r\n\r\n    var pt = projection.translate();\r\n    // Tell map to move with animation\r\n    // Basically does the same as before: translate to middle,\r\n    // then to x and y with respect to scale\r\n    move([pt[0] + x * k, pt[1] + y * k], k, true);\r\n\r\n  }\r\n\r\n  //function to add points and text to the map (used in plotting capitals)\r\n  function addpoint(lat, lon, text) {\r\n\r\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\r\n    var x = projection([lat, lon])[0];\r\n    var y = projection([lat, lon])[1];\r\n\r\n    gpoint.append(\"svg:circle\")\r\n      .attr(\"cx\", x)\r\n      .attr(\"cy\", y)\r\n      .attr(\"class\", \"point\")\r\n      .attr(\"r\", 1.5);\r\n\r\n    //conditional in case a point has no associated text\r\n    if (text.length > 0) {\r\n\r\n      gpoint.append(\"text\")\r\n        .attr(\"x\", x + 2)\r\n        .attr(\"y\", y + 2)\r\n        .attr(\"class\", \"text\")\r\n        .text(text);\r\n    }\r\n\r\n  }\r\n\r\n  /** \"PUBLUC\" FUNCTIONS **/\r\n  map.putCountryCount = function(object) {\r\n    countryCount = JSON.parse(JSON.stringify(object));\r\n    countryScore = 0;\r\n    var countryList = [];\r\n\r\n    // Extract info for the current user\r\n    d3.keys(countryCount).forEach(function(id) {\r\n      if (countryCount[id][SESSION.name]) {\r\n        countryCount[id] = countryCount[id][SESSION.name];\r\n        countryScore = countryScore + 1;\r\n        countryList.push(+id)\r\n      } else {\r\n        // delete countryCount[id];\r\n      }\r\n    })\r\n\r\n    if (topo) redraw();\r\n\r\n    window.countryScore = countryScore;\r\n\r\n  }\r\n})(window, document)\r\n","var screenshot = {};\r\n\r\n(function (window, document) {\r\n\tscreenshot.render = function () {\r\n\t\tvar titleString,\r\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\r\n\t\t\timg;\r\n\r\n\t\tvar explrLogo = new Image();\r\n\r\n\t\tvar svg = d3.select(\"#map-svg\");\r\n\t\tvar w = svg.attr(\"width\");\r\n\t\tvar h = svg.attr(\"height\");\r\n\r\n\t\tvar canvas = document.createElement(\"canvas\");\r\n\t\tvar ctx = canvas.getContext(\"2d\");\r\n\r\n\t\t// canvg(canvas, document.getElementById(\"map-svg\").outerHTML);\r\n\r\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\r\n\t\tvar textColor = window.getComputedStyle(document.body).color;\r\n\r\n\t\tvar drawCenteredText = function (obj) {\r\n\t\t\tctx.font = obj.font;\r\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\r\n\r\n\t\t\tif (obj.lineWidth) {\r\n\t\t\t\tctx.lineWidth = obj.lineWidth;\r\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\r\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcanvas.width = w;\r\n\t\tcanvas.height = h;\r\n\r\n\t\t// insert background rect\r\n\t\tsvg.insert(\"rect\", \"g\")\r\n\t\t\t.attr({\r\n\t\t\t\tid: \"background-rect\",\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\theight: \"100%\",\r\n\r\n\t\t\t})\r\n\t\t\t.style({\r\n\t\t\t\tfill: backgroundColor,\r\n\t\t\t});\r\n\r\n\t\t// Add color, font to legend text\r\n\t\td3.selectAll('.legend text, text.legend').style({\r\n\t\t\t\"font-family\": function () {\r\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\r\n\t\t\t},\r\n\t\t\t\"font-size\": function () {\r\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\r\n\t\t\t},\r\n\t\t\t\"fill\": textColor,\r\n\t\t});\r\n\t\td3.selectAll(\".legend rect\").style({\r\n\t\t\tstroke: backgroundColor,\r\n\t\t})\r\n\r\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\r\n\r\n\t\texplrLogo.onload = function () {\r\n\t\t\t/* Add text and shiiet */\r\n\t\t\t// Add text background box\r\n\t\t\tctx.save(); // To draw with different opaticy\r\n\t\t\tctx.globalAlpha = 0.6;\r\n\t\t\tctx.fillStyle = backgroundColor;\r\n\t\t\tlet scoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 210 countries\";\r\n\t\t\tlet titleString = SESSION.name + \"'s musical world map\";\r\n\t\t\tctx.font = \"34px Patua One\";\r\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\r\n\t\t\tctx.fillStyle = textColor;\r\n\r\n\t\t\t// Add text\r\n\t\t\tctx.fillStyle = textColor;\r\n\t\t\tdrawCenteredText({\r\n\t\t\t\tstring: titleString,\r\n\t\t\t\tfont: \"34px Patua One\",\r\n\t\t\t\ty: h - 60,\r\n\t\t\t});\r\n\t\t\tdrawCenteredText({\r\n\t\t\t\tstring: scoreString,\r\n\t\t\t\tfont: \"20px Didact Gothic\",\r\n\t\t\t\ty: h - 40,\r\n\t\t\t});\r\n\r\n\t\t\t// Add explr.fm logo\r\n\t\t\tctx.restore();\r\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\r\n\r\n\t\t\td3.select(\"#background-rect\").remove();\r\n\r\n\t\t\t//console.log(canvas.toDataURL())\r\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\r\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL(\"image/png\");\r\n\t\t\t// d3.select(\"body\").append(img);\r\n\t\t\t//\r\n\r\n\t\t\tvar dataurl = canvas.toDataURL(\"image/png\");\r\n\t\t\t// console.log(\"dataurl:\", dataurl)\r\n\r\n\t\t\t// window.open(dataurl, \"_blank\");\r\n\r\n\t\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"\";\r\n\r\n\t\t}\r\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\r\n\t}\r\n\r\n\tscreenshot.close = function () {\r\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"display:none;\";\r\n\t}\r\n\r\n})(window, document);\r\n"]}