{"version":3,"sources":["api/lastfm.js","api/api.js","script.js","map.js","screenshot.js"],"names":["api","lastfm","key","url","send","method","options","callback","retries","xhr","gotResponse","aborted","undefined","forEach","el","replace","tryGet","tries","cb","d3","json","e","d","clearTimeout","timeout","error","errInfo","errorCode","try","JSON","parse","response","console","log","setTimeout","bind","Math","random","abort","superCount","window","csv","err","data","alias","nest","tag","toLowerCase","map","cname","name","getCountry","artist","responseData2","tempCid","tempCountryname","tname","troubleFound","running","toptags","length","t","i","cid","troubleCountries","troubleLanguages","id","countryName","getCountries","artists","checkCount","count","select","html","SESSION","total_artists","localStorage","stringify","STORED_ARTISTS","returnList","country","returnObject","push","Date","getTime","getTags","tags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","cancelRecommendationRequests","getRecommendations","recommendations","USER_TAGS","slice","userTagObj","rollup","xhr1","tagCounts","topartists","a","num","xhr2","data2","hasTags","keys","sort","b","getFriends","document","CACHED_USERS","cached_users","CACHED_NO_COUNTRIES","no_countries","addArtistsWithNoCountry","listOfArtistsWithNoCountry","concat","noCountriesListEl","_art","append","style","visibility","pointer-events","getUserTags","alert","location","assign","origin","pathname","c","tagCount","topArtists","taglist","lim","min","forbidden","nogood","user_tags","user","maxPage","currPage","countryCountObj","randomcountrylist","getAllArtists","responseData","confirm","clear","reload","total","totalPages","remove","artistNames","newArtist","playcount","dataObj","leaves","artistList","filter","putCountryCount","end","loader","transition","duration","each","delay","param","href","split","addEventListener","evt","keyCode","screenshot","render","ga","hitType","eventCategory","eventAction","eventLabel","nextTheme","substr","welcomeOverlay","selectAll","updateName","friendName","attr","friends","target","on","this","classed","theme","begin","floor","legend","colorArray","countryScore","throttleTimer","redraw","move","height","width","topo","projection","path","svg","g","countryNames","centered","zoom","behavior","scaleExtent","countryCount","color","mydomain","maxartists","maxplaycount","updateDimensions","innerHeight","getElementById","offsetWidth","getCountryPlaycount","numbersWithSpace","x","toString","updateScale","max","pow","E","scale","threshold","domain","range","drawPlays","closeButton","offsetL","offsetT","tooltip","infoContainer","cnameDiv","themes","blue_black","green_black","pink_black","pink_white","green_white","red_white","setup","geo","naturalEarth","translate","PI","call","click","class","draw","redrawMap","background-color","border-color","enter","insert","properties","offsetLeft","offsetTop","mouse","node","parseInt","clicked","removeArtistDiv","len","ceil","legend_labels","y","text1","text","getComputedTextLength","_","updateLegend","tr","sc","animate","event","s","highlightCountry","h","invert","makeArtistDiv","currentNoArtists","currentCount","showNextFive","showArtists","showPreviousFive","first","last","initial","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","recLoadingDiv","recLoadingMessage","src","display","margin","namelist","list","arr","Array","array","j","temp","shuffleArray","art","artistimg","artistname","recoArtistDiv","usertaglist","artisttaglist","summaryText","z","elem","pos","indexOf","offsetHeight","tagdiv","p","countryElement","k","bounds","modscaleX","modscaleY","pt","toTheme","themeList","body","countries","world","topojson","feature","objects","features","object","countryList","drawCenteredText","obj","ctx","font","fillText","string","w","measureText","lineWidth","strokeStyle","strokeText","titleString","explrLogo","Image","canvas","createElement","getContext","backgroundColor","getComputedStyle","textColor","fill","font-family","font-size","stroke","canvg","XMLSerializer","serializeToString","onload","save","globalAlpha","fillStyle","scoreString","fillRect","restore","drawImage","toDataURL","getElementsByClassName","close"],"mappings":"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","file":"../all.min.js","sourcesContent":["var api = api || {};\r\n\r\napi.lastfm = {};\r\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\r\napi.lastfm.url = \"https://ws.audioscrobbler.com/2.0/\";\r\n\r\n/**\r\n* Send an API call to last.fm\r\n* @param {String} method    The method name (e.g. \"library.getartists\")\r\n* @param {Array} options    An array of tuples (arrays with two elements)\r\n                            with options for the request: [\"key\", \"value\"]\r\n* @param {Function} callback    The callback function to call with the data\r\n                                returned from the request. Takes two arguments,\r\n                                error and data (callback(error, data))\r\n*/\r\napi.lastfm.send = function (method, options, callback, retries) {\r\n\tvar url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\r\n\t\tapi.lastfm.key + \"&format=json\";\r\n\tvar xhr, gotResponse, retries = undefined === retries ? 10 : retries,\r\n\t\taborted = false;\r\n\r\n\toptions.forEach(function (el) {\r\n\t\turl += \"&\" + el[0] + \"=\" +\r\n\t\t\t(el[1] + \"\")\r\n\t\t\t.replace(\"&\", \"%26\")\r\n\t\t\t.replace(\"/\", \"%2F\")\r\n\t\t\t.replace(\"+\", \"%2B\")\r\n\t\t\t.replace(\"\\\\\", \"%5C\");\r\n\t});\r\n\r\n\tfunction tryGet(tries, cb) {\r\n\t\txhr = d3.json(url, function (e, d) {\r\n\t\t\tif (aborted) {\r\n\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (e || d.error) {\r\n\t\t\t\tvar errInfo = {\r\n\t\t\t\t\tmethod: method,\r\n\t\t\t\t\terrorCode: d.error,\r\n\t\t\t\t\ttry: tries,\r\n\t\t\t\t\toptions: options,\r\n\t\t\t\t};\r\n\t\t\t\t// alert(\"ERROR\");\r\n\t\t\t\td = d || JSON.parse(e.response);\r\n\t\t\t\tif ((\r\n\t\t\t\t\t\td.error === 29 || // Rate Limit Exceeded\r\n\t\t\t\t\t\td.error === 8 // Operation failed\r\n\t\t\t\t\t) && tries < retries) {\r\n\t\t\t\t\tconsole.log(\"Retry request: \", errInfo);\r\n\t\t\t\t\tsetTimeout(tryGet.bind(null, tries + 1, cb), tries * 500 + Math.random() * tries * 1000);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (tries >= retries) {\r\n\t\t\t\t\tconsole.log(\"Retry failed after \" + retries + \" attempts, will stop trying.\", errInfo);\r\n\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t\taborted = true;\r\n\t\t\t\t\te = \"ERROR\";\r\n\t\t\t\t\td = {\r\n\t\t\t\t\t\terror: \"Took to long to respond\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tgotResponse = true;\r\n\t\t\tcb(e, d);\r\n\t\t});\r\n\t}\r\n\r\n\ttryGet(0, callback);\r\n\r\n\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\r\n\tvar timeout = setTimeout(function () {\r\n\t\tif (!gotResponse) {\r\n\t\t\t//console.log(\"GET \" + url + \" took to long, aborting\");\r\n\t\t\txhr.abort();\r\n\t\t\tcallback(\"ERROR\", {\r\n\t\t\t\terror: \"Took to long to respond\"\r\n\t\t\t});\r\n\t\t}\r\n\t}, 20000);\r\n\r\n\treturn {\r\n\t\tabort: function () {\r\n\t\t\taborted = true;\r\n\t\t\txhr.abort();\r\n\t\t}\r\n\t};\r\n}","/*requires:\r\napi\\lastfm.js\r\n*/\r\n\r\nvar api = api || {};\r\nvar superCount = 0;\r\n\r\n(function(window, document) {\r\n\td3.csv(\"assets/data/countries.csv\", function(err, data) {\r\n\t\talias = d3.nest()\r\n\t\t\t.key(function(d) {\r\n\t\t\t\treturn d.tag.toLowerCase();\r\n\t\t\t})\r\n\t\t\t.map(data);\r\n\r\n\t\tcname = d3.nest()\r\n\t\t\t.key(function(d) {\r\n\t\t\t\treturn d.name.toLowerCase();\r\n\t\t\t})\r\n\t\t\t.map(data);\r\n\r\n\t\t/**\r\n\t\t * Tries to find out the country for a specified artist.\r\n\t\t * @param  {String}   artist   Name of the artist to get country for\r\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\r\n\t\t *                             The callback function takes one argument, this object:\r\n\t\t *\r\n\t\t *                             {\r\n\t\t *                             \t\"artist\": <artist name>,\r\n\t\t *                             \t\"country\": <country name>,\r\n\t\t *                             \t\"id\": <country id>,\r\n\t\t *                             \t\"tag\": <the tag that decided the country (e.g. Swedish for Sweden)>\r\n\t\t *                             }\r\n\t\t *\r\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\r\n\t\t *\r\n\t\t */\r\n\t\tapi.getCountry = function(artist, callback) {\r\n\t\t\t// Get artists country code here, from last.fm or whatever\r\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err,\r\n\t\t\t\tresponseData2) {\r\n\t\t\t\tvar running = true; // To stop searching when a country-tag has been found\r\n\r\n\t\t\t\t// Return if something failed\r\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\r\n\t\t\t\t\tresponseData2.toptags.tag.length) {\r\n\t\t\t\t\tcallback({\r\n\t\t\t\t\t\t\"artist\": artist\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t//Spara tillfälligt bästa träffen\r\n\t\t\t\tvar tempCid;\r\n\t\t\t\tvar tempCountryname;\r\n\t\t\t\tvar tname;\r\n\t\t\t\tvar troubleFound;\r\n\r\n\t\t\t\t// Else check for country-tags in the artist's tags\r\n\t\t\t\tresponseData2.toptags.tag.forEach(function (t, i) {\r\n\t\t\t\t\tif (running) {\r\n\t\t\t\t\t\ttname = t.name.toLowerCase();\r\n\t\t\t\t\t\tvar cid;\r\n\r\n\t\t\t\t\t\t//Lista med taggar vi vill dubbelkolla\r\n\t\t\t\t\t\tvar troubleCountries = [\"georgia\", \"ireland\"];\r\n\t\t\t\t\t\tvar troubleLanguages = [\"spanish\", \"french\", \"english\", \"portuguese\", \"russian\", \"italian\", \"japanese\", \"korean\", \"indian\", \"swedish\", \"irish\"];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry { //Testar taggen mot landsnamn\r\n\t\t\t\t\t\t\tif (cname[tname] && cname[tname][0].id) { // sweden->sweden\r\n\t\t\t\t\t\t\t\t//Kollar lista med specialfall som ofta blir fel\r\n\t\t\t\t\t\t\t\ttroubleFound = false;\r\n\t\t\t\t\t\t\t\tfor (i = 0; i < troubleCountries.length; i++) {\r\n\t\t\t\t\t\t\t\t\tif (cname[tname][0].name.toLowerCase() == troubleCountries[i]) {\r\n\t\t\t\t\t\t\t\t\t\ttroubleFound = troubleCountries[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (!troubleFound) { //Den här taggen är inget problem, fortsätt som vanligt\r\n\t\t\t\t\t\t\t\t\t\tcid = cname[tname][0].id; \r\n\t\t\t\t\t\t\t\t\t\tcountryName = cname[tname][0].name;\r\n\t\t\t\t\t\t\t\t} else { //Den här taggen finns med i listan, spara den temporärt och se om vi hittar något bättre!\r\n\t\t\t\t\t\t\t\t\ttempCid = cname[tname][0].id;\r\n\t\t\t\t\t\t\t\t\ttempCountryname = cname[tname][0].name;\r\n\t\t\t\t\t\t\t\t\t//console.log(\"Trouble found!     \" + tname);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t//Testar taggen mot demonymer\r\n\t\t\t\t\t\t\t} else if (alias[tname] && alias[tname][0].id) { // swedish->sweden\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\ttroubleFound = false;\r\n\t\t\t\t\t\t\t\tfor (i = 0; i < troubleLanguages.length; i++) {\r\n\t\t\t\t\t\t\t\t\tif (alias[tname][0].tag.toLowerCase() == troubleLanguages[i]) {\r\n\t\t\t\t\t\t\t\t\t\ttroubleFound = troubleLanguages[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (!troubleFound) { //Den här taggen är inget problem, fortsätt som vanligt\r\n\t\t\t\t\t\t\t\t\t\tcid = alias[tname][0].id;\r\n\t\t\t\t\t\t\t\t\t\tcountryName = alias[tname][0].name;\r\n\t\t\t\t\t\t\t\t} else { //Den här taggen finns med i listan, spara den temporärt och se om vi hittar något bättre!\r\n\t\t\t\t\t\t\t\t\ttempCid = alias[tname][0].id;\r\n\t\t\t\t\t\t\t\t\ttempCountryname = alias[tname][0].name;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (cid) { // Vi hittade en bra tagg, kör som bvnligt!\r\n\t\t\t\t\t\t\t\tcallback({ // Call callback method\r\n\t\t\t\t\t\t\t\t\t\"artist\": artist,\r\n\t\t\t\t\t\t\t\t\t\"id\": cid,\r\n\t\t\t\t\t\t\t\t\t\"tag\": tname,\r\n\t\t\t\t\t\t\t\t\t\"name\": countryName,\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\trunning = false; // Stop searching for country-tags\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\t//console.log(artist, tname)\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (running) { // Vi hittade inget perfekt land. \r\n\t\t\t\t\tif (tempCid) { //go with backup plan, använd den problematiska taggen\r\n\t\t\t\t\t\tconsole.log(\"Potentially incorrect country for '\" + artist + \"': \" + tempCountryname + \", using only the tag '\" + troubleFound + \"'\");\r\n\t\t\t\t\t\t\tcallback({ // Call callback method\r\n\t\t\t\t\t\t\t\t\"artist\": artist,\r\n\t\t\t\t\t\t\t\t\"id\": tempCid,\r\n\t\t\t\t\t\t\t\t\"tag\": tname,\r\n\t\t\t\t\t\t\t\t\"name\": tempCountryname,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\trunning = false; // Stop searching for country-tags\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcallback({\r\n\t\t\t\t\t\t\t\"artist\": artist\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a list of country objects for a list of artist names.\r\n\t\t *\r\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\r\n\t\t * @param  {Array}   artists  Array of artist names (String)\r\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\r\n\t\t *                             containing only those artists that have a country\r\n\t\t *                             associated with them. For object structure, see api.getCountry\r\n\t\t */\r\n\t\tapi.getCountries = function(artists, callback) {\r\n\t\t\tvar returnList = [],\r\n\t\t\t\tcount = 0;\r\n\t\t\t/**\r\n\t\t\t * Increases a count and checks if we've tried\r\n\t\t\t * to get country for all artists\r\n\t\t\t */\r\n\t\t\tvar checkCount = function() {\r\n\t\t\t\tcount++;\r\n\t\t\t\tsuperCount++;\r\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>You can start exploring,<br>but it might interfere<br>with loading your artists.\");\r\n\t\t\t\tif (count === artists.length) {\r\n\t\t\t\t\t// We done, save artists and call back\r\n\t\t\t\t\twindow.localStorage.artists = JSON.stringify(STORED_ARTISTS);\r\n\t\t\t\t\tcallback(returnList);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Get countries for all artists\r\n\t\t\tartists.forEach(function(el, i) {\r\n\t\t\t\t// first check stored artists to see if we've already checked this artist\r\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\r\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\r\n\t\t\t\t\treturnObject.artist = el;\r\n\t\t\t\t\treturnList.push(returnObject);\r\n\t\t\t\t\tcheckCount();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar start = new Date().getTime();\r\n\r\n\t\t\t\t\tapi.getCountry(el, function(data) {\r\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\r\n\t\t\t\t\t\t// console.error(data)\r\n\r\n\t\t\t\t\t\t// if (data.name) {\r\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\r\n\t\t\t\t\t\t\t\"id\": data.id,\r\n\t\t\t\t\t\t\t\"name\": data.name,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\treturnList.push(data);\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\r\n\r\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\r\n\r\n\r\n\t\t\t\t\t\tcheckCount();\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n\r\n\t/**\r\n\t * Get all tags for an artist.\r\n\t * @param  {String}   artist   Artist name\r\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\r\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\r\n\t */\r\n\tapi.getTags = function(artist, callback) {\r\n\t\t// Check if artist tags are already saved, if so return them\r\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\r\n\t\t\t// console.log(\"Had in store, no api call\");\r\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\r\n\t\t} else {\r\n\t\t\t// Create object in localstorage\r\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\r\n\t\t\tSTORED_ARTISTS[artist].tags = [];\r\n\r\n\t\t\t// Get from lastfm\r\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\r\n\t\t\t\tfunction(err, responseData2) {\r\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\r\n\t\t\t\t\twindow.localStorage.artists = JSON.stringify(STORED_ARTISTS);\r\n\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tapi.getArtistInfo = function(artist, callback) {\r\n\t\tvar artistInfo = [];\r\n\r\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\r\n\t\t\t//Creating a list of tag names\r\n\t\t\tvar tagnamelist = [];\r\n\t\t\tif (data1.artist.tags.tag) {\r\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\r\n\t\t\t\t\ttagnamelist.push(t.name);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tartistInfo.push({\r\n\t\t\t\tname: artist,\r\n\t\t\t\turl: data1.artist.url,\r\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\r\n\t\t\t\tdescription: data1.artist.bio.summary,\r\n\t\t\t\ttags: tagnamelist\r\n\t\t\t})\r\n\t\t\tcallback(artistInfo);\r\n\t\t})\r\n\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\r\n\t * Also included are which tags matched.\r\n\t *\r\n\t * Calling this function cancels previous requests initiated by this function.\r\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\r\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\r\n\t */\r\n\tvar recommendationRequests = [];\r\n\tapi.cancelRecommendationRequests = function () {\r\n\t\trecommendationRequests.forEach(function (xhr) {\r\n\t\t\txhr.abort();\r\n\t\t});\r\n\r\n\t\trecommendationRequests = [];\r\n\t}\r\n\tapi.getRecommendations = function (country, callback) {\r\n\t\tapi.cancelRecommendationRequests();\r\n\r\n\t\tvar recommendations = [];\r\n\r\n\t\t// get top tags for user\r\n\t\tvar toptags = USER_TAGS.slice(0, 15);\r\n\t\t// make tag list to an object (back n forthss)\r\n\t\tvar userTagObj = d3.nest().key(function(d) {\r\n\t\t\treturn d.tag;\r\n\t\t}).rollup(function(d) {\r\n\t\t\treturn d[0].count;\r\n\t\t}).map(toptags);\r\n\r\n\r\n\t\t//console.log(\"Got top tags for user!\")\r\n\r\n\t\t// Get top artists for tag country\r\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\r\n\t\t\t// Gotta count matching tags to then sort\r\n\t\t\tvar tagCounts = {};\r\n\r\n\t\t\t// Get the tags for these artists\r\n\t\t\t//console.log(data1, err)\r\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\r\n\t\t\t\tcallback([]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar artists = data1.topartists.artist;\r\n\r\n\t\t\tartists.forEach(function(a, num) {\r\n\t\t\t\ttagCounts[a.name] = [];\r\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\r\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\r\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\r\n\t\t\t\t\tif (hasTags) {\r\n\t\t\t\t\t\t// Compare top 10 tags to user tags\r\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\r\n\t\t\t\t\t\t\treturn d.name;\r\n\t\t\t\t\t\t}).map(data2.toptags.tag);\r\n\r\n\t\t\t\t\t\t// Get rid of justin bieber\r\n\t\t\t\t\t\tif (tags[country]) {\r\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\r\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (num === artists.length - 1) {\r\n\t\t\t\t\t\t//console.log(\"We've gotten tag counts for all artists, make a list!\")\r\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\r\n\t\t\t\t\t\t\trecommendations.push({\r\n\t\t\t\t\t\t\t\tname: d,\r\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\r\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\r\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t//console.log(recommendations)\r\n\t\t\t\t\t\tcallback(recommendations);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\r\n\t\t\t\trecommendationRequests.push(xhr2);\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\trecommendationRequests.push(xhr1);\r\n\t}\r\n\r\n\tapi.getFriends = function(callback) {\r\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\r\n\t}\r\n})(window, document);","/* requires:\r\napi\\api.js\r\napi\\lastfm.js\r\n*/\r\n\r\nvar STORED_ARTISTS = JSON.parse(window.localStorage.artists || \"{}\");\r\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\r\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\r\nvar SESSION = {};\r\nvar CACHED_NO_COUNTRIES = JSON.parse(window.localStorage.no_countries || \"{}\");\r\n\r\n(function () {\r\n    // user = prompt(\"Input your user name, get top 20 artists\")\r\n    var user, currPage = 1,\r\n        maxPage;\r\n    var countryCountObj = {};\r\n    var count = 0;\r\n    var tries = 0;\r\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\r\n    var listOfArtistsWithNoCountry = [];\r\n\r\n    /**\r\n     * adds artists with no country to the array of artists with\r\n     * no country :)\r\n     * \r\n     * @param {*} data Response from api.getCountries; array of\r\n     * artists that may or may not have country\r\n     */\r\n    var addArtistsWithNoCountry = function (data) {\r\n        listOfArtistsWithNoCountry = listOfArtistsWithNoCountry.concat(data);\r\n\r\n        var noCountriesListEl = d3.select(\".no-countries ul\");\r\n        data.forEach(function (_art) {\r\n            noCountriesListEl.append(\"li\").html('<a href=\"' + _art.url + '\" target=\"blank\" class=\"no-countries__link\">' + _art.artist + '</a>');\r\n        })\r\n\r\n        window.localStorage.no_countries = JSON.stringify(listOfArtistsWithNoCountry);\r\n\r\n        if (listOfArtistsWithNoCountry.length) {\r\n            d3.select(\".no-countries\").style({\r\n                visibility: \"visible\",\r\n                \"pointer-events\": \"all\",\r\n            });\r\n        }\r\n    }\r\n\r\n    var getAllArtists = function () {\r\n        console.log(\"get artists\")\r\n\r\n        api.lastfm.send(\"library.getartists\", [\r\n                [\"user\", user],\r\n                [\"limit\", 50],\r\n                [\"page\", currPage]\r\n            ],\r\n            function (error, responseData) {\r\n                // Special case for unfortunate users\r\n                if (responseData === \"\") {\r\n                    console.error('Got empty string (\"\") as response, skipping page.')\r\n                    currPage++;\r\n                    getAllArtists();\r\n                    return;\r\n                }\r\n                if (error || responseData.error) {\r\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\r\n\r\n                    // Try again, but not forever\r\n                    if (tries++ < 5) {\r\n                        getAllArtists();\r\n\r\n                        // TODO: Show erorr message ;)\r\n                    } else {\r\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\r\n                        if (refresh) {\r\n                            window.localStorage.clear();\r\n                            window.localStorage.artists = JSON.stringify(STORED_ARTISTS);\r\n                            window.location.reload();\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                tries = 0;\r\n\r\n                if (currPage === 1) {\r\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\r\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\r\n\r\n                    if (SESSION.total_artists === 0) {\r\n                        d3.select(\".bubblingG\").remove();\r\n                        d3.select(\"#loading-text\")\r\n                            .html(\"You haven't listened to any<br> artists yet. Start scrobbling with <br>\\\r\n                                                        <a href='http://evolver.fm/2012/05/08/how-to-scrobble-to-last-fm-from-itunes-\" +\r\n                                \"spotify-and-more/'>your favorite music player!</a>\");\r\n                        d3.select(\".loader\").style(\"pointer-events\", \"all\");\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                currPage++;\r\n                // console.log(\"Artists done, get countries\");\r\n\r\n                // Save artist data to localStorage (and create a list of artist names)\r\n                var artistNames = []\r\n                responseData.artists.artist.forEach(function (newArtist) {\r\n                    var a = STORED_ARTISTS[newArtist.name] || {};\r\n\r\n                    a.playcount = +newArtist.playcount;\r\n                    a.url = newArtist.url;\r\n\r\n                    a.image = [newArtist.image[3]];\r\n\r\n                    STORED_ARTISTS[newArtist.name] = a;\r\n                    artistNames.push(newArtist.name);\r\n                })\r\n                window.localStorage.artists = JSON.stringify(STORED_ARTISTS);\r\n                // var n = count++;\r\n\r\n                // Get country for all artists\r\n                api.getCountries(artistNames,\r\n                    function (data) {\r\n                        // Count plays for each country?\r\n                        // countryCountList = countryCountList.concat(data);\r\n                        var dataObj = d3.nest() //Gör så att man kan slå upp på land-id och få upp en lista på artister.\r\n                            .key(function (d) {\r\n                                return d.id;\r\n                            })\r\n                            .rollup(function (leaves) { //gör så att man får en lista på alla artister för ett land.\r\n                                return leaves;\r\n                            })\r\n                            .map(data); //Skickar in en lista med ett objekt för varje artist.\r\n\r\n                        d3.keys(dataObj).forEach(function (id) {\r\n                            countryCountObj[id] = countryCountObj[id] || {};\r\n                            countryCountObj[id][user] = countryCountObj[id][user] || [];\r\n                            var artistList = countryCountObj[id][user]; // list of artists for a country\r\n\r\n                            // if (artistList) {\r\n                            artistList = artistList.concat(dataObj[id]);\r\n\r\n                            //Lägger på de nya dataObj-elementen i countryCountObj-listan.\r\n                            // } else {\r\n                            //     artistList = dataObj[id];\r\n                            // }\r\n\r\n                            artistList.forEach(function (el, i) {\r\n                                //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\r\n                                artistList[i].image = STORED_ARTISTS[el.artist].image[0][\"#text\"];\r\n                                artistList[i].url = STORED_ARTISTS[el.artist].url;\r\n                                artistList[i].playcount = STORED_ARTISTS[el.artist].playcount;\r\n                                // if (artistList[i].users) {\r\n                                //     artistList[i].users.push(user);\r\n                                // } else {\r\n                                //     artistList[i].users = [user];\r\n                                // }\r\n                            });\r\n                            //countryCountObj är en lista med \"country\"-objekt. \r\n                            //Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\r\n                            //dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\r\n                            countryCountObj[id][user] = artistList;\r\n                        })\r\n\r\n                        addArtistsWithNoCountry(data.filter(function (artist) {\r\n                            return !artist.id; // && artist.artist && artist.url;\r\n                        }));\r\n\r\n                        map.putCountryCount(countryCountObj);\r\n\r\n                        if (currPage > maxPage) {\r\n                            end();\r\n                            return;\r\n                        } else {\r\n                            getAllArtists();\r\n                        }\r\n                    });\r\n            });\r\n    }\r\n\r\n    var getRecommendations = function () {\r\n        var currPage = 1,\r\n            limit = 50,\r\n            maxPage = 1000 / limit;\r\n        var countriesList = JSON.parse(window.localStorage.countries);\r\n\r\n        var countriesObj = d3.nest().key(function (d) {\r\n            return d.name;\r\n        }).rollup(function (d) {\r\n            return d[0];\r\n        }).map(countriesList);\r\n        // Get \"all\" artists from one country\r\n        // countriesList.forEach(function(country){\r\n\r\n        // });\r\n        api.lastfm.send(\"tag.gettopartists\", [\r\n            [\"tag\", \"swedish\"],\r\n            [\"limit\", limit],\r\n            [\"page\", currPage]\r\n        ], function (err, data) {\r\n            var artists = data.topartists.artist;\r\n            // For each artist, get their tags\r\n            artists.forEach(function (a) {\r\n                api.lastfm.send(\"artist.gettoptags\", [\r\n                    [\"artist\", a.name]\r\n                ], function (err, data) {\r\n                    // console.log(data);\r\n                })\r\n            })\r\n            // Look for user's top tags in artist tags\r\n            // If a lot of matches, save to recommended artists for that country\r\n        });\r\n\r\n    }\r\n\r\n    var getUserTags = function (err, data) {\r\n        // err = err ||data.error;\r\n        if (err || data.error) {\r\n            if (data && data.error === 6) {\r\n                alert(\"User not found\");\r\n                window.location.assign(window.location.origin + window.location.pathname);\r\n            }\r\n        }\r\n\r\n\r\n        /*if (err || data.error) {\r\n            console.error(\"Erorr in getUserTags\", err, data);\r\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\r\n            window.location.replace(window.location.origin + window.location.pathname);\r\n        }*/\r\n\r\n        var c = 0;\r\n\r\n        var tagCount = {};\r\n\r\n        //console.log(\"Gotta get tags\")\r\n\r\n        var topArtists = data.topartists.artist;\r\n        var done = function () {\r\n            // make list of tags to sort\r\n            USER_TAGS = [];\r\n            //Remove specific tags from user's top tags\r\n            forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\", \"seen live\", \"english\", \"singer-songwriter\", \"spanish\", \"french\"];\r\n            d3.keys(tagCount).forEach(function (el) {\r\n                var nogood = false\r\n                for (i = 0; i < forbidden.length; i++) {\r\n                    if (el === forbidden[i]) {\r\n                        nogood = true;\r\n                    }\r\n                }\r\n                if (!nogood) {\r\n                    USER_TAGS.push({\r\n                        tag: el,\r\n                        count: tagCount[el]\r\n                    });\r\n                }\r\n            })\r\n            USER_TAGS.sort(function (a, b) {\r\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n            });\r\n            console.log(\"Done getting tags, saved to localStorage.user_tags\")\r\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\r\n        }\r\n\r\n\r\n        topArtists.forEach(function (el, i) {\r\n            // get top ten tags and save to users tag count....\r\n            setTimeout(function () { // Set timeout to not stop artists from loading...\r\n                api.lastfm.send(\"artist.gettoptags\", [\r\n                    [\"artist\", el.name]\r\n                ], function (err, data) {\r\n                    taglist = data.toptags.tag;\r\n                    if (taglist) {\r\n                        var lim = Math.min(taglist.length, 10);\r\n                        for (var i = 0; i < lim; i++) {\r\n                            if (tagCount[taglist[i].name]) {\r\n                                tagCount[taglist[i].name]++;\r\n                            } else {\r\n                                tagCount[taglist[i].name] = 1;\r\n                            }\r\n                        }\r\n                        // console.log(c, topArtists.length)\r\n                    }\r\n\r\n                    c++;\r\n                    if (c == topArtists.length - 1) {\r\n                        done();\r\n                    }\r\n                });\r\n            }, Math.random() * 3000);\r\n        });\r\n\r\n    }\r\n\r\n    var begin = function () {\r\n        //Send analytics event\r\n        ga('send', 'event', 'splash screen', 'Go!', 'test');\r\n        // fade out username input box\r\n        var welcomeOverlay = d3.select(\"#welcome-container\");\r\n        welcomeOverlay.transition().duration(2000)\r\n            .style(\"opacity\", 0)\r\n            .each(\"end\", function () {\r\n                welcomeOverlay.remove();\r\n            });\r\n\r\n        // Fade in loader\r\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\r\n        d3.select(\"#loading-text\").html(\"Getting library...\");\r\n        setTimeout(function () {\r\n            if (d3.select(\"#loading-text\").html() === \"Getting library...\") {\r\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\r\n\r\n                setTimeout(function () {\r\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\r\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\r\n                            .style(\"pointer-events\", \"all\");\r\n                    }\r\n                }, 8000);\r\n            }\r\n        }, 8000);\r\n\r\n        // Fade in legend, progress-bar etc\r\n        d3.selectAll(\".on-map-view\").style({\r\n            \"visibility\": \"visible\",\r\n            //            \"opacity\": 0\r\n        }) //.transition().duration(1000).style(\"opacity\", 1);\r\n\r\n        // Get user tags\r\n        api.lastfm.send(\"user.gettopartists\", [\r\n            [\"user\", user],\r\n            [\"period\", \"12months\"],\r\n            [\"limit\", \"50\"]\r\n        ], getUserTags);\r\n\r\n        // Get user friends\r\n        api.getFriends(function (err, data) {\r\n            try {\r\n                var friends = data.friends.user;\r\n                var i = 0;\r\n                var friendName = d3.select(\"#friend-name\");\r\n\r\n                var updateName = function () {\r\n                    friendName.html(\"\");\r\n                    friendName.append(\"a\").attr({\r\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\r\n                        target: \"_self\",\r\n                    }).html(friends[i].name);\r\n                }\r\n\r\n                d3.selectAll(\".arrow\").on(\"click\", function () {\r\n                    if (d3.select(this).classed(\"left\")) {\r\n                        // Go left\r\n                        i = (i === 0 ? friends.length - 1 : i - 1);\r\n                    } else {\r\n                        // Go right\r\n                        i = (i + 1) % friends.length;\r\n                    }\r\n\r\n                    updateName();\r\n                })\r\n\r\n                updateName();\r\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\r\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\r\n\r\n            } catch (e) {\r\n                console.error(\"getFriends()\", e);\r\n                d3.select(\"#friends\").html(\"&nbsp;Couldn't find any<br>friends on last.fm :(&nbsp;\")\r\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\r\n            }\r\n        });\r\n\r\n        if (CACHED_USERS[user]) {\r\n            // TODO: use timestamp\r\n            console.log(\"No new artists on last.fm!\");\r\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\r\n            addArtistsWithNoCountry(JSON.parse(window.localStorage.no_countries));\r\n\r\n            // Get number of artists for screenshot etc.\r\n            api.lastfm.send(\"library.getartists\", [\r\n                    [\"user\", user],\r\n                    [\"limit\", 1],\r\n                    [\"page\", 1]\r\n                ],\r\n                function (error, responseData) {\r\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\r\n                });\r\n\r\n            setTimeout(function () {\r\n                map.putCountryCount(countryCountObj);\r\n                end();\r\n            }, 1000)\r\n        } else {\r\n            // Save theme\r\n            var theme = window.localStorage.theme;\r\n            window.localStorage.clear();\r\n            if (theme) {\r\n                window.localStorage.theme = theme;\r\n            }\r\n            getAllArtists();\r\n        }\r\n    }\r\n\r\n    var end = function () {\r\n        // We're done, fade out loader\r\n        var loader = d3.select(\".loader\");\r\n        loader.transition().duration(2000)\r\n            .style(\"opacity\", 0)\r\n            .each(\"end\", function () {\r\n                loader.remove();\r\n            });\r\n        //Also fade out progress bar text (after a short delay)\r\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\r\n            .style(\"opacity\", 0);\r\n\r\n        CACHED_USERS = {};\r\n        CACHED_USERS[user] = new Date().getTime();\r\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\r\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\r\n    }\r\n\r\n    // // Set theme\r\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\r\n\r\n    // Try to get username from url\r\n    var param = window.location.href.split(\"username=\")[1];\r\n\r\n    if (param) { // We already have a user\r\n        // set up keyboard shortcuts\r\n        window.addEventListener(\"keydown\", function (evt) {\r\n            switch (evt.keyCode) {\r\n                // s\r\n                case 83:\r\n                    screenshot.render();\r\n                    //Send google analytics event\r\n                    ga('send', {\r\n                        hitType: 'event',\r\n                        eventCategory: 'Hotkeys',\r\n                        eventAction: 'Take screenshot',\r\n                        eventLabel: 'test'\r\n                    });\r\n                    break;\r\n                    // t\r\n                case 84:\r\n                    nextTheme();\r\n                    //Send google analytics event\r\n                    ga('send', {\r\n                        hitType: 'event',\r\n                        eventCategory: 'Hotkeys',\r\n                        eventAction: 'Cycle theme',\r\n                        eventLabel: 'test'\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        if (param.length > 15) {\r\n            param = param.substr(0, 15);\r\n        }\r\n        user = param;\r\n        SESSION.name = param;\r\n        begin();\r\n    } else {\r\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\r\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\r\n    }\r\n})();","/* requires:\r\napi\\api.js\r\napi\\lastfm.js\r\nscript.js\r\n*/\r\n\r\nvar map = {};\r\n//White theme default:\r\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\r\nvar legend;\r\nvar countryScore = 0;\r\n\r\n\r\n(function (window, document) {\r\n  d3.select(window).on(\"resize\", throttle);\r\n\r\n  var doThrottle = false;\r\n  var filter = \"artists\"; // filter by artists or plays\r\n\r\n  var zoom = d3.behavior.zoom()\r\n    .scaleExtent([1, 9])\r\n    .on(\"zoom\", move);\r\n\r\n\r\n  var height, width;\r\n\r\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\r\n  countryCount = {};\r\n\r\n  //Variables needed to update scale and legend\r\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\r\n  var maxartists = 1,\r\n    maxplaycount = 0;\r\n\r\n  //Setting color and range to be used\r\n  var color;\r\n\r\n  // Set theme\r\n  var theme = window.localStorage.theme || \"pink_white\";\r\n\r\n  map.drawPlays = function () {\r\n    filter = \"scrobbles\";\r\n    redraw();\r\n  };\r\n\r\n  /**\r\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\r\n   */\r\n  function updateDimensions() {\r\n    height = window.innerHeight - 5;\r\n    width = document.getElementById('map-container').offsetWidth;\r\n  }\r\n\r\n  //Returns total number of plays for country\r\n  function getCountryPlaycount(c) {\r\n    if (countryCount[c.id]) {\r\n      var count = 0;\r\n      for (i = 0; i < countryCount[c.id].length; i++) {\r\n        count += countryCount[c.id][i].playcount;\r\n      }\r\n      return count;\r\n    } else return 0;\r\n  };\r\n\r\n\r\n  function updateProgressBar() {\r\n    var progressPro = (countryScore / 197);\r\n    return progressPro;\r\n  };\r\n\r\n  //Function to format numbers over 1000 with a space\r\n  function numbersWithSpace(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n  }\r\n  /**\r\n   * Randomize array element order in-place.\r\n   * Using Fisher-Yates shuffle algorithm.\r\n   */\r\n  function shuffleArray(array) {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n  //Function to remove duplicates from arrays\r\n  function onlyUnique(value, index, self) {\r\n    return self.indexOf(value) === index;\r\n  }\r\n\r\n  function updateScale() {\r\n    var max = -1;\r\n    switch (filter) {\r\n      case \"artists\":\r\n        max = maxartists;\r\n        for (i = 0; i < 5; i++) {\r\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1));\r\n        }\r\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\r\n        break;\r\n      case \"scrobbles\":\r\n        max = maxplaycount;\r\n        for (i = 0; i < 7; i++) {\r\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\r\n        }\r\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\r\n        break;\r\n    };\r\n\r\n\r\n    color = d3.scale.threshold()\r\n      .domain(mydomain)\r\n      .range(colorArray);\r\n  };\r\n\r\n  function updateLegend() {\r\n    //Remove decimals from domain\r\n    var x = 0;\r\n    var len = mydomain.length\r\n    while (x < len) {\r\n      mydomain[x] = Math.ceil(mydomain[x]);\r\n      x++;\r\n    };\r\n\r\n    //Array of text\r\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\r\n\r\n    //Create Legend\r\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\r\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\r\n      .data(mydomain);\r\n\r\n    //Color box sizes\r\n    var ls_w = 20,\r\n      ls_h = 20;\r\n    var x = width * 0.03;\r\n    var y = height * 0.03;\r\n\r\n    // Add legend filter text\r\n    var text1 = svg.select(\"#filter-text\")\r\n      .attr(\"x\", x)\r\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\r\n      .text(\"Number of \");\r\n    var text2 = svg.select(\"#filter\")\r\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\r\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\r\n      .text(filter);\r\n    text2.on(\"click\", function () {\r\n      // Toggle filter method\r\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\r\n      redraw();\r\n    });\r\n\r\n    var noCountryArtists = d3.select(\".no-countries\")\r\n      .style(\"bottom\", (y + mydomain.length * ls_h + 1.5 * ls_h + 30) + \"px\"); // <<< magic numbers broo\r\n\r\n    var enter = legend.enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"legend\");\r\n\r\n    enter.append(\"rect\")\r\n      .attr(\"x\", x)\r\n      .attr(\"y\", function (d, i) {\r\n        return height - (i * ls_h) - 2 * ls_h - y;\r\n      })\r\n      .attr(\"width\", ls_w)\r\n      .attr(\"height\", ls_h)\r\n      .style(\"fill\", function (d) {\r\n        return color(d);\r\n      });\r\n    enter.append(\"text\")\r\n      .attr(\"x\", x + 30)\r\n      .attr(\"y\", function (d, i) {\r\n        return height - (i * ls_h) - ls_h - 4 - y;\r\n      });\r\n\r\n    legend.selectAll(\"text\").data(mydomain)\r\n      .text(function (d, _, i) {\r\n        return legend_labels[i];\r\n      });\r\n  }\r\n  //Variables for color legend\r\n\r\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\r\n    \"tooltip hidden\");\r\n\r\n  var infoContainer = d3.select(\"body\").append(\"div\").attr(\"class\",\r\n    \"infoContainer hidden\").attr(\"id\", \"infoContainer\");\r\n\r\n  var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\r\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\r\n\r\n\r\n  var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\r\n    \"cnameDiv\").attr(\"id\", \"cname\");\r\n\r\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"detailsDiv\").attr(\"id\", \"details\");\r\n\r\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"recoDiv\").attr(\"id\", \"recommendations\");\r\n\r\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\r\n\r\n  var closeButton;\r\n\r\n  var offsetL;\r\n  var offsetT;\r\n\r\n  //---------------------- Color preferences -------------//\r\n  var themes = {\r\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\r\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\r\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\r\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\r\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\r\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\r\n  };\r\n\r\n  nextTheme = function (toTheme) {\r\n    // Go to next theme\r\n    var themeList = d3.keys(themes);\r\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\r\n    colorArray = themes[theme];\r\n\r\n    //Change body class\r\n    d3.select(document.body).attr(\"class\", theme);\r\n\r\n    // Save :)\r\n    window.localStorage.theme = theme;\r\n\r\n    // Redraw map :)\r\n    if (topo) redraw();\r\n  }\r\n  map.nextTheme = nextTheme;\r\n\r\n  nextTheme(theme);\r\n  updateScale();\r\n  updateDimensions();\r\n  setup(width, height);\r\n\r\n  function setup(width, height) {\r\n    projection = d3.geo.naturalEarth()\r\n      .translate([(width / 2), (height / 2) + height * 0.08])\r\n      .scale(width / 1.7 / Math.PI);\r\n\r\n    path = d3.geo.path().projection(projection);\r\n\r\n    svg = d3.select(\"#map-container\").append(\"svg\")\r\n      .attr(\"id\", \"map-svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\r\n      .call(zoom)\r\n      .on(\"click\", click)\r\n      .append(\"g\");\r\n\r\n    g = svg.append(\"g\");\r\n    svg.append(\"g\").attr(\"id\", \"legend\")\r\n    svg.append(\"text\").attr({\r\n      id: \"filter-text\",\r\n      class: \"legend\"\r\n    });\r\n    svg.append(\"text\").attr({\r\n      id: \"filter\",\r\n      class: \"legend\"\r\n    });\r\n  }\r\n\r\n  //Load country aliases and names\r\n  if (!window.localStorage.countries) {\r\n    d3.csv(\"assets/data/countries.csv\", function (err, countries) {\r\n      countryNames = countries;\r\n\r\n      countries.forEach(function (i) {\r\n        //Turning CSV values into numeric data\r\n        i.id = +i.id;\r\n      });\r\n\r\n      // save countries\r\n      window.localStorage.countries = JSON.stringify(countries);\r\n    });\r\n\r\n  } else {\r\n    countryNames = JSON.parse(window.localStorage.countries);\r\n  }\r\n  //Load map\r\n  d3.json(\"assets/data/world-50m.json\", function (error, world) {\r\n\r\n    var countries = topojson.feature(world, world.objects.countries).features;\r\n\r\n    topo = countries;\r\n    draw(topo, true);\r\n\r\n  });\r\n\r\n  function draw(topo, redrawMap) {\r\n    var country = g.selectAll(\".country\").data(topo);\r\n\r\n    var progress = d3.select(\"#progress-bar\").style({\r\n      \"height\": updateProgressBar() * 100 + \"%\",\r\n      \"background-color\": colorArray[6]\r\n    });\r\n    d3.select(\"#countryCount\").style({\r\n        \"background-color\": colorArray[1],\r\n        \"border-color\": colorArray[6]\r\n      })\r\n      //Show progressbar text on mouse-over\r\n      .on(\"mousemove\", function () {\r\n        d3.select(\"#progress-text\")\r\n          .transition().duration(150).style(\"opacity\", 0.9);\r\n      })\r\n      .on(\"mouseout\", function () {\r\n        d3.select(\"#progress-text\").transition().duration(150).style(\"opacity\", 0);\r\n      });\r\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/197 countries\")\r\n\r\n    //Draw countries\r\n    if (redrawMap) {\r\n      country.enter().insert(\"path\")\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"d\", path)\r\n        .attr(\"id\", function (d, i) {\r\n          return d.id;\r\n        })\r\n        .attr(\"title\", function (d, i) {\r\n          return d.properties.name;\r\n        })\r\n        .style(\"fill\", function () {\r\n          return color(0);\r\n        });\r\n    }\r\n    //Color countries\r\n    country.transition().style(\"fill\", function (d) {\r\n      switch (filter) {\r\n        case \"artists\":\r\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\r\n            color(0);\r\n          //break;\r\n        case \"scrobbles\":\r\n          return color(getCountryPlaycount(d));\r\n      }\r\n    })\r\n\r\n    //offsets for tooltips\r\n    offsetL = document.getElementById('map-container').offsetLeft;\r\n    offsetT = document.getElementById('map-container').offsetTop;\r\n\r\n    //tooltips\r\n    country\r\n      .on(\"mousemove\", function (d, i) {\r\n        var name;\r\n        var tag;\r\n        countryNames.forEach(function (e, i) {\r\n          if (e.id === d.id) {\r\n            name = e.name;\r\n            tag = e.tag;\r\n          };\r\n        })\r\n        var mouse = d3.mouse(svg.node()).map(function (d) {\r\n          return parseInt(d);\r\n        });\r\n\r\n        tooltip.classed(\"hidden\", false)\r\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\r\n            mouse[1] +\r\n            offsetT + 10) + \"px\")\r\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\r\n      })\r\n      .on(\"mouseout\", function (d, i) {\r\n        tooltip.classed(\"hidden\", true);\r\n      })\r\n      //Show div with top 10 artists for country when clicked\r\n      .on(\"click\", function (d, i) {\r\n        var name;\r\n        var tag;\r\n        var id;\r\n\r\n        clicked(d);\r\n\r\n        countryNames.forEach(function (e, i) {\r\n          if (e.id === d.id) {\r\n            name = e.name;\r\n            tag = e.tag;\r\n            id = d.id;\r\n          };\r\n        })\r\n        var mouse = d3.mouse(svg.node()).map(function (d) {\r\n          return parseInt(d);\r\n        });\r\n\r\n        closeButton\r\n          .on(\"click\", function (d, i) {\r\n            removeArtistDiv();\r\n            // zoom out map, fulhack\r\n            clicked(centered);\r\n          }) //\"stäng\" onclick slutar\r\n      }) // on click slutar\r\n\r\n  }\r\n\r\n  /*-------redraw----*/\r\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean \r\n  function redraw(redrawMap) {\r\n    updateDimensions();\r\n\r\n    if (redrawMap) {\r\n      d3.select('#map-svg').remove();\r\n      setup(width, height);\r\n    }\r\n\r\n    maxartists = d3.max(d3.keys(countryCount), function (cname) {\r\n      return countryCount[cname].length;\r\n    });\r\n    maxplaycount = d3.max(d3.keys(countryCount), function (cname) {\r\n      return getCountryPlaycount({\r\n        id: cname\r\n      });\r\n    })\r\n    updateScale();\r\n    updateLegend();\r\n\r\n    draw(topo, redrawMap);\r\n  }\r\n\r\n\r\n  /**\r\n   * Moves the map to the specified location or based on the current zoom event\r\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\r\n   * @param  {Number} sc      Optional: Scale factor\r\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\r\n   */\r\n  function move(tr, sc, animate) {\r\n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\r\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\r\n\r\n    // If move was not initiated by clicking on a country, deselect the selected country\r\n    if (!tr && !sc && centered) {\r\n      highlightCountry(false);\r\n      removeArtistDiv();\r\n      centered = null;\r\n    }\r\n\r\n    var zscale = s;\r\n    var h = height / 4;\r\n\r\n    t[0] = Math.min(\r\n      (width / height) * (s - 1),\r\n      Math.max((width * 1.2) * (1 - s), t[0])\r\n    );\r\n\r\n    t[1] = Math.min(\r\n      h * (s - 1) + h * s,\r\n      Math.max(height * (1 - s) - h * s, t[1])\r\n    );\r\n\r\n    zoom.translate(t);\r\n    zoom.scale(s);\r\n\r\n    if (animate) {\r\n      g.transition().duration(950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\r\n\r\n    } else {\r\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\r\n    }\r\n\r\n    //adjust the country hover stroke width based on zoom level\r\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\r\n  }\r\n  map.move = move;\r\n\r\n  var throttleTimer;\r\n\r\n  function throttle() {\r\n    window.clearTimeout(throttleTimer);\r\n    throttleTimer = window.setTimeout(function () {\r\n      redraw(true);\r\n      move([0, 0], 1); // Reset position\r\n    }, 200);\r\n  }\r\n\r\n\r\n  //geo translation on mouse click in map\r\n  function click() {\r\n    var latlon = projection.invert(d3.mouse(this));\r\n    // console.log(latlon);\r\n    //console.log(countryCount);\r\n  }\r\n\r\n\r\n  /*----------------------------makeArtistDiv------------------------------------------------*/\r\n  //Skapar \"details-on-demand\"-divarna.\r\n  function makeArtistDiv(d) {\r\n\r\n    //lägga till namn till detailseDiv\r\n    var name;\r\n    var tag;\r\n    var recoms;\r\n    //var id;\r\n    countryNames.forEach(function (e, i) {\r\n      if (e.id === d.id) {\r\n        name = e.name;\r\n        tag = e.tag;\r\n        //id = d.id;\r\n      };\r\n    })\r\n    d3.select(\"#recommendations\").html(\"\");\r\n    //Show country name and info div on left hand side\r\n    infoContainer\r\n      .classed(\"hidden\", false)\r\n      .transition()\r\n      .style(\"opacity\", 1)\r\n      .duration(750);\r\n\r\n    //Hide progressbar when showing \r\n    d3.selectAll(\"#countryCount, .on-map-view\")\r\n      .classed(\"hidden\", true);\r\n\r\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"class\", \"close-button\").html(\"X\");\r\n\r\n    //Populate country information div\r\n    cnameDiv\r\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\r\n      .append(\"h1\").html(name);\r\n    d3.select(\"#cnameCont\").append(\"h5\")\r\n      .html(function () {\r\n        if (countryCount[d.id])\r\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\r\n        else return \"No artists yet - Find new here ->\"\r\n      })\r\n\r\n\r\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\r\n\r\n      var currentNoArtists = 0;\r\n      var currentCount = 0;\r\n\r\n\r\n      d3.select(\"#details\").append(\"div\")\r\n        .html(\"<span>Your top artists tagged with </span><span class=\\\"demonym\\\">#\" + name + \"</span><span> or </span><span class=\\\"demonym\\\">#\" + tag + \"</span><span>: </span>\")\r\n        .attr(\"class\", \"topartists-desc\");\r\n      //Show top 5 artists\r\n\r\n      d3.select(\"#artistContainer\").append(\"i\")\r\n        .attr(\"class\", \"fa artist-control right fa-angle-right\")\r\n        .on(\"click\", function () {\r\n          showNextFive();\r\n        });\r\n\r\n      d3.select(\"#artistContainer\").append(\"i\")\r\n        .attr(\"class\", \"fa artist-control left disabled fa-angle-left\")\r\n        .on(\"click\", function () {\r\n          showPreviousFive();\r\n        });\r\n\r\n      function showNextFive() {\r\n        showArtists(currentNoArtists + 1, currentNoArtists + 5, false);\r\n        //Send event to google analytics\r\n        ga('send', {\r\n          hitType: 'event',\r\n          eventCategory: 'Artist viewer',\r\n          eventAction: 'Next five',\r\n          eventLabel: 'test'\r\n        });\r\n      }\r\n\r\n      function showPreviousFive() {\r\n        showArtists(currentNoArtists - 9, currentNoArtists - 5, false);\r\n        //Trigger GA event\r\n        ga('send', {\r\n          hitType: 'event',\r\n          eventCategory: 'Artist viewer',\r\n          eventAction: 'Previous five',\r\n          eventLabel: 'test'\r\n        });\r\n      }\r\n\r\n      function showArtists(first, last, initial) {\r\n        //Clean-up previous five artist images\r\n        d3.selectAll(\".scrobbled\").remove();\r\n        //console.log(\"displaying \"+first+\" to \"+last)\r\n\r\n        //Generate new artist images for all artists within the desired range!\r\n        for (i = first - 1; i <= last - 1; i++) {\r\n          if (countryCount[d.id][i]) {\r\n            //console.log(i+\" \"+countryCount[d.id][i].artist)\r\n            var artistDiv = d3.select(\"#details\").append(\"div\")\r\n              .attr({\r\n                \"class\": \"scrobbled artist-div lowlight\",\r\n                \"data-artist\": countryCount[d.id][i].artist\r\n              })\r\n              .on(\"click\", function () {\r\n                // Lowlight not selected artists\r\n                d3.selectAll(\".artist-div\").classed({\r\n                  \"lowlight\": true,\r\n                  \"highlight\": false\r\n                });\r\n                // Highlight selected artist\r\n                d3.select(this).classed({\r\n                  \"highlight\": true,\r\n                  \"lowlight\": false\r\n                });\r\n\r\n                makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\r\n              });\r\n\r\n            var artistLink = artistDiv.append(\"a\").style(\"display\", \"block\")\r\n            artistLink.append(\"div\")\r\n              .attr(\"class\", \"image-div\")\r\n              .style(\"background-image\", \"url(\" + \"'\" + countryCount[d.id][i].image + \"'\" + \" )\")\r\n            //.append(\"span\").attr(\"class\", \"overlayNo\").html(i+1);\r\n\r\n            var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\r\n\r\n            playCountDiv.append(\"p\")\r\n              .html(\"<b>\" + countryCount[d.id][i].artist + \"</b><br>\" + countryCount[d.id][i].playcount + \" scrobbles\")\r\n              .attr(\"class\", \"details-p\");\r\n\r\n            currentCount++;\r\n          } else {\r\n            i = last;\r\n          }\r\n        }\r\n        //\r\n        //Check to see if we are moving backwards or forwards through the list..\r\n        if (first < currentNoArtists) //Backwards!\r\n          currentNoArtists = Math.ceil((currentNoArtists - currentCount) / 5) * 5;\r\n        else if (last > currentNoArtists) //Forwards!\r\n          currentNoArtists = currentNoArtists + currentCount;\r\n        //console.log(\"currentNoArtists är \"+currentNoArtists);\r\n\r\n        //Reset the count!\r\n        currentCount = 0;\r\n\r\n        //\r\n        //Disable and enable user controls\r\n        //\r\n\r\n        //Left arrow...\r\n        if (currentNoArtists >= 10 && !initial) {\r\n          d3.selectAll(\".artist-control.left\")\r\n            .classed(\"disabled\", false)\r\n            .on(\"click\", function () {\r\n              showPreviousFive();\r\n            });\r\n        } else {\r\n          d3.selectAll(\".artist-control.left\")\r\n            .classed(\"disabled\", true)\r\n            .on('click', function () {\r\n              d3.select(this).on('click', null); //Remove click listener!\r\n            });\r\n        }\r\n        //and right...\r\n        if (currentNoArtists > countryCount[d.id].length - 1) { //There are no more artists!\r\n          d3.selectAll(\".artist-control.right\")\r\n            .classed(\"disabled\", true)\r\n            .on('click', function () {\r\n              d3.select(this).on('click', null); //Remove click listener!\r\n            });\r\n        } else {\r\n          d3.selectAll(\".artist-control.right\")\r\n            .classed(\"disabled\", false)\r\n            .on(\"click\", function () {\r\n              showNextFive();\r\n            });\r\n        }\r\n      }\r\n      //Fetch the initial five artists!! \r\n      showArtists(1, 5, true);\r\n\r\n\r\n    } else { //Om landet vi klickat på inte har några lyssnade artister... \r\n      console.log(\"landet har inga lyssnade artister\");\r\n    }\r\n    //\"Recommended\"-heading\r\n    d3.select(\"#recommendations\").append(\"h4\")\r\n      .html(\"You may like: \")\r\n      .attr(\"class\", \"topartists-desc\");\r\n\r\n    // show loading message\r\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\r\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\r\n      .attr(\"id\", \"rec-loading\")\r\n      .html(\"Looking for artists tagged #\" + tag);\r\n    recLoadingDiv.append(\"img\")\r\n      .attr({\r\n        id: \"rec-loading-img\",\r\n        src: \"assets/img/loader_horizontal.gif\"\r\n      })\r\n      .style({\r\n        display: \"inline-block\",\r\n        margin: \"0 5px\"\r\n      })\r\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\r\n\r\n\r\n\r\n    //Get list of recommendations for country based on tags!\r\n    api.getRecommendations(tag, function (taglist) {\r\n      // Return if this callback is from an old (not active) country\r\n      if (!centered || centered.id !== d.id) {\r\n        return;\r\n      }\r\n      // Show loading message\r\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\r\n\r\n      //Get list of recommendations for country based on country name!\r\n      api.getRecommendations(name, function (namelist) {\r\n        // Return if this callback is from an old (not active) country\r\n        if (!centered || centered.id !== d.id) {\r\n          return;\r\n        }\r\n        //Show loading message\r\n        recLoadingMessage.html(\"Loading images for recommended artists\");\r\n\r\n        //Join the two lists\r\n        var list = taglist.concat(namelist);\r\n\r\n        //Removing duplicates from the list!\r\n        var arr = {};\r\n        for (var i = 0; i < list.length; i++)\r\n          arr[list[i]['name']] = list[i];\r\n\r\n        list = new Array();\r\n        for (key in arr)\r\n          list.push(arr[key]);\r\n\r\n        list.sort(function (a, b) {\r\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n        });\r\n        //Get the first 20 artists\r\n        list = list.slice(0, 20);\r\n        //Randomize list\r\n        list = shuffleArray(list);\r\n\r\n        if (list.length === 0) { // Found no recommendations\r\n          recLoadingDiv.remove();\r\n          d3.select(\"#recommendations\").append(\"p\")\r\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\r\n          d3.select(\"#recommendations\").append(\"a\").attr({\r\n            href: \"https://www.last.fm/tag/\" + name,\r\n            target: \"_blank\",\r\n          }).html(\"Try searching last.fm yourself!\");\r\n        }\r\n\r\n        for (i = 0; i < Math.min(list.length, 5); i++) {\r\n          // Return if this callback is from an old (not active) country\r\n          if (centered.id !== d.id) {\r\n            return;\r\n          }\r\n\r\n          var artisturl, artistimg, artistname;\r\n\r\n          //Get url and images for recommended artists!\r\n          api.getArtistInfo(list[i].name, function (art) {\r\n            recLoadingDiv.remove();\r\n            var artisturl = art[0].url;\r\n            var artistimg = art[0].image;\r\n            var artistname = art[0].name;\r\n\r\n\r\n            var recoArtistDiv = d3.select(\"#recommendations\").insert(\"div\", \"#summaryText\").attr(\"class\", \"artist-div lowlight\");\r\n            var recoArtistLink = recoArtistDiv.append(\"a\").style(\"display\", \"block\")\r\n            //.attr(\"href\", artisturl)\r\n            //.attr(\"target\", \"_blank\");\r\n            recoArtistLink.append(\"div\")\r\n              .attr(\"class\", \"image-div\")\r\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\r\n\r\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\r\n\r\n            recoArtistInfoDiv.append(\"p\")\r\n              .html(\"<b>\" + artistname + \"</b>\")\r\n              .attr(\"class\", \"details-p\");\r\n\r\n            recoArtistDiv.on(\"click\", function () {\r\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\r\n                \"lowlight\": true,\r\n                \"highlight\": false\r\n              });\r\n\r\n              d3.select(this).classed({ // Highlight selected artist\r\n                \"highlight\": true,\r\n                \"lowlight\": false\r\n              });\r\n              makeSummaryDiv(artistname);\r\n            });\r\n\r\n          })\r\n        }\r\n\r\n\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n  function removeArtistDiv() {\r\n    api.cancelRecommendationRequests();\r\n\r\n    infoContainer.transition().style(\"opacity\", 0).duration(1000);\r\n    infoContainer.classed(\"hidden\", true);\r\n    d3.selectAll(\"#countryCount, .on-map-view\").classed(\"hidden\", false);\r\n    d3.selectAll(\".artist-div\").remove(\"div\");\r\n    d3.selectAll(\".close-button\").remove(\"button\");\r\n    d3.selectAll(\".details-h\").remove(\"p\");\r\n    d3.selectAll(\".details-h4\").remove(\"h4\");\r\n    d3.selectAll(\".recom-h4\").remove(\"h4\");\r\n    d3.selectAll(\".artist-control\").remove();\r\n    d3.selectAll(\".topartists-desc\").remove();\r\n\r\n    cnameDiv.classed(\"hidden\", true);\r\n    d3.select(\"#cnameCont\").remove(\"h1\");\r\n    d3.select(\"#cnameCont\").remove(\"h5\");\r\n  }\r\n\r\n  function makeSummaryDiv(artistname) {\r\n    var usertaglist = [];\r\n    //console.log(usertaglist);\r\n    var artisttaglist = [];\r\n\r\n    d3.select(\"#summaryText\").remove();\r\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\r\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\r\n    d3.select(\"#summaryText\").append(\"img\")\r\n      .attr({\r\n        id: \"sum-loading-img\",\r\n        src: \"assets/img/loader_horizontal.gif\"\r\n      })\r\n      .style({\r\n        display: \"inline-block\",\r\n        margin: \"0 5px\"\r\n      });\r\n\r\n    //Get artist info from Lastfm\r\n    api.getArtistInfo(artistname, function (art) {\r\n      var text = art[0].description.replace(/(\\n)+/g, '<br />');\r\n      //var text = text.substring(6);\r\n      //Get artist's top tags\r\n      artisttaglist = art[0].tags;\r\n      //Create list of user tags\r\n\r\n      //Make list of artist tags which are also user's top tags:\r\n      for (y = 0; y < 15; y++) {\r\n        for (z = 0; z < artisttaglist.length; z++) {\r\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\r\n            usertaglist.push(USER_TAGS[y].tag)\r\n          }\r\n        }\r\n      }\r\n\r\n      //Create combined tag list and remove duplicates\r\n      var taglist = usertaglist.concat(artisttaglist);\r\n      taglist = taglist.filter(function (elem, pos) {\r\n        return taglist.indexOf(elem) == pos;\r\n      })\r\n      // Remove loading text\r\n      d3.select(\"#summaryText\").html(\"\");\r\n      //Create containing div\r\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\r\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\r\n      summaryText.style(\"max-height\", h + \"px\");\r\n\r\n      summaryText.append(\"h4\").html(artistname);\r\n\r\n      //Show top 7 tags\r\n      for (i = 0; i < Math.min(taglist.length, 6); i++) {\r\n        var tagdiv = summaryText.append(\"div\").attr(\"class\", \"tagdiv\").append(\"h4\").html(\"#\" + taglist[i]);\r\n        //Mark all user tags\r\n        for (p = 0; p < usertaglist.length; p++) {\r\n          if (taglist[i] === usertaglist[p])\r\n            tagdiv.classed(\"usertag\", true);\r\n        }\r\n      }\r\n      //Display artist summary\r\n      summaryText.append(\"p\").html(text || \"No description available - <a href='https://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\r\n\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Toggles highlight of a specified country\r\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\r\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\r\n   */\r\n  function highlightCountry(highlight, countryElement) {\r\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\r\n\r\n    if (highlight) {\r\n      // Fade out all other countries\r\n      d3.selectAll(\".country\").transition()\r\n        .style(\"opacity\", function () {\r\n          return (+this.id === +countryElement.id ? 1.0 : 0.3);\r\n        })\r\n\r\n      var ce = d3.select(document.getElementById(\"\" + countryElement.id)); // d3 can't select ids that are only numbers\r\n      ce.classed(\"highlighted\", true);\r\n    } else {\r\n      // Fade in all countries\r\n      d3.selectAll(\".country\").transition()\r\n        .style(\"opacity\", 1.0)\r\n    }\r\n\r\n  }\r\n\r\n  function clicked(d) { //d är det en har klickat på\r\n\r\n    var x, y, k;\r\n    //bounding box for clicked country\r\n    var b = path.bounds(d);\r\n\r\n    getCountryPlaycount(d);\r\n\r\n    //Set scale\r\n    var modscaleX = (b[1][0] - b[0][0]);\r\n    var modscaleY = (b[1][1] - b[0][1]);\r\n\r\n    //Dom't zoom too far with small countries!\r\n    if (modscaleX < 80)\r\n      modscaleX = 80;\r\n\r\n    //Landet är inte centrerat redan\r\n    if (d && centered !== d) {\r\n      centered = d;\r\n      removeArtistDiv();\r\n      makeArtistDiv(d);\r\n      highlightCountry(true, d);\r\n\r\n\r\n      //Special rules for special countries:\r\n      switch (d.id) {\r\n        case 840: //US\r\n          k = 3;\r\n          x = -(b[1][0] + b[0][0]) / 3;\r\n          y = -(b[1][1] + b[0][1]) / 1.7;\r\n          break;\r\n        case 250: //France\r\n          k = 7.012;\r\n          x = -(b[1][0] + b[0][0]) / 1.8;\r\n          y = -(b[1][1] + b[0][1]) / 3.4;\r\n          break;\r\n        case 528: //Netherlands\r\n          k = 9.0124;\r\n          x = -(b[1][0] + b[0][0]) / 1.5;\r\n          y = -(b[1][1] + b[0][1]) / 3.3;\r\n          break;\r\n        case 643: //Russia\r\n          k = 1.9;\r\n          x = -(b[1][0] + b[0][0]) / 1.25;\r\n          y = -(b[1][1] + b[0][1]) / 2;\r\n          break;\r\n        case 554: //New Zeeland\r\n          k = 4;\r\n          x = -(b[1][0] + b[0][0]) / 0.90;\r\n          y = -(b[1][1] + b[0][1]) / 1.8;\r\n          break;\r\n        case 36: //Australia\r\n          k = 3.3;\r\n          x = -(b[1][0] + b[0][0]) / 1.8;\r\n          y = -(b[1][1] + b[0][1]) / 2.1;\r\n          break;\r\n\r\n        default: //Everybody else\r\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\r\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\r\n          y = -(b[1][1] + b[0][1]) / 2;\r\n          break;\r\n      }\r\n\r\n      //Landet är redan centrerat\r\n    } else {\r\n      x = -width / 2;\r\n      y = -height / 2 - height * 0.08;\r\n      k = 1\r\n      removeArtistDiv();\r\n      highlightCountry(false);\r\n      centered = null;\r\n\r\n      //detailsDiv.classed(\"hidden\", true);\r\n    }\r\n\r\n    var pt = projection.translate();\r\n    // Tell map to move with animation\r\n    // Basically does the same as before: translate to middle,\r\n    // then to x and y with respect to scale\r\n    move([pt[0] + x * k, pt[1] + y * k], k, true);\r\n\r\n  }\r\n\r\n  //function to add points and text to the map (used in plotting capitals)\r\n  function addpoint(lat, lon, text) {\r\n\r\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\r\n    var x = projection([lat, lon])[0];\r\n    var y = projection([lat, lon])[1];\r\n\r\n    gpoint.append(\"svg:circle\")\r\n      .attr(\"cx\", x)\r\n      .attr(\"cy\", y)\r\n      .attr(\"class\", \"point\")\r\n      .attr(\"r\", 1.5);\r\n\r\n    //conditional in case a point has no associated text\r\n    if (text.length > 0) {\r\n\r\n      gpoint.append(\"text\")\r\n        .attr(\"x\", x + 2)\r\n        .attr(\"y\", y + 2)\r\n        .attr(\"class\", \"text\")\r\n        .text(text);\r\n    }\r\n\r\n  }\r\n\r\n  /** \"PUBLUC\" FUNCTIONS **/\r\n  map.putCountryCount = function (object) {\r\n    countryCount = JSON.parse(JSON.stringify(object));\r\n    countryScore = 0;\r\n    var countryList = [];\r\n\r\n    // Extract info for the current user\r\n    d3.keys(countryCount).forEach(function (id) {\r\n      if (countryCount[id][SESSION.name]) {\r\n        countryCount[id] = countryCount[id][SESSION.name];\r\n        countryScore = countryScore + 1;\r\n        countryList.push(+id)\r\n      } else {\r\n        // delete countryCount[id];\r\n      }\r\n    })\r\n\r\n    if (topo) redraw();\r\n\r\n    window.countryScore = countryScore;\r\n\r\n  }\r\n})(window, document)","var screenshot = {};\r\n\r\n(function (window, document) {\r\n\tscreenshot.render = function () {\r\n\t\tvar titleString,\r\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\r\n\t\t\timg;\r\n\r\n\t\tvar explrLogo = new Image();\r\n\r\n\t\tvar svg = d3.select(\"#map-svg\");\r\n\t\tvar w = svg.attr(\"width\");\r\n\t\tvar h = svg.attr(\"height\");\r\n\r\n\t\tvar canvas = document.createElement(\"canvas\");\r\n\t\tvar ctx = canvas.getContext(\"2d\");\r\n\r\n\t\t// canvg(canvas, document.getElementById(\"map-svg\").outerHTML);\r\n\r\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\r\n\t\tvar textColor = window.getComputedStyle(document.body).color;\r\n\r\n\t\tvar drawCenteredText = function (obj) {\r\n\t\t\tctx.font = obj.font;\r\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\r\n\r\n\t\t\tif (obj.lineWidth) {\r\n\t\t\t\tctx.lineWidth = obj.lineWidth;\r\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\r\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcanvas.width = w;\r\n\t\tcanvas.height = h;\r\n\r\n\t\t// insert background rect\r\n\t\tsvg.insert(\"rect\", \"g\")\r\n\t\t\t.attr({\r\n\t\t\t\tid: \"background-rect\",\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\theight: \"100%\",\r\n\r\n\t\t\t})\r\n\t\t\t.style({\r\n\t\t\t\tfill: backgroundColor,\r\n\t\t\t});\r\n\r\n\t\t// Add color, font to legend text\r\n\t\td3.selectAll('.legend text, text.legend').style({\r\n\t\t\t\"font-family\": function () {\r\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\r\n\t\t\t},\r\n\t\t\t\"font-size\": function () {\r\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\r\n\t\t\t},\r\n\t\t\t\"fill\": textColor,\r\n\t\t});\r\n\t\td3.selectAll(\".legend rect\").style({\r\n\t\t\tstroke: backgroundColor,\r\n\t\t})\r\n\r\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\r\n\r\n\t\texplrLogo.onload = function () {\r\n\t\t\t/* Add text and shiiet */\r\n\t\t\t// Add text background box\r\n\t\t\tctx.save(); // To draw with different opaticy\r\n\t\t\tctx.globalAlpha = 0.6;\r\n\t\t\tctx.fillStyle = backgroundColor;\r\n\t\t\tscoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 197 countries\";\r\n\t\t\ttitleString = SESSION.name + \"'s musical world map\";\r\n\t\t\tctx.font = \"34px Patua One\";\r\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\r\n\t\t\tctx.fillStyle = textColor;\r\n\r\n\t\t\t// Add text\r\n\t\t\tctx.fillStyle = textColor;\r\n\t\t\tdrawCenteredText({\r\n\t\t\t\tstring: titleString,\r\n\t\t\t\tfont: \"34px Patua One\",\r\n\t\t\t\ty: h - 60,\r\n\t\t\t});\r\n\t\t\tdrawCenteredText({\r\n\t\t\t\tstring: scoreString,\r\n\t\t\t\tfont: \"20px Didact Gothic\",\r\n\t\t\t\ty: h - 40,\r\n\t\t\t});\r\n\r\n\t\t\t// Add explr.fm logo\r\n\t\t\tctx.restore();\r\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\r\n\r\n\t\t\td3.select(\"#background-rect\").remove();\r\n\r\n\t\t\t//console.log(canvas.toDataURL())\r\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\r\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL(\"image/png\");\r\n\t\t\t// d3.select(\"body\").append(img);\r\n\t\t\t// \r\n\r\n\t\t\tvar dataurl = canvas.toDataURL(\"image/png\");\r\n\t\t\t// console.log(\"dataurl:\", dataurl)\r\n\r\n\t\t\t// window.open(dataurl, \"_blank\");\r\n\r\n\t\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"\";\r\n\t\t\t\r\n\t\t}\r\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\r\n\t}\r\n\r\n\tscreenshot.close = function () {\r\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"display:none;\";\r\n\t}\r\n\r\n})(window, document);"]}