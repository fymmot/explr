{"version":3,"sources":["api/lastfm.js","api/api.js","script.js","map.js","screenshot.js"],"names":["api","lastfm","key","url","send","method","options","callback","xhr","gotResponse","forEach","el","replace","d3","json","e","d","setTimeout","abort","error","superCount","window","csv","err","data","alias","nest","tag","toLowerCase","map","cname","name","getCountry","artist","responseData2","tempCid","tempCountryname","tname","running","toptags","length","t","i","cid","troubleCountries","troubleLanguages","id","troubleFound","countryName","console","log","getCountries","artists","checkCount","count","select","html","SESSION","total_artists","localStorage","JSON","stringify","STORED_ARTISTS","returnList","country","returnObject","push","Date","getTime","getTags","tags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","getRecommendations","recommendations","USER_TAGS","slice","userTagObj","rollup","xhr1","tagCounts","topartists","a","num","xhr2","data2","hasTags","keys","sort","b","getFriends","document","parse","CACHED_USERS","cached_users","CACHED_NO_COUNTRIES","no_countries","addArtistsWithNoCountry","listOfArtistsWithNoCountry","concat","noCountriesListEl","_art","append","style","visibility","pointer-events","getUserTags","c","tagCount","topArtists","taglist","lim","Math","min","forbidden","nogood","user_tags","random","user","maxPage","currPage","countryCountObj","tries","randomcountrylist","getAllArtists","responseData","confirm","clear","location","reload","total","totalPages","remove","artistNames","newArtist","playcount","dataObj","leaves","artistList","filter","putCountryCount","end","loader","transition","duration","each","delay","param","href","split","addEventListener","evt","keyCode","screenshot","render","ga","hitType","eventCategory","eventAction","eventLabel","nextTheme","substr","welcomeOverlay","selectAll","updateName","friendName","attr","origin","pathname","friends","target","on","this","classed","theme","begin","floor","legend","colorArray","countryScore","clearTimeout","throttleTimer","redraw","move","height","width","topo","projection","path","svg","g","countryNames","centered","zoom","behavior","scaleExtent","countryCount","color","mydomain","maxartists","maxplaycount","updateDimensions","innerHeight","getElementById","offsetWidth","getCountryPlaycount","numbersWithSpace","x","toString","updateScale","max","pow","E","scale","threshold","domain","range","drawPlays","closeButton","offsetL","offsetT","tooltip","infoContainer","cnameDiv","themes","blue_black","green_black","pink_black","pink_white","green_white","red_white","setup","geo","naturalEarth","translate","PI","call","click","class","draw","redrawMap","background-color","border-color","enter","insert","properties","offsetLeft","offsetTop","mouse","node","parseInt","clicked","removeArtistDiv","len","ceil","legend_labels","y","text1","text","getComputedTextLength","_","updateLegend","tr","sc","animate","event","s","highlightCountry","h","invert","makeArtistDiv","currentNoArtists","currentCount","showNextFive","showArtists","showPreviousFive","first","last","initial","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","recLoadingDiv","recLoadingMessage","src","display","margin","namelist","list","arr","Array","array","j","temp","shuffleArray","art","artistimg","artistname","recoArtistDiv","usertaglist","artisttaglist","summaryText","z","elem","pos","indexOf","offsetHeight","tagdiv","p","countryElement","k","bounds","modscaleX","modscaleY","pt","toTheme","themeList","body","countries","world","topojson","feature","objects","features","object","countryList","drawCenteredText","obj","ctx","font","fillText","string","w","measureText","lineWidth","strokeStyle","strokeText","titleString","explrLogo","Image","canvas","createElement","getContext","backgroundColor","getComputedStyle","textColor","fill","font-family","font-size","stroke","canvg","XMLSerializer","serializeToString","onload","save","globalAlpha","fillStyle","scoreString","fillRect","restore","drawImage","toDataURL","getElementsByClassName","close"],"mappings":"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","file":"../all.min.js","sourcesContent":["var api = api || {};\r\n\r\napi.lastfm = {};\r\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\r\napi.lastfm.url = \"https://ws.audioscrobbler.com/2.0/\";\r\n\r\n/**\r\n* Send an API call to last.fm\r\n* @param {String} method    The method name (e.g. \"library.getartists\")\r\n* @param {Array} options    An array of tuples (arrays with two elements)\r\n                            with options for the request: [\"key\", \"value\"]\r\n* @param {Function} callback    The callback function to call with the data\r\n                                returned from the request. Takes two arguments,\r\n                                error and data (callback(error, data))\r\n*/\r\napi.lastfm.send = function(method, options, callback) {\r\n\tvar url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\r\n\t\tapi.lastfm.key + \"&format=json\";\r\n\tvar xhr, gotResponse;\r\n\r\n\toptions.forEach(function(el) {\r\n\t\turl += \"&\" + el[0] + \"=\" +\r\n\t\t\t(el[1] + \"\")\r\n\t\t\t.replace(\"&\", \"%26\")\r\n\t\t\t.replace(\"/\", \"%2F\")\r\n\t\t\t.replace(\"+\", \"%2B\")\r\n\t\t\t.replace(\"\\\\\", \"%5C\");\r\n\t});\r\n\r\n\txhr = d3.json(url, function(e, d) {\r\n\t\tgotResponse = true;\r\n\t\tcallback(e, d);\r\n\t});\r\n\r\n\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\r\n\tsetTimeout(function() {\r\n\t\tif (!gotResponse) {\r\n\t\t\t//console.log(\"GET \" + url + \" took to long, aborting\");\r\n\t\t\txhr.abort();\r\n\t\t\tcallback(\"ERROR\", {\r\n\t\t\t\terror: \"Took to long to respond\"\r\n\t\t\t});\r\n\t\t}\r\n\t}, 20000);\r\n\r\n\treturn xhr;\r\n}","/* requires:\r\napi\\lastfm.js\r\n*/\r\n\r\nvar api = api || {};\r\nvar superCount = 0;\r\n\r\n(function(window, document) {\r\n\td3.csv(\"assets/data/countries.csv\", function(err, data) {\r\n\t\talias = d3.nest()\r\n\t\t\t.key(function(d) {\r\n\t\t\t\treturn d.tag.toLowerCase();\r\n\t\t\t})\r\n\t\t\t.map(data);\r\n\r\n\t\tcname = d3.nest()\r\n\t\t\t.key(function(d) {\r\n\t\t\t\treturn d.name.toLowerCase();\r\n\t\t\t})\r\n\t\t\t.map(data);\r\n\r\n\t\t/**\r\n\t\t * Tries to find out the country for a specified artist.\r\n\t\t * @param  {String}   artist   Name of the artist to get country for\r\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\r\n\t\t *                             The callback function takes one argument, this object:\r\n\t\t *\r\n\t\t *                             {\r\n\t\t *                             \t\"artist\": <artist name>,\r\n\t\t *                             \t\"country\": <country name>,\r\n\t\t *                             \t\"id\": <country id>,\r\n\t\t *                             \t\"tag\": <the tag that decided the country (e.g. Swedish for Sweden)>\r\n\t\t *                             }\r\n\t\t *\r\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\r\n\t\t *\r\n\t\t */\r\n\t\tapi.getCountry = function(artist, callback) {\r\n\t\t\t// Get artists country code here, from last.fm or whatever\r\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err,\r\n\t\t\t\tresponseData2) {\r\n\t\t\t\tvar running = true; // To stop searching when a country-tag has been found\r\n\r\n\t\t\t\t// Return if something failed\r\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\r\n\t\t\t\t\tresponseData2.toptags.tag.length) {\r\n\t\t\t\t\tcallback({\r\n\t\t\t\t\t\t\"artist\": artist\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t//Spara tillfälligt bästa träffen\r\n\t\t\t\tvar tempCid;\r\n\t\t\t\tvar tempCountryname;\r\n\t\t\t\tvar tname;\r\n\t\t\t\t// Else check for country-tags in the artist's tags\r\n\t\t\t\tresponseData2.toptags.tag.forEach(function(t, i) {\r\n\t\t\t\t\tif (running) {\r\n\t\t\t\t\t\ttname = t.name.toLowerCase();\r\n\t\t\t\t\t\tvar cid;\r\n\r\n\t\t\t\t\t\t//Lista med taggar vi vill dubbelkolla\r\n\t\t\t\t\t\tvar troubleCountries = [\"georgia\", \"ireland\"];\r\n\t\t\t\t\t\tvar troubleLanguages = [\"spanish\", \"french\", \"english\", \"portuguese\", \"russian\", \"italian\", \"japanese\", \"korean\", \"indian\", \"swedish\", \"irish\"];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttry { //Testar taggen mot landsnamn\r\n\t\t\t\t\t\t\tif (cname[tname] && cname[tname][0].id) { // sweden->sweden\r\n\t\t\t\t\t\t\t\t//Kollar lista med specialfall som ofta blir fel\r\n\t\t\t\t\t\t\t\tvar troubleFound = false;\r\n\t\t\t\t\t\t\t\tfor (i=0; i<troubleCountries.length; i++){\r\n\t\t\t\t\t\t\t\t\tif (cname[tname][0].name.toLowerCase() == troubleCountries[i]){\r\n\t\t\t\t\t\t\t\t\t\ttroubleFound = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (!troubleFound){\t//Den här taggen är inget problem, fortsätt som vanligt\r\n\t\t\t\t\t\t\t\t\t\tcid = cname[tname][0].id; \r\n\t\t\t\t\t\t\t\t\t\tcountryName = cname[tname][0].name;\r\n\t\t\t\t\t\t\t\t} else { //Den här taggen finns med i listan, spara den temporärt och se om vi hittar något bättre!\r\n\t\t\t\t\t\t\t\t\ttempCid = cname[tname][0].id;\r\n\t\t\t\t\t\t\t\t\ttempCountryname = cname[tname][0].name;\r\n\t\t\t\t\t\t\t\t\t//console.log(\"Trouble found!     \" + tname);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t//Testar taggen mot demonymer\r\n\t\t\t\t\t\t\t} else if (alias[tname] && alias[tname][0].id) { // swedish->sweden\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar troubleFound = false;\r\n\t\t\t\t\t\t\t\tfor (i=0; i<troubleLanguages.length; i++){\r\n\t\t\t\t\t\t\t\t\tif (alias[tname][0].tag.toLowerCase() == troubleLanguages[i]){\r\n\t\t\t\t\t\t\t\t\t\ttroubleFound = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (!troubleFound){\t//Den här taggen är inget problem, fortsätt som vanligt\r\n\t\t\t\t\t\t\t\t\t\tcid = alias[tname][0].id;\r\n\t\t\t\t\t\t\t\t\t\tcountryName = alias[tname][0].name;\r\n\t\t\t\t\t\t\t\t} else { //Den här taggen finns med i listan, spara den temporärt och se om vi hittar något bättre!\r\n\t\t\t\t\t\t\t\t\ttempCid = alias[tname][0].id;\r\n\t\t\t\t\t\t\t\t\ttempCountryname = alias[tname][0].name;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (cid) { // Vi hittade en bra tagg, kör som bvnligt!\r\n\t\t\t\t\t\t\t\tcallback({ // Call callback method\r\n\t\t\t\t\t\t\t\t\t\"artist\": artist,\r\n\t\t\t\t\t\t\t\t\t\"id\": cid,\r\n\t\t\t\t\t\t\t\t\t\"tag\": tname,\r\n\t\t\t\t\t\t\t\t\t\"name\": countryName,\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\trunning = false; // Stop searching for country-tags\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\t//console.log(artist, tname)\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (running) { // Vi hittade inget perfekt land. \r\n\t\t\t\t  if (tempCid){//go with backup plan, använd den problematiska taggen\r\n\t\t\t\t  \t\t\tconsole.log(\"En möjligen felaktig artist! \" + artist)\r\n\t\t\t\t\t\t\tcallback({ // Call callback method\r\n\t\t\t\t\t\t\t\t\"artist\": artist,\r\n\t\t\t\t\t\t\t\t\"id\": tempCid,\r\n\t\t\t\t\t\t\t\t\"tag\": tname,\r\n\t\t\t\t\t\t\t\t\"name\": tempCountryname,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\trunning = false; // Stop searching for country-tags\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tcallback({\r\n\t\t\t\t\t\t\t\"artist\": artist\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a list of country objects for a list of artist names.\r\n\t\t *\r\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\r\n\t\t * @param  {Array}   artists  Array of artist names (String)\r\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\r\n\t\t *                             containing only those artists that have a country\r\n\t\t *                             associated with them. For object structure, see api.getCountry\r\n\t\t */\r\n\t\tapi.getCountries = function(artists, callback) {\r\n\t\t\tvar returnList = [],\r\n\t\t\t\tcount = 0;\r\n\t\t\t/**\r\n\t\t\t * Increases a count and checks if we've tried\r\n\t\t\t * to get country for all artists\r\n\t\t\t */\r\n\t\t\tvar checkCount = function() {\r\n\t\t\t\tcount++;\r\n\t\t\t\tsuperCount++;\r\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>Feel free to start<br>exploring!\");\r\n\t\t\t\tif (count === artists.length) {\r\n\t\t\t\t\t// We done, save artists and call back\r\n\t\t\t\t\twindow.localStorage.artists = JSON.stringify(STORED_ARTISTS);\r\n\t\t\t\t\tcallback(returnList);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Get countries for all artists\r\n\t\t\tartists.forEach(function(el, i) {\r\n\t\t\t\t// first check stored artists to see if we've already checked this artist\r\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\r\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\r\n\t\t\t\t\treturnObject.artist = el;\r\n\t\t\t\t\treturnList.push(returnObject);\r\n\t\t\t\t\tcheckCount();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar start = new Date().getTime();\r\n\r\n\t\t\t\t\tapi.getCountry(el, function(data) {\r\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\r\n\t\t\t\t\t\t// console.error(data)\r\n\r\n\t\t\t\t\t\t// if (data.name) {\r\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\r\n\t\t\t\t\t\t\t\"id\": data.id,\r\n\t\t\t\t\t\t\t\"name\": data.name,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\treturnList.push(data);\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\r\n\r\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\r\n\r\n\r\n\t\t\t\t\t\tcheckCount();\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n\r\n\t/**\r\n\t * Get all tags for an artist.\r\n\t * @param  {String}   artist   Artist name\r\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\r\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\r\n\t */\r\n\tapi.getTags = function(artist, callback) {\r\n\t\t// Check if artist tags are already saved, if so return them\r\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\r\n\t\t\t// console.log(\"Had in store, no api call\");\r\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\r\n\t\t} else {\r\n\t\t\t// Create object in localstorage\r\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\r\n\t\t\tSTORED_ARTISTS[artist].tags = [];\r\n\r\n\t\t\t// Get from lastfm\r\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\r\n\t\t\t\tfunction(err, responseData2) {\r\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\r\n\t\t\t\t\twindow.localStorage.artists = JSON.stringify(STORED_ARTISTS);\r\n\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tapi.getArtistInfo = function(artist, callback) {\r\n\t\tvar artistInfo = [];\r\n\r\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\r\n\t\t\t//Creating a list of tag names\r\n\t\t\tvar tagnamelist = [];\r\n\t\t\tif (data1.artist.tags.tag) {\r\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\r\n\t\t\t\t\ttagnamelist.push(t.name);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tartistInfo.push({\r\n\t\t\t\tname: artist,\r\n\t\t\t\turl: data1.artist.url,\r\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\r\n\t\t\t\tdescription: data1.artist.bio.summary,\r\n\t\t\t\ttags: tagnamelist\r\n\t\t\t})\r\n\t\t\tcallback(artistInfo);\r\n\t\t})\r\n\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\r\n\t * Also included are which tags matched.\r\n\t *\r\n\t * Calling this function cancels previous requests initiated by this function.\r\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\r\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\r\n\t */\r\n\tvar recommendationRequests = [];\r\n\tvar cancelRecommendationRequests = function() {\r\n\t\trecommendationRequests.forEach(function(xhr) {\r\n\t\t\txhr.abort();\r\n\t\t});\r\n\r\n\t\trecommendationRequests = [];\r\n\t}\r\n\tapi.getRecommendations = function(country, callback) {\r\n\t\tcancelRecommendationRequests();\r\n\r\n\t\tvar recommendations = [];\r\n\r\n\t\t// get top tags for user\r\n\t\tvar toptags = USER_TAGS.slice(0, 15);\r\n\t\t// make tag list to an object (back n forthss)\r\n\t\tvar userTagObj = d3.nest().key(function(d) {\r\n\t\t\treturn d.tag;\r\n\t\t}).rollup(function(d) {\r\n\t\t\treturn d[0].count;\r\n\t\t}).map(toptags);\r\n\r\n\r\n\t\t//console.log(\"Got top tags for user!\")\r\n\r\n\t\t// Get top artists for tag country\r\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\r\n\t\t\t// Gotta count matching tags to then sort\r\n\t\t\tvar tagCounts = {};\r\n\r\n\t\t\t// Get the tags for these artists\r\n\t\t\t//console.log(data1, err)\r\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\r\n\t\t\t\tcallback([]);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar artists = data1.topartists.artist;\r\n\r\n\t\t\tartists.forEach(function(a, num) {\r\n\t\t\t\ttagCounts[a.name] = [];\r\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\r\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\r\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\r\n\t\t\t\t\tif (hasTags) {\r\n\t\t\t\t\t\t// Compare top 10 tags to user tags\r\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\r\n\t\t\t\t\t\t\treturn d.name;\r\n\t\t\t\t\t\t}).map(data2.toptags.tag);\r\n\r\n\t\t\t\t\t\t// Get rid of justin bieber\r\n\t\t\t\t\t\tif (tags[country]) {\r\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\r\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (num === artists.length - 1) {\r\n\t\t\t\t\t\t//console.log(\"We've gotten tag counts for all artists, make a list!\")\r\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\r\n\t\t\t\t\t\t\trecommendations.push({\r\n\t\t\t\t\t\t\t\tname: d,\r\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\r\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\r\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t//console.log(recommendations)\r\n\t\t\t\t\t\tcallback(recommendations);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\r\n\t\t\t\trecommendationRequests.push(xhr2);\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\trecommendationRequests.push(xhr1);\r\n\t}\r\n\r\n\tapi.getFriends = function(callback) {\r\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\r\n\t}\r\n})(window, document);","/* requires:\r\napi\\api.js\r\napi\\lastfm.js\r\n*/\r\n\r\nvar STORED_ARTISTS = JSON.parse(window.localStorage.artists || \"{}\");\r\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\r\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\r\nvar SESSION = {};\r\nvar CACHED_NO_COUNTRIES = JSON.parse(window.localStorage.no_countries || \"{}\");\r\n\r\n(function () {\r\n    // user = prompt(\"Input your user name, get top 20 artists\")\r\n    var user, currPage = 1,\r\n        maxPage;\r\n    var countryCountObj = {};\r\n    var count = 0;\r\n    var tries = 0;\r\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\r\n    var listOfArtistsWithNoCountry = [];\r\n\r\n    /**\r\n     * adds artists with no country to the array of artists with\r\n     * no country :)\r\n     * \r\n     * @param {*} data Response from api.getCountries; array of\r\n     * artists that may or may not have country\r\n     */\r\n    var addArtistsWithNoCountry = function (data) {\r\n        listOfArtistsWithNoCountry = listOfArtistsWithNoCountry.concat(data);\r\n\r\n        var noCountriesListEl = d3.select(\".no-countries ul\");\r\n        data.forEach(function (_art) {\r\n            noCountriesListEl.append(\"li\").html('<a href=\"' + _art.url + '\" target=\"blank\" class=\"no-countries__link\">' + _art.artist + '</a>');\r\n        })\r\n\r\n        window.localStorage.no_countries = JSON.stringify(listOfArtistsWithNoCountry);\r\n\r\n        if (listOfArtistsWithNoCountry.length) {\r\n            d3.select(\".no-countries\").style({\r\n                visibility: \"visible\",\r\n                \"pointer-events\": \"all\",\r\n            });\r\n        }\r\n    }\r\n\r\n    var getAllArtists = function () {\r\n        console.log(\"get artists\")\r\n        \r\n        api.lastfm.send(\"library.getartists\", [\r\n                [\"user\", user],\r\n                [\"limit\", 50],\r\n                [\"page\", currPage]\r\n            ],\r\n            function (error, responseData) {\r\n                // Special case for unfortunate users\r\n                if (responseData === \"\") {\r\n                    console.error('Got empty string (\"\") as response, skipping page.')\r\n                    currPage++;\r\n                    getAllArtists();\r\n                    return;\r\n                }\r\n                if (error || responseData.error) {\r\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\r\n\r\n                    // Try again, but not forever\r\n                    if (tries++ < 5) {\r\n                        getAllArtists();\r\n\r\n                        // TODO: Show erorr message ;)\r\n                    } else {\r\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\r\n                        if (refresh) {\r\n                            window.localStorage.clear();\r\n                            window.localStorage.artists = JSON.stringify(STORED_ARTISTS);\r\n                            window.location.reload();\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                tries = 0;\r\n\r\n                if (currPage === 1) {\r\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\r\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\r\n\r\n                    if (SESSION.total_artists === 0) {\r\n                        d3.select(\".bubblingG\").remove();\r\n                        d3.select(\"#loading-text\")\r\n                            .html(\"You haven't listened to any<br> artists yet. Start scrobbling with <br>\\\r\n                                                        <a href='http://evolver.fm/2012/05/08/how-to-scrobble-to-last-fm-from-itunes-\" +\r\n                                \"spotify-and-more/'>your favorite music player!</a>\");\r\n                        d3.select(\".loader\").style(\"pointer-events\", \"all\");\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                currPage++;\r\n                // console.log(\"Artists done, get countries\");\r\n\r\n                // Save artist data to localStorage (and create a list of artist names)\r\n                var artistNames = []\r\n                responseData.artists.artist.forEach(function (newArtist) {\r\n                    var a = STORED_ARTISTS[newArtist.name] || {};\r\n\r\n                    a.playcount = +newArtist.playcount;\r\n                    a.url = newArtist.url;\r\n\r\n                    a.image = [newArtist.image[3]];\r\n\r\n                    STORED_ARTISTS[newArtist.name] = a;\r\n                    artistNames.push(newArtist.name);\r\n                })\r\n                window.localStorage.artists = JSON.stringify(STORED_ARTISTS);\r\n                // var n = count++;\r\n\r\n                // Get country for all artists\r\n                api.getCountries(artistNames,\r\n                    function (data) {\r\n                        // Count plays for each country?\r\n                        // countryCountList = countryCountList.concat(data);\r\n                        var dataObj = d3.nest() //Gör så att man kan slå upp på land-id och få upp en lista på artister.\r\n                            .key(function (d) {\r\n                                return d.id;\r\n                            })\r\n                            .rollup(function (leaves) { //gör så att man får en lista på alla artister för ett land.\r\n                                return leaves;\r\n                            })\r\n                            .map(data); //Skickar in en lista med ett objekt för varje artist.\r\n\r\n                        d3.keys(dataObj).forEach(function (id) {\r\n                            countryCountObj[id] = countryCountObj[id] || {};\r\n                            countryCountObj[id][user] = countryCountObj[id][user] || [];\r\n                            var artistList = countryCountObj[id][user]; // list of artists for a country\r\n\r\n                            // if (artistList) {\r\n                            artistList = artistList.concat(dataObj[id]);\r\n\r\n                            //Lägger på de nya dataObj-elementen i countryCountObj-listan.\r\n                            // } else {\r\n                            //     artistList = dataObj[id];\r\n                            // }\r\n\r\n                            artistList.forEach(function (el, i) {\r\n                                //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\r\n                                artistList[i].image = STORED_ARTISTS[el.artist].image[0][\"#text\"];\r\n                                artistList[i].url = STORED_ARTISTS[el.artist].url;\r\n                                artistList[i].playcount = STORED_ARTISTS[el.artist].playcount;\r\n                                // if (artistList[i].users) {\r\n                                //     artistList[i].users.push(user);\r\n                                // } else {\r\n                                //     artistList[i].users = [user];\r\n                                // }\r\n                            });\r\n                            //countryCountObj är en lista med \"country\"-objekt. \r\n                            //Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\r\n                            //dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\r\n                            countryCountObj[id][user] = artistList;\r\n                        })\r\n\r\n                        addArtistsWithNoCountry(data.filter(function (artist) {\r\n                            return !artist.id; // && artist.artist && artist.url;\r\n                        }));\r\n\r\n                        map.putCountryCount(countryCountObj);\r\n\r\n                        if (currPage > maxPage) {\r\n                            end();\r\n                            return;\r\n                        } else {\r\n                            getAllArtists();\r\n                        }\r\n                    });\r\n            });\r\n    }\r\n\r\n    var getRecommendations = function () {\r\n        var currPage = 1,\r\n            limit = 50,\r\n            maxPage = 1000 / limit;\r\n        var countriesList = JSON.parse(window.localStorage.countries);\r\n\r\n        var countriesObj = d3.nest().key(function (d) {\r\n            return d.name;\r\n        }).rollup(function (d) {\r\n            return d[0];\r\n        }).map(countriesList);\r\n        // Get \"all\" artists from one country\r\n        // countriesList.forEach(function(country){\r\n\r\n        // });\r\n        api.lastfm.send(\"tag.gettopartists\", [\r\n            [\"tag\", \"swedish\"],\r\n            [\"limit\", limit],\r\n            [\"page\", currPage]\r\n        ], function (err, data) {\r\n            var artists = data.topartists.artist;\r\n            // For each artist, get their tags\r\n            artists.forEach(function (a) {\r\n                api.lastfm.send(\"artist.gettoptags\", [\r\n                    [\"artist\", a.name]\r\n                ], function (err, data) {\r\n                    // console.log(data);\r\n                })\r\n            })\r\n            // Look for user's top tags in artist tags\r\n            // If a lot of matches, save to recommended artists for that country\r\n        });\r\n\r\n    }\r\n\r\n    var getUserTags = function (err, data) {\r\n        /*if (err || data.error) {\r\n            console.error(\"Erorr in getUserTags\", err, data);\r\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\r\n            window.location.replace(window.location.origin + window.location.pathname);\r\n        }*/\r\n\r\n        var c = 0;\r\n\r\n        var tagCount = {};\r\n\r\n        //console.log(\"Gotta get tags\")\r\n\r\n        var topArtists = data.topartists.artist;\r\n        var done = function () {\r\n            // make list of tags to sort\r\n            USER_TAGS = [];\r\n            //Remove specific tags from user's top tags\r\n            forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\", \"seen live\", \"english\", \"singer-songwriter\", \"spanish\", \"french\"];\r\n            d3.keys(tagCount).forEach(function (el) {\r\n                var nogood = false\r\n                for (i = 0; i < forbidden.length; i++) {\r\n                    if (el === forbidden[i]) {\r\n                        nogood = true;\r\n                    }\r\n                }\r\n                if (!nogood) {\r\n                    USER_TAGS.push({\r\n                        tag: el,\r\n                        count: tagCount[el]\r\n                    });\r\n                }\r\n            })\r\n            USER_TAGS.sort(function (a, b) {\r\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n            });\r\n            console.log(\"Done getting tags, saved to localStorage.user_tags\")\r\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\r\n        }\r\n\r\n\r\n        topArtists.forEach(function (el, i) {\r\n            // get top ten tags and save to users tag count....\r\n            setTimeout(function () { // Set timeout to not stop artists from loading...\r\n                api.lastfm.send(\"artist.gettoptags\", [\r\n                    [\"artist\", el.name]\r\n                ], function (err, data) {\r\n                    taglist = data.toptags.tag;\r\n                    if (taglist) {\r\n                        var lim = Math.min(taglist.length, 10);\r\n                        for (var i = 0; i < lim; i++) {\r\n                            if (tagCount[taglist[i].name]) {\r\n                                tagCount[taglist[i].name]++;\r\n                            } else {\r\n                                tagCount[taglist[i].name] = 1;\r\n                            }\r\n                        }\r\n                        // console.log(c, topArtists.length)\r\n                    }\r\n\r\n                    c++;\r\n                    if (c == topArtists.length - 1) {\r\n                        done();\r\n                    }\r\n                });\r\n            }, Math.random() * 3000);\r\n        });\r\n\r\n    }\r\n\r\n    var begin = function () {\r\n        //Send analytics event\r\n        ga('send', 'event', 'splash screen', 'Go!', 'test');\r\n        // fade out username input box\r\n        var welcomeOverlay = d3.select(\"#welcome-container\");\r\n        welcomeOverlay.transition().duration(2000)\r\n            .style(\"opacity\", 0)\r\n            .each(\"end\", function () {\r\n                welcomeOverlay.remove();\r\n            });\r\n\r\n        // Fade in loader\r\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\r\n        d3.select(\"#loading-text\").html(\"Getting library...\");\r\n        setTimeout(function () {\r\n            if (d3.select(\"#loading-text\").html() === \"Getting library...\") {\r\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\r\n\r\n                setTimeout(function () {\r\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\r\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\r\n                            .style(\"pointer-events\", \"all\");\r\n                    }\r\n                }, 8000);\r\n            }\r\n        }, 8000);\r\n\r\n        // Fade in legend, progress-bar etc\r\n        d3.selectAll(\".on-map-view\").style({\r\n            \"visibility\": \"visible\",\r\n            //            \"opacity\": 0\r\n        }) //.transition().duration(1000).style(\"opacity\", 1);\r\n\r\n        // Get user tags\r\n        api.lastfm.send(\"user.gettopartists\", [\r\n            [\"user\", user],\r\n            [\"period\", \"12months\"],\r\n            [\"limit\", \"50\"]\r\n        ], getUserTags);\r\n\r\n        // Get user friends\r\n        api.getFriends(function (err, data) {\r\n            try {\r\n                var friends = data.friends.user;\r\n                var i = 0;\r\n                var friendName = d3.select(\"#friend-name\");\r\n\r\n                var updateName = function () {\r\n                    friendName.html(\"\");\r\n                    friendName.append(\"a\").attr({\r\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\r\n                        target: \"_self\",\r\n                    }).html(friends[i].name);\r\n                }\r\n\r\n                d3.selectAll(\".arrow\").on(\"click\", function () {\r\n                    if (d3.select(this).classed(\"left\")) {\r\n                        // Go left\r\n                        i = (i === 0 ? friends.length - 1 : i - 1);\r\n                    } else {\r\n                        // Go right\r\n                        i = (i + 1) % friends.length;\r\n                    }\r\n\r\n                    updateName();\r\n                })\r\n\r\n                updateName();\r\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\r\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\r\n\r\n            } catch (e) {\r\n                console.error(\"getFriends()\", e);\r\n                d3.select(\"#friends\").html(\"&nbsp;Couldn't find any<br>friends on last.fm :(&nbsp;\")\r\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\r\n            }\r\n        });\r\n\r\n        if (CACHED_USERS[user]) {\r\n            // TODO: use timestamp\r\n            console.log(\"No new artists on last.fm!\");\r\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\r\n            addArtistsWithNoCountry(JSON.parse(window.localStorage.no_countries));\r\n            \r\n            // Get number of artists for screenshot etc.\r\n            api.lastfm.send(\"library.getartists\", [\r\n                    [\"user\", user],\r\n                    [\"limit\", 1],\r\n                    [\"page\", 1]\r\n                ],\r\n                function (error, responseData) {\r\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\r\n                });\r\n\r\n            setTimeout(function () {\r\n                map.putCountryCount(countryCountObj);\r\n                end();\r\n            }, 1000)\r\n        } else {\r\n            // Save theme\r\n            var theme = window.localStorage.theme;\r\n            window.localStorage.clear();\r\n            if (theme) {\r\n                window.localStorage.theme = theme;\r\n            }\r\n            getAllArtists();\r\n        }\r\n    }\r\n\r\n    var end = function () {\r\n        // We're done, fade out loader\r\n        var loader = d3.select(\".loader\");\r\n        loader.transition().duration(2000)\r\n            .style(\"opacity\", 0)\r\n            .each(\"end\", function () {\r\n                loader.remove();\r\n            });\r\n        //Also fade out progress bar text (after a short delay)\r\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\r\n            .style(\"opacity\", 0);\r\n\r\n        CACHED_USERS = {};\r\n        CACHED_USERS[user] = new Date().getTime();\r\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\r\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\r\n    }\r\n\r\n    // // Set theme\r\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\r\n\r\n    // Try to get username from url\r\n    var param = window.location.href.split(\"username=\")[1];\r\n\r\n    if (param) { // We already have a user\r\n        // set up keyboard shortcuts\r\n        window.addEventListener(\"keydown\", function (evt) {\r\n            switch (evt.keyCode) {\r\n                // s\r\n                case 83:\r\n                    screenshot.render();\r\n                    //Send google analytics event\r\n                    ga('send', {\r\n                        hitType: 'event',\r\n                        eventCategory: 'Hotkeys',\r\n                        eventAction: 'Take screenshot',\r\n                        eventLabel: 'test'\r\n                    });\r\n                    break;\r\n                    // t\r\n                case 84:\r\n                    nextTheme();\r\n                    //Send google analytics event\r\n                    ga('send', {\r\n                        hitType: 'event',\r\n                        eventCategory: 'Hotkeys',\r\n                        eventAction: 'Cycle theme',\r\n                        eventLabel: 'test'\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        if (param.length > 15) {\r\n            param = param.substr(0, 15);\r\n        }\r\n        user = param;\r\n        SESSION.name = param;\r\n        begin();\r\n    } else {\r\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\r\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\r\n    }\r\n})();","/* requires:\r\napi\\api.js\r\napi\\lastfm.js\r\nscript.js\r\n*/\r\n\r\nvar map = {};\r\n//White theme default:\r\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\r\nvar legend;\r\nvar countryScore = 0;\r\n\r\n\r\n(function(window, document) {\r\n  d3.select(window).on(\"resize\", throttle);\r\n\r\n  var doThrottle = false;\r\n  var filter = \"artists\"; // filter by artists or plays\r\n\r\n  var zoom = d3.behavior.zoom()\r\n    .scaleExtent([1, 9])\r\n    .on(\"zoom\", move);\r\n\r\n\r\n  var height, width;\r\n\r\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\r\n  countryCount = {};\r\n\r\n  //Variables needed to update scale and legend\r\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\r\n  var maxartists = 1,\r\n    maxplaycount = 0;\r\n\r\n  //Setting color and range to be used\r\n  var color;\r\n\r\n  // Set theme\r\n  var theme = window.localStorage.theme || \"pink_white\";\r\n\r\n  map.drawPlays = function() {\r\n    filter = \"scrobbles\";\r\n    redraw();\r\n  };\r\n\r\n  /**\r\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\r\n   */\r\n  function updateDimensions() {\r\n    height = window.innerHeight - 5;\r\n    width = document.getElementById('map-container').offsetWidth;\r\n  }\r\n\r\n  //Returns total number of plays for country\r\n  function getCountryPlaycount(c) {\r\n    if (countryCount[c.id]) {\r\n      var count = 0;\r\n      for (i = 0; i < countryCount[c.id].length; i++) {\r\n        count += countryCount[c.id][i].playcount;\r\n      }\r\n      return count;\r\n    } else return 0;\r\n  };\r\n\r\n\r\n  function updateProgressBar() {\r\n    var progressPro = (countryScore / 197);\r\n    return progressPro;\r\n  }\r\n;\r\n\r\n  //Function to format numbers over 1000 with a space\r\n  function numbersWithSpace(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n  }\r\n  /**\r\n   * Randomize array element order in-place.\r\n   * Using Fisher-Yates shuffle algorithm.\r\n   */\r\n  function shuffleArray(array) {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n  //Function to remove duplicates from arrays\r\n  function onlyUnique(value, index, self) {\r\n    return self.indexOf(value) === index;\r\n  }\r\n\r\n  function updateScale() {\r\n    var max = -1;\r\n    switch (filter) {\r\n      case \"artists\":\r\n        max = maxartists;\r\n        for (i = 0; i < 5; i++) {\r\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1));\r\n        }\r\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\r\n        break;\r\n      case \"scrobbles\":\r\n        max = maxplaycount;\r\n        for (i = 0; i < 7; i++) {\r\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\r\n        }\r\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\r\n        break;\r\n    };\r\n\r\n\r\n    color = d3.scale.threshold()\r\n      .domain(mydomain)\r\n      .range(colorArray);\r\n  };\r\n\r\n  function updateLegend() {\r\n    //Remove decimals from domain\r\n    var x = 0;\r\n    var len = mydomain.length\r\n    while (x < len) {\r\n      mydomain[x] = Math.ceil(mydomain[x]);\r\n      x++;\r\n    };\r\n\r\n    //Array of text\r\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\r\n\r\n    //Create Legend\r\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\r\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\r\n      .data(mydomain);\r\n\r\n    //Color box sizes\r\n    var ls_w = 20,\r\n      ls_h = 20;\r\n    var x = width * 0.03;\r\n    var y = height * 0.03;\r\n\r\n    // Add legend filter text\r\n    var text1 = svg.select(\"#filter-text\")\r\n      .attr(\"x\", x)\r\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\r\n      .text(\"Number of \");\r\n    var text2 = svg.select(\"#filter\")\r\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\r\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\r\n      .text(filter);\r\n    text2.on(\"click\", function() {\r\n      // Toggle filter method\r\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\r\n      redraw();\r\n    });\r\n\r\n    var noCountryArtists = d3.select(\".no-countries\")\r\n      .style(\"bottom\", (y + mydomain.length * ls_h + 1.5 * ls_h + 30) + \"px\"); // <<< magic numbers broo\r\n\r\n    var enter = legend.enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"legend\");\r\n\r\n    enter.append(\"rect\")\r\n      .attr(\"x\", x)\r\n      .attr(\"y\", function(d, i) {\r\n        return height - (i * ls_h) - 2 * ls_h - y;\r\n      })\r\n      .attr(\"width\", ls_w)\r\n      .attr(\"height\", ls_h)\r\n      .style(\"fill\", function(d) {\r\n        return color(d);\r\n      });\r\n    enter.append(\"text\")\r\n      .attr(\"x\", x + 30)\r\n      .attr(\"y\", function(d, i) {\r\n        return height - (i * ls_h) - ls_h - 4 - y;\r\n      });\r\n\r\n    legend.selectAll(\"text\").data(mydomain)\r\n      .text(function(d, _, i) {\r\n        return legend_labels[i];\r\n      });\r\n  }\r\n  //Variables for color legend\r\n\r\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\r\n    \"tooltip hidden\");\r\n\r\n  var infoContainer = d3.select(\"body\").append(\"div\").attr(\"class\",\r\n    \"infoContainer hidden\").attr(\"id\", \"infoContainer\");\r\n\r\n  var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\r\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\r\n\r\n\r\n  var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\r\n    \"cnameDiv\").attr(\"id\", \"cname\");\r\n\r\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"detailsDiv\").attr(\"id\", \"details\");\r\n\r\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"recoDiv\").attr(\"id\", \"recommendations\");\r\n\r\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\r\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\r\n\r\n  var closeButton;\r\n\r\n  var offsetL;\r\n  var offsetT;\r\n\r\n  //---------------------- Color preferences -------------//\r\n  var themes = {\r\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\r\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\r\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\r\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\r\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\r\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\r\n  };\r\n\r\n  nextTheme = function(toTheme) {\r\n    // Go to next theme\r\n    var themeList = d3.keys(themes);\r\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\r\n    colorArray = themes[theme];\r\n\r\n    //Change body class\r\n    d3.select(document.body).attr(\"class\", theme);\r\n\r\n    // Save :)\r\n    window.localStorage.theme = theme;\r\n\r\n    // Redraw map :)\r\n    if (topo) redraw();\r\n  }\r\n  map.nextTheme = nextTheme;\r\n\r\n  nextTheme(theme);\r\n  updateScale();\r\n  updateDimensions();\r\n  setup(width, height);\r\n\r\n  function setup(width, height) {\r\n    projection = d3.geo.naturalEarth()\r\n      .translate([(width / 2), (height / 2) + height * 0.08])\r\n      .scale(width / 1.7 / Math.PI);\r\n\r\n    path = d3.geo.path().projection(projection);\r\n\r\n    svg = d3.select(\"#map-container\").append(\"svg\")\r\n      .attr(\"id\", \"map-svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\r\n      .call(zoom)\r\n      .on(\"click\", click)\r\n      .append(\"g\");\r\n\r\n    g = svg.append(\"g\");\r\n    svg.append(\"g\").attr(\"id\", \"legend\")\r\n    svg.append(\"text\").attr({\r\n      id: \"filter-text\",\r\n      class: \"legend\"\r\n    });\r\n    svg.append(\"text\").attr({\r\n      id: \"filter\",\r\n      class: \"legend\"\r\n    });\r\n  }\r\n\r\n  //Load country aliases and names\r\n  if (!window.localStorage.countries) {\r\n    d3.csv(\"assets/data/countries.csv\", function(err, countries) {\r\n      countryNames = countries;\r\n\r\n      countries.forEach(function(i) {\r\n        //Turning CSV values into numeric data\r\n        i.id = +i.id;\r\n      });\r\n\r\n      // save countries\r\n      window.localStorage.countries = JSON.stringify(countries);\r\n    });\r\n\r\n  } else {\r\n    countryNames = JSON.parse(window.localStorage.countries);\r\n  }\r\n  //Load map\r\n  d3.json(\"assets/data/world-50m.json\", function(error, world) {\r\n\r\n    var countries = topojson.feature(world, world.objects.countries).features;\r\n\r\n    topo = countries;\r\n    draw(topo, true);\r\n\r\n  });\r\n\r\n  function draw(topo, redrawMap) {\r\n    var country = g.selectAll(\".country\").data(topo);\r\n\r\n    var progress = d3.select(\"#progress-bar\").style({\r\n      \"height\": updateProgressBar() * 100 + \"%\",\r\n      \"background-color\": colorArray[6]\r\n    });\r\n    d3.select(\"#countryCount\").style({\r\n      \"background-color\": colorArray[1],\r\n      \"border-color\": colorArray[6]\r\n    })\r\n    //Show progressbar text on mouse-over\r\n    .on(\"mousemove\", function() {\r\n      d3.select(\"#progress-text\")\r\n        .transition().duration(150).style(\"opacity\", 0.9);\r\n    })\r\n      .on(\"mouseout\", function() {\r\n        d3.select(\"#progress-text\").transition().duration(150).style(\"opacity\", 0);\r\n      });\r\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/197 countries\")\r\n\r\n    //Draw countries\r\n    if (redrawMap) {\r\n      country.enter().insert(\"path\")\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"d\", path)\r\n        .attr(\"id\", function(d, i) {\r\n          return d.id;\r\n        })\r\n        .attr(\"title\", function(d, i) {\r\n          return d.properties.name;\r\n        })\r\n        .style(\"fill\", function() {\r\n          return color(0);\r\n        });\r\n    }\r\n    //Color countries\r\n    country.transition().style(\"fill\", function(d) {\r\n      switch (filter) {\r\n        case \"artists\":\r\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\r\n            color(0);\r\n          //break;\r\n        case \"scrobbles\":\r\n          return color(getCountryPlaycount(d));\r\n      }\r\n    })\r\n\r\n    //offsets for tooltips\r\n    offsetL = document.getElementById('map-container').offsetLeft;\r\n    offsetT = document.getElementById('map-container').offsetTop;\r\n\r\n    //tooltips\r\n    country\r\n      .on(\"mousemove\", function(d, i) {\r\n        var name;\r\n        var tag;\r\n        countryNames.forEach(function(e, i) {\r\n          if (e.id === d.id) {\r\n            name = e.name;\r\n            tag = e.tag;\r\n          };\r\n        })\r\n        var mouse = d3.mouse(svg.node()).map(function(d) {\r\n          return parseInt(d);\r\n        });\r\n\r\n        tooltip.classed(\"hidden\", false)\r\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\r\n            mouse[1] +\r\n            offsetT + 10) + \"px\")\r\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\r\n      })\r\n      .on(\"mouseout\", function(d, i) {\r\n        tooltip.classed(\"hidden\", true);\r\n      })\r\n      //Show div with top 10 artists for country when clicked\r\n      .on(\"click\", function(d, i) {\r\n        var name;\r\n        var tag;\r\n        var id;\r\n\r\n        clicked(d);\r\n\r\n        countryNames.forEach(function(e, i) {\r\n          if (e.id === d.id) {\r\n            name = e.name;\r\n            tag = e.tag;\r\n            id = d.id;\r\n          };\r\n        })\r\n        var mouse = d3.mouse(svg.node()).map(function(d) {\r\n          return parseInt(d);\r\n        });\r\n\r\n        closeButton\r\n          .on(\"click\", function(d, i) {\r\n            removeArtistDiv();\r\n            // zoom out map, fulhack\r\n            clicked(centered);\r\n          }) //\"stäng\" onclick slutar\r\n      }) // on click slutar\r\n\r\n  }\r\n  \r\n  /*-------redraw----*/\r\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean \r\n  function redraw(redrawMap) {\r\n    updateDimensions();\r\n\r\n    if (redrawMap) {\r\n      d3.select('#map-svg').remove();\r\n      setup(width, height);\r\n    }\r\n\r\n    maxartists = d3.max(d3.keys(countryCount), function(cname) {\r\n      return countryCount[cname].length;\r\n    });\r\n    maxplaycount = d3.max(d3.keys(countryCount), function(cname) {\r\n      return getCountryPlaycount({\r\n        id: cname\r\n      });\r\n    })\r\n    updateScale();\r\n    updateLegend();\r\n\r\n    draw(topo, redrawMap);\r\n  }\r\n\r\n\r\n  /**\r\n   * Moves the map to the specified location or based on the current zoom event\r\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\r\n   * @param  {Number} sc      Optional: Scale factor\r\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\r\n   */\r\n  function move(tr, sc, animate) {\r\n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\r\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\r\n\r\n    // If move was not initiated by clicking on a country, deselect the selected country\r\n    if (!tr && !sc && centered) {\r\n      highlightCountry(false);\r\n      removeArtistDiv();\r\n      centered = null;\r\n    }\r\n\r\n    var zscale = s;\r\n    var h = height / 4;\r\n\r\n    t[0] = Math.min(\r\n      (width / height) * (s - 1),\r\n      Math.max((width * 1.2) * (1 - s), t[0])\r\n    );\r\n\r\n    t[1] = Math.min(\r\n      h * (s - 1) + h * s,\r\n      Math.max(height * (1 - s) - h * s, t[1])\r\n    );\r\n\r\n    zoom.translate(t);\r\n    zoom.scale(s);\r\n\r\n    if (animate) {\r\n      g.transition().duration(950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\r\n\r\n    } else {\r\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\r\n    }\r\n\r\n    //adjust the country hover stroke width based on zoom level\r\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\r\n  }\r\n  map.move = move;\r\n\r\n  var throttleTimer;\r\n\r\n  function throttle() {\r\n    window.clearTimeout(throttleTimer);\r\n    throttleTimer = window.setTimeout(function() {\r\n      redraw(true);\r\n      move([0, 0], 1); // Reset position\r\n    }, 200);\r\n  }\r\n\r\n\r\n  //geo translation on mouse click in map\r\n  function click() {\r\n    var latlon = projection.invert(d3.mouse(this));\r\n    // console.log(latlon);\r\n    //console.log(countryCount);\r\n  }\r\n\r\n\r\n  /*----------------------------makeArtistDiv------------------------------------------------*/\r\n  //Skapar \"details-on-demand\"-divarna.\r\n  function makeArtistDiv(d) {\r\n\r\n    //lägga till namn till detailseDiv\r\n    var name;\r\n    var tag;\r\n    var recoms;\r\n    //var id;\r\n    countryNames.forEach(function(e, i) {\r\n      if (e.id === d.id) {\r\n        name = e.name;\r\n        tag = e.tag;\r\n        //id = d.id;\r\n      };\r\n    })\r\n    d3.select(\"#recommendations\").html(\"\");\r\n    //Show country name and info div on left hand side\r\n    infoContainer\r\n      .classed(\"hidden\", false)\r\n      .transition()\r\n      .style(\"opacity\", 1)\r\n      .duration(750);\r\n\r\n    //Hide progressbar when showing \r\n    d3.selectAll(\"#countryCount, .on-map-view\")\r\n      .classed(\"hidden\", true);\r\n\r\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"class\", \"close-button\").html(\"X\");\r\n\r\n    //Populate country information div\r\n    cnameDiv\r\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\r\n      .append(\"h1\").html(name);\r\n    d3.select(\"#cnameCont\").append(\"h5\")\r\n      .html(function() {\r\n        if (countryCount[d.id])\r\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\r\n        else return \"No artists yet - Find new here ->\"\r\n      })\r\n\r\n\r\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\r\n\r\n      var currentNoArtists = 0;\r\n      var currentCount = 0;\r\n\r\n\r\n      d3.select(\"#details\").append(\"div\")\r\n        .html(\"<span>Your top artists tagged with </span><span class=\\\"demonym\\\">#\" + name + \"</span><span> or </span><span class=\\\"demonym\\\">#\" + tag + \"</span><span>: </span>\")\r\n        .attr(\"class\", \"topartists-desc\");\r\n      //Show top 5 artists\r\n\r\n      d3.select(\"#artistContainer\").append(\"i\")\r\n        .attr(\"class\", \"fa artist-control right fa-angle-right\")\r\n        .on(\"click\", function(){\r\n          showNextFive();\r\n        });\r\n\r\n      d3.select(\"#artistContainer\").append(\"i\")\r\n        .attr(\"class\", \"fa artist-control left disabled fa-angle-left\")\r\n        .on(\"click\", function(){\r\n          showPreviousFive();\r\n        });\r\n\r\n      function showNextFive(){\r\n        showArtists(currentNoArtists+1, currentNoArtists+5, false);\r\n        //Send event to google analytics\r\n        ga('send', {\r\n          hitType: 'event',\r\n          eventCategory: 'Artist viewer',\r\n          eventAction: 'Next five',\r\n          eventLabel: 'test'\r\n        });\r\n      }\r\n  \r\n      function showPreviousFive(){\r\n        showArtists(currentNoArtists-9, currentNoArtists-5, false);\r\n        //Trigger GA event\r\n        ga('send', {\r\n          hitType: 'event',\r\n          eventCategory: 'Artist viewer',\r\n          eventAction: 'Previous five',\r\n          eventLabel: 'test'\r\n        });\r\n      }\r\n\r\n      function showArtists(first, last, initial){\r\n        //Clean-up previous five artist images\r\n        d3.selectAll(\".scrobbled\").remove();\r\n        //console.log(\"displaying \"+first+\" to \"+last)\r\n\r\n        //Generate new artist images for all artists within the desired range!\r\n          for (i = first-1; i <= last-1; i++) {\r\n            if (countryCount[d.id][i]) {\r\n              //console.log(i+\" \"+countryCount[d.id][i].artist)\r\n              var artistDiv = d3.select(\"#details\").append(\"div\")\r\n                .attr({\r\n                  \"class\": \"scrobbled artist-div lowlight\",\r\n                  \"data-artist\": countryCount[d.id][i].artist\r\n                })\r\n                .on(\"click\", function() {\r\n                  // Lowlight not selected artists\r\n                  d3.selectAll(\".artist-div\").classed({\r\n                    \"lowlight\": true,\r\n                    \"highlight\": false\r\n                  });\r\n                  // Highlight selected artist\r\n                  d3.select(this).classed({\r\n                    \"highlight\": true,\r\n                    \"lowlight\": false\r\n                  });\r\n\r\n                  makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\r\n                });\r\n\r\n              var artistLink = artistDiv.append(\"a\").style(\"display\", \"block\")\r\n              artistLink.append(\"div\")\r\n                .attr(\"class\", \"image-div\")\r\n                .style(\"background-image\", \"url(\" + \"'\" + countryCount[d.id][i].image + \"'\" + \" )\")\r\n                //.append(\"span\").attr(\"class\", \"overlayNo\").html(i+1);\r\n                \r\n              var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\r\n\r\n              playCountDiv.append(\"p\")\r\n                .html(\"<b>\" + countryCount[d.id][i].artist + \"</b><br>\" + countryCount[d.id][i].playcount + \" scrobbles\")\r\n                .attr(\"class\", \"details-p\");\r\n\r\n              currentCount++;\r\n            } else {\r\n              i = last;\r\n            }\r\n        }\r\n        //\r\n        //Check to see if we are moving backwards or forwards through the list..\r\n        if (first<currentNoArtists) //Backwards!\r\n          currentNoArtists = Math.ceil((currentNoArtists-currentCount)/5)*5;\r\n        else if (last>currentNoArtists) //Forwards!\r\n          currentNoArtists = currentNoArtists+currentCount;\r\n        //console.log(\"currentNoArtists är \"+currentNoArtists);\r\n\r\n        //Reset the count!\r\n        currentCount = 0;\r\n\r\n        //\r\n        //Disable and enable user controls\r\n        //\r\n        \r\n        //Left arrow...\r\n        if (currentNoArtists>=10 && !initial){\r\n          d3.selectAll(\".artist-control.left\")\r\n            .classed(\"disabled\", false)\r\n            .on(\"click\", function(){\r\n              showPreviousFive();\r\n            });\r\n        }\r\n        else{\r\n          d3.selectAll(\".artist-control.left\")\r\n            .classed(\"disabled\", true)\r\n            .on('click',function(){\r\n              d3.select(this).on('click',null); //Remove click listener!\r\n            });\r\n        }\r\n        //and right...\r\n        if (currentNoArtists>countryCount[d.id].length-1){ //There are no more artists!\r\n          d3.selectAll(\".artist-control.right\")\r\n            .classed(\"disabled\", true)\r\n            .on('click',function(){\r\n              d3.select(this).on('click',null); //Remove click listener!\r\n            });\r\n        }\r\n        else{\r\n          d3.selectAll(\".artist-control.right\")\r\n            .classed(\"disabled\", false)\r\n            .on(\"click\", function(){\r\n              showNextFive();\r\n            });\r\n        }\r\n      }\r\n      //Fetch the initial five artists!! \r\n      showArtists(1, 5, true);\r\n    \r\n      \r\n    } else { //Om landet vi klickat på inte har några lyssnade artister... \r\n      console.log(\"landet har inga lyssnade artister\");\r\n    }\r\n    //\"Recommended\"-heading\r\n    d3.select(\"#recommendations\").append(\"h4\")\r\n      .html(\"You may like: \")\r\n      .attr(\"class\", \"topartists-desc\");\r\n\r\n    // show loading message\r\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\r\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\r\n      .attr(\"id\", \"rec-loading\")\r\n      .html(\"Looking for artists tagged #\" + tag);\r\n    recLoadingDiv.append(\"img\")\r\n      .attr({\r\n        id: \"rec-loading-img\",\r\n        src: \"assets/img/loader_horizontal.gif\"\r\n      })\r\n      .style({\r\n        display: \"inline-block\",\r\n        margin: \"0 5px\"\r\n      })\r\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\r\n\r\n\r\n\r\n    //Get list of recommendations for country based on tags!\r\n    api.getRecommendations(tag, function(taglist) {\r\n      // Return if this callback is from an old (not active) country\r\n      if (!centered || centered.id !== d.id) {\r\n        return;\r\n      }\r\n      // Show loading message\r\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\r\n\r\n      //Get list of recommendations for country based on country name!\r\n      api.getRecommendations(name, function(namelist) {\r\n        // Return if this callback is from an old (not active) country\r\n        if (!centered || centered.id !== d.id) {\r\n          return;\r\n        }\r\n        //Show loading message\r\n        recLoadingMessage.html(\"Loading images for recommended artists\");\r\n\r\n        //Join the two lists\r\n        var list = taglist.concat(namelist);\r\n\r\n        //Removing duplicates from the list!\r\n        var arr = {};\r\n        for (var i = 0; i < list.length; i++)\r\n          arr[list[i]['name']] = list[i];\r\n\r\n        list = new Array();\r\n        for (key in arr)\r\n          list.push(arr[key]);\r\n\r\n        list.sort(function(a, b) {\r\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\r\n        });\r\n        //Get the first 20 artists\r\n        list = list.slice(0, 20);\r\n        //Randomize list\r\n        list = shuffleArray(list);\r\n\r\n        if (list.length === 0) { // Found no recommendations\r\n          recLoadingDiv.remove();\r\n          d3.select(\"#recommendations\").append(\"p\")\r\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\r\n          d3.select(\"#recommendations\").append(\"a\").attr({\r\n            href: \"https://www.last.fm/tag/\" + name,\r\n            target: \"_blank\",\r\n          }).html(\"Try searching last.fm yourself!\");\r\n        }\r\n\r\n        for (i = 0; i < Math.min(list.length, 5); i++) {\r\n          // Return if this callback is from an old (not active) country\r\n          if (centered.id !== d.id) {\r\n            return;\r\n          }\r\n\r\n          var artisturl, artistimg, artistname;\r\n\r\n          //Get url and images for recommended artists!\r\n          api.getArtistInfo(list[i].name, function(art) {\r\n            recLoadingDiv.remove();\r\n            var artisturl = art[0].url;\r\n            var artistimg = art[0].image;\r\n            var artistname = art[0].name;\r\n\r\n\r\n            var recoArtistDiv = d3.select(\"#recommendations\").insert(\"div\", \"#summaryText\").attr(\"class\", \"artist-div lowlight\");\r\n            var recoArtistLink = recoArtistDiv.append(\"a\").style(\"display\", \"block\")\r\n              //.attr(\"href\", artisturl)\r\n              //.attr(\"target\", \"_blank\");\r\n            recoArtistLink.append(\"div\")\r\n              .attr(\"class\", \"image-div\")\r\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\r\n\r\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\r\n\r\n            recoArtistInfoDiv.append(\"p\")\r\n              .html(\"<b>\" + artistname + \"</b>\")\r\n              .attr(\"class\", \"details-p\");\r\n\r\n            recoArtistDiv.on(\"click\", function() {\r\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\r\n                \"lowlight\": true,\r\n                \"highlight\": false\r\n              });\r\n\r\n              d3.select(this).classed({ // Highlight selected artist\r\n                \"highlight\": true,\r\n                \"lowlight\": false\r\n              });\r\n              makeSummaryDiv(artistname);\r\n            });\r\n\r\n          })\r\n        }\r\n\r\n\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n  function removeArtistDiv() {\r\n    infoContainer.transition().style(\"opacity\", 0).duration(1000);\r\n    infoContainer.classed(\"hidden\", true);\r\n    d3.selectAll(\"#countryCount, .on-map-view\").classed(\"hidden\", false);\r\n    d3.selectAll(\".artist-div\").remove(\"div\");\r\n    d3.selectAll(\".close-button\").remove(\"button\");\r\n    d3.selectAll(\".details-h\").remove(\"p\");\r\n    d3.selectAll(\".details-h4\").remove(\"h4\");\r\n    d3.selectAll(\".recom-h4\").remove(\"h4\");\r\n    d3.selectAll(\".artist-control\").remove();\r\n    d3.selectAll(\".topartists-desc\").remove();\r\n\r\n\r\n\r\n\r\n\r\n    cnameDiv.classed(\"hidden\", true);\r\n    d3.select(\"#cnameCont\").remove(\"h1\");\r\n    d3.select(\"#cnameCont\").remove(\"h5\");\r\n  }\r\n\r\n  function makeSummaryDiv(artistname) {\r\n    var usertaglist = [];\r\n    //console.log(usertaglist);\r\n    var artisttaglist = [];\r\n\r\n    d3.select(\"#summaryText\").remove();\r\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\r\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\r\n    d3.select(\"#summaryText\").append(\"img\")\r\n      .attr({\r\n        id: \"sum-loading-img\",\r\n        src: \"assets/img/loader_horizontal.gif\"\r\n      })\r\n      .style({\r\n        display: \"inline-block\",\r\n        margin: \"0 5px\"\r\n      });\r\n\r\n    //Get artist info from Lastfm\r\n    api.getArtistInfo(artistname, function(art) {\r\n      var text = art[0].description.replace(/(\\n)+/g, '<br />');\r\n      //var text = text.substring(6);\r\n      //Get artist's top tags\r\n      artisttaglist = art[0].tags;\r\n      //Create list of user tags\r\n\r\n      //Make list of artist tags which are also user's top tags:\r\n      for (y = 0; y < 15; y++) {\r\n        for (z = 0; z < artisttaglist.length; z++) {\r\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\r\n            usertaglist.push(USER_TAGS[y].tag)\r\n          }\r\n        }\r\n      }\r\n\r\n      //Create combined tag list and remove duplicates\r\n      var taglist = usertaglist.concat(artisttaglist);\r\n      taglist = taglist.filter(function(elem, pos) {\r\n        return taglist.indexOf(elem) == pos;\r\n      })\r\n      // Remove loading text\r\n      d3.select(\"#summaryText\").html(\"\");\r\n      //Create containing div\r\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\r\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\r\n      summaryText.style(\"max-height\", h + \"px\");\r\n\r\n      summaryText.append(\"h4\").html(artistname);\r\n\r\n      //Show top 7 tags\r\n      for (i = 0; i < Math.min(taglist.length, 6); i++) {\r\n        var tagdiv = summaryText.append(\"div\").attr(\"class\", \"tagdiv\").append(\"h4\").html(\"#\" + taglist[i]);\r\n        //Mark all user tags\r\n        for (p = 0; p < usertaglist.length; p++) {\r\n          if (taglist[i] === usertaglist[p])\r\n            tagdiv.classed(\"usertag\", true);\r\n        }\r\n      }\r\n      //Display artist summary\r\n      summaryText.append(\"p\").html(text || \"No description available - <a href='https://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\r\n\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Toggles highlight of a specified country\r\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\r\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\r\n   */\r\n  function highlightCountry(highlight, countryElement) {\r\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\r\n\r\n    if (highlight) {\r\n      // Fade out all other countries\r\n      d3.selectAll(\".country\").transition()\r\n        .style(\"opacity\", function() {\r\n          return (+this.id === +countryElement.id ? 1.0 : 0.3);\r\n        })\r\n\r\n      var ce = d3.select(document.getElementById(\"\" + countryElement.id)); // d3 can't select ids that are only numbers\r\n      ce.classed(\"highlighted\", true);\r\n    } else {\r\n      // Fade in all countries\r\n      d3.selectAll(\".country\").transition()\r\n        .style(\"opacity\", 1.0)\r\n    }\r\n\r\n  }\r\n\r\n  function clicked(d) { //d är det en har klickat på\r\n\r\n    var x, y, k;\r\n    //bounding box for clicked country\r\n    var b = path.bounds(d);\r\n\r\n    getCountryPlaycount(d);\r\n\r\n    //Set scale\r\n    var modscaleX = (b[1][0] - b[0][0]);\r\n    var modscaleY = (b[1][1] - b[0][1]);\r\n\r\n    //Dom't zoom too far with small countries!\r\n    if (modscaleX < 80)\r\n      modscaleX = 80;\r\n\r\n    //Landet är inte centrerat redan\r\n    if (d && centered !== d) {\r\n      centered = d;\r\n      removeArtistDiv();\r\n      makeArtistDiv(d);\r\n      highlightCountry(true, d);\r\n\r\n\r\n      //Special rules for special countries:\r\n      switch (d.id) {\r\n        case 840: //US\r\n          k = 3;\r\n          x = -(b[1][0] + b[0][0]) / 3;\r\n          y = -(b[1][1] + b[0][1]) / 1.7;\r\n          break;\r\n        case 250: //France\r\n          k = 7.012;\r\n          x = -(b[1][0] + b[0][0]) / 1.8;\r\n          y = -(b[1][1] + b[0][1]) / 3.4;\r\n          break;\r\n        case 528: //Netherlands\r\n          k = 9.0124;\r\n          x = -(b[1][0] + b[0][0]) / 1.5;\r\n          y = -(b[1][1] + b[0][1]) / 3.3;\r\n          break;\r\n        case 643: //Russia\r\n          k = 1.9;\r\n          x = -(b[1][0] + b[0][0]) / 1.25;\r\n          y = -(b[1][1] + b[0][1]) / 2;\r\n          break;\r\n        case 554: //New Zeeland\r\n          k = 4;\r\n          x = -(b[1][0] + b[0][0]) / 0.90;\r\n          y = -(b[1][1] + b[0][1]) / 1.8;\r\n          break;\r\n        case 36: //Australia\r\n          k = 3.3;\r\n          x = -(b[1][0] + b[0][0]) / 1.8;\r\n          y = -(b[1][1] + b[0][1]) / 2.1;\r\n          break;\r\n\r\n        default: //Everybody else\r\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\r\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\r\n          y = -(b[1][1] + b[0][1]) / 2;\r\n          break;\r\n      }\r\n\r\n      //Landet är redan centrerat\r\n    } else {\r\n      x = -width / 2;\r\n      y = -height / 2 - height * 0.08;\r\n      k = 1\r\n      removeArtistDiv();\r\n      highlightCountry(false);\r\n      centered = null;\r\n\r\n      //detailsDiv.classed(\"hidden\", true);\r\n    }\r\n\r\n    var pt = projection.translate();\r\n    // Tell map to move with animation\r\n    // Basically does the same as before: translate to middle,\r\n    // then to x and y with respect to scale\r\n    move([pt[0] + x * k, pt[1] + y * k], k, true);\r\n\r\n  }\r\n\r\n  //function to add points and text to the map (used in plotting capitals)\r\n  function addpoint(lat, lon, text) {\r\n\r\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\r\n    var x = projection([lat, lon])[0];\r\n    var y = projection([lat, lon])[1];\r\n\r\n    gpoint.append(\"svg:circle\")\r\n      .attr(\"cx\", x)\r\n      .attr(\"cy\", y)\r\n      .attr(\"class\", \"point\")\r\n      .attr(\"r\", 1.5);\r\n\r\n    //conditional in case a point has no associated text\r\n    if (text.length > 0) {\r\n\r\n      gpoint.append(\"text\")\r\n        .attr(\"x\", x + 2)\r\n        .attr(\"y\", y + 2)\r\n        .attr(\"class\", \"text\")\r\n        .text(text);\r\n    }\r\n\r\n  }\r\n\r\n  /** \"PUBLUC\" FUNCTIONS **/\r\n  map.putCountryCount = function(object) {\r\n    countryCount = JSON.parse(JSON.stringify(object));\r\n    countryScore = 0;\r\n    var countryList = [];\r\n\r\n    // Extract info for the current user\r\n    d3.keys(countryCount).forEach(function(id) {\r\n      if (countryCount[id][SESSION.name]) {\r\n        countryCount[id] = countryCount[id][SESSION.name];\r\n        countryScore = countryScore + 1;\r\n        countryList.push(+id)\r\n      } else {\r\n        // delete countryCount[id];\r\n      }\r\n    })\r\n\r\n    if (topo) redraw();\r\n\r\n    window.countryScore = countryScore;\r\n\r\n  }\r\n})(window, document)","var screenshot = {};\r\n\r\n(function (window, document) {\r\n\tscreenshot.render = function () {\r\n\t\tvar titleString,\r\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\r\n\t\t\timg;\r\n\r\n\t\tvar explrLogo = new Image();\r\n\r\n\t\tvar svg = d3.select(\"#map-svg\");\r\n\t\tvar w = svg.attr(\"width\");\r\n\t\tvar h = svg.attr(\"height\");\r\n\r\n\t\tvar canvas = document.createElement(\"canvas\");\r\n\t\tvar ctx = canvas.getContext(\"2d\");\r\n\r\n\t\t// canvg(canvas, document.getElementById(\"map-svg\").outerHTML);\r\n\r\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\r\n\t\tvar textColor = window.getComputedStyle(document.body).color;\r\n\r\n\t\tvar drawCenteredText = function (obj) {\r\n\t\t\tctx.font = obj.font;\r\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\r\n\r\n\t\t\tif (obj.lineWidth) {\r\n\t\t\t\tctx.lineWidth = obj.lineWidth;\r\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\r\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcanvas.width = w;\r\n\t\tcanvas.height = h;\r\n\r\n\t\t// insert background rect\r\n\t\tsvg.insert(\"rect\", \"g\")\r\n\t\t\t.attr({\r\n\t\t\t\tid: \"background-rect\",\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\theight: \"100%\",\r\n\r\n\t\t\t})\r\n\t\t\t.style({\r\n\t\t\t\tfill: backgroundColor,\r\n\t\t\t});\r\n\r\n\t\t// Add color, font to legend text\r\n\t\td3.selectAll('.legend text, text.legend').style({\r\n\t\t\t\"font-family\": function () {\r\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\r\n\t\t\t},\r\n\t\t\t\"font-size\": function () {\r\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\r\n\t\t\t},\r\n\t\t\t\"fill\": textColor,\r\n\t\t});\r\n\t\td3.selectAll(\".legend rect\").style({\r\n\t\t\tstroke: backgroundColor,\r\n\t\t})\r\n\r\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\r\n\r\n\t\texplrLogo.onload = function () {\r\n\t\t\t/* Add text and shiiet */\r\n\t\t\t// Add text background box\r\n\t\t\tctx.save(); // To draw with different opaticy\r\n\t\t\tctx.globalAlpha = 0.6;\r\n\t\t\tctx.fillStyle = backgroundColor;\r\n\t\t\tscoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 197 countries\";\r\n\t\t\ttitleString = SESSION.name + \"'s musical world map\";\r\n\t\t\tctx.font = \"34px Patua One\";\r\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\r\n\t\t\tctx.fillStyle = textColor;\r\n\r\n\t\t\t// Add text\r\n\t\t\tctx.fillStyle = textColor;\r\n\t\t\tdrawCenteredText({\r\n\t\t\t\tstring: titleString,\r\n\t\t\t\tfont: \"34px Patua One\",\r\n\t\t\t\ty: h - 60,\r\n\t\t\t});\r\n\t\t\tdrawCenteredText({\r\n\t\t\t\tstring: scoreString,\r\n\t\t\t\tfont: \"20px Didact Gothic\",\r\n\t\t\t\ty: h - 40,\r\n\t\t\t});\r\n\r\n\t\t\t// Add explr.fm logo\r\n\t\t\tctx.restore();\r\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\r\n\r\n\t\t\td3.select(\"#background-rect\").remove();\r\n\r\n\t\t\t//console.log(canvas.toDataURL())\r\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\r\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL(\"image/png\");\r\n\t\t\t// d3.select(\"body\").append(img);\r\n\t\t\t// \r\n\r\n\t\t\tvar dataurl = canvas.toDataURL(\"image/png\");\r\n\t\t\t// console.log(\"dataurl:\", dataurl)\r\n\r\n\t\t\t// window.open(dataurl, \"_blank\");\r\n\r\n\t\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"\";\r\n\t\t\t\r\n\t\t}\r\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\r\n\t}\r\n\r\n\tscreenshot.close = function () {\r\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"display:none;\";\r\n\t}\r\n\r\n})(window, document);"]}