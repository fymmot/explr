{"version":3,"sources":["api/lastfm.js","api/api.js","script.js","map.js","screenshot.js"],"names":["api","lastfm","key","url","send","method","options","callback","xhr","gotResponse","forEach","el","replace","d3","json","e","d","setTimeout","console","log","abort","error","superCount","window","document","csv","err","data","alias","nest","tag","toLowerCase","map","cname","name","getCountry","artist","responseData2","running","toptags","length","t","i","cid","tname","id","countryName","getCountries","artists","returnList","count","checkCount","select","html","SESSION","total_artists","localStorage","JSON","stringify","STORED_ARTISTS","country","returnObject","push","Date","getTime","getTags","tags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","cancelRecommendationRequests","getRecommendations","recommendations","USER_TAGS","slice","userTagObj","rollup","xhr1","tagCounts","topartists","a","num","xhr2","data2","hasTags","keys","sort","b","getFriends","parse","CACHED_USERS","cached_users","user","maxPage","currPage","countryCountObj","tries","randomcountrylist","getAllArtists","responseData","refresh","confirm","clear","location","reload","total","totalPages","artistNames","newArtist","playcount","dataObj","leaves","artistList","concat","putCountryCount","end","getUserTags","c","tagCount","topArtists","done","forbidden","nogood","user_tags","taglist","lim","Math","min","random","begin","welcomeOverlay","transition","duration","style","each","remove","selectAll","visibility","friends","friendName","updateName","append","attr","href","origin","pathname","target","on","this","classed","theme","loader","delay","param","split","addEventListener","evt","keyCode","screenshot","render","nextTheme","substr","floor","colorArray","legend","countryScore","updateDimensions","height","innerHeight","width","getElementById","offsetWidth","getCountryPlaycount","countryCount","updateProgressBar","progressPro","numbersWithSpace","x","toString","shuffleArray","array","j","temp","updateScale","max","filter","maxartists","mydomain","pow","E","maxplaycount","color","scale","threshold","domain","range","updateLegend","len","ceil","legend_labels","svg","ls_w","ls_h","y","text1","text","text2","getComputedTextLength","redraw","enter","_","setup","projection","geo","naturalEarth","translate","PI","path","call","zoom","click","g","class","draw","topo","redrawMap","background-color","border-color","insert","properties","offsetL","offsetLeft","offsetT","offsetTop","countryNames","mouse","node","parseInt","tooltip","clicked","closeButton","removeArtistDiv","centered","move","tr","sc","animate","event","s","highlightCountry","h","throttle","clearTimeout","throttleTimer","invert","makeArtistDiv","infoContainer","cnameDiv","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","artistLink","playCountDiv","recLoadingDiv","recLoadingMessage","src","display","margin","namelist","list","arr","Array","art","artistimg","artistname","recoArtistDiv","recoArtistLink","recoArtistInfoDiv","usertaglist","artisttaglist","summaryText","substring","z","elem","pos","indexOf","offsetHeight","tagdiv","p","countryElement","ce","k","bounds","modscaleX","modscaleY","pt","behavior","scaleExtent","drawPlays","themes","blue_black","green_black","pink_black","pink_white","green_white","red_white","toTheme","themeList","body","countries","world","topojson","feature","objects","features","object","countryList","titleString","explrLogo","Image","w","canvas","createElement","ctx","getContext","backgroundColor","getComputedStyle","textColor","drawCenteredText","obj","font","fillText","string","measureText","lineWidth","strokeStyle","strokeText","fill","font-family","font-size","stroke","canvg","XMLSerializer","serializeToString","onload","save","globalAlpha","fillStyle","scoreString","fillRect","restore","drawImage","toDataURL","open"],"mappings":"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","file":"all.min.js","sourcesContent":["var api = api || {};\n\napi.lastfm = {};\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\napi.lastfm.url = \"http://ws.audioscrobbler.com/2.0/\";\n\n/**\n* Send an API call to last.fm\n* @param {String} method    The method name (e.g. \"library.getartists\")\n* @param {Array} options    An array of tuples (arrays with two elements)\n                            with options for the request: [\"key\", \"value\"]\n* @param {Function} callback    The callback function to call with the data\n                                returned from the request. Takes two arguments,\n                                error and data (callback(error, data))\n*/\napi.lastfm.send = function(method, options, callback) {\n\tvar url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\n\t\tapi.lastfm.key + \"&format=json\";\n\tvar xhr, gotResponse;\n\n\toptions.forEach(function(el) {\n\t\turl += \"&\" + el[0] + \"=\" +\n\t\t\t(el[1] + \"\")\n\t\t\t.replace(\"&\", \"%26\")\n\t\t\t.replace(\"/\", \"%2F\")\n\t\t\t.replace(\"+\", \"%2B\")\n\t\t\t.replace(\"\\\\\", \"%5C\");\n\t});\n\n\txhr = d3.json(url, function(e, d) {\n\t\tgotResponse = true;\n\t\tcallback(e, d);\n\t});\n\n\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\n\tsetTimeout(function() {\n\t\tif (!gotResponse) {\n\t\t\tconsole.log(\"GET \" + url + \" took to long, aborting\");\n\t\t\txhr.abort();\n\t\t\tcallback(\"ERROR\", {\n\t\t\t\terror: \"Took to long to respond\"\n\t\t\t});\n\t\t}\n\t}, 20000);\n\n\treturn xhr;\n}","/*requires:\napi/lastfm.js\n*/\n\nvar api = api || {};\nvar superCount = 0;\n\n(function(window, document) {\n\td3.csv(\"assets/data/countries.csv\", function(err, data) {\n\t\talias = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\treturn d.tag.toLowerCase();\n\t\t\t})\n\t\t\t.map(data);\n\n\t\tcname = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\treturn d.name.toLowerCase();\n\t\t\t})\n\t\t\t.map(data);\n\n\t\t/**\n\t\t * Tries to find out the country for a specified artist.\n\t\t * @param  {String}   artist   Name of the artist to get country for\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\n\t\t *                             The callback function takes one argument, this object:\n\t\t *\n\t\t *                             {\n\t\t *                             \t\"artist\": <artist name>,\n\t\t *                             \t\"country\": <country name>,\n\t\t *                             \t\"id\": <country id>,\n\t\t *                             \t\"tag\": <the tag that decided the country (e.g. Swedish for Sweden)>\n\t\t *                             }\n\t\t *\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\n\t\t *\n\t\t */\n\t\tapi.getCountry = function(artist, callback) {\n\t\t\t// Get artists country code here, from last.fm or whatever\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err,\n\t\t\t\tresponseData2) {\n\t\t\t\tvar running = true; // To stop searching when a country-tag has been found\n\n\t\t\t\t// Return if something failed\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\n\t\t\t\t\tresponseData2.toptags.tag.length) {\n\t\t\t\t\tcallback({\n\t\t\t\t\t\t\"artist\": artist\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Else check for country-tags in the artist's tags\n\t\t\t\tresponseData2.toptags.tag.forEach(function(t, i) {\n\t\t\t\t\tif (running) {\n\t\t\t\t\t\tvar tname = t.name.toLowerCase();\n\t\t\t\t\t\tvar cid;\n\t\t\t\t\t\ttry {\n\n\t\t\t\t\t\t\tif (cname[tname] && cname[tname][0].id) { // sweden->sweden\n\t\t\t\t\t\t\t\tcid = cname[tname][0].id;\n\t\t\t\t\t\t\t\tcountryName = cname[tname][0].name;\n\t\t\t\t\t\t\t} else if (alias[tname] && alias[tname][0].id) { // swedish->sweden\n\t\t\t\t\t\t\t\tcid = alias[tname][0].id;\n\t\t\t\t\t\t\t\tcountryName = alias[tname][0].name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (cid) { // We found a country!\n\t\t\t\t\t\t\t\tcallback({ // Call callback method\n\t\t\t\t\t\t\t\t\t\"artist\": artist,\n\t\t\t\t\t\t\t\t\t\"id\": cid,\n\t\t\t\t\t\t\t\t\t\"tag\": t.name,\n\t\t\t\t\t\t\t\t\t\"name\": countryName,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\trunning = false; // Stop searching for country-tags\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t//console.log(artist, tname)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\tif (running) { // We got no country :(\n\t\t\t\t\tcallback({\n\t\t\t\t\t\t\"artist\": artist\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Returns a list of country objects for a list of artist names.\n\t\t *\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\n\t\t * @param  {Array}   artists  Array of artist names (String)\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\n\t\t *                             containing only those artists that have a country\n\t\t *                             associated with them. For object structure, see api.getCountry\n\t\t */\n\t\tapi.getCountries = function(artists, callback) {\n\t\t\tvar returnList = [],\n\t\t\t\tcount = 0;\n\t\t\t/**\n\t\t\t * Increases a count and checks if we've tried\n\t\t\t * to get country for all artists\n\t\t\t */\n\t\t\tvar checkCount = function() {\n\t\t\t\tcount++;\n\t\t\t\tsuperCount++;\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>Feel free to start<br>exploring!\");\n\t\t\t\tif (count === artists.length) {\n\t\t\t\t\t// We done, save artists and call back\n\t\t\t\t\twindow.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n\t\t\t\t\tcallback(returnList);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get countries for all artists\n\t\t\tartists.forEach(function(el, i) {\n\t\t\t\t// first check stored artists to see if we've already checked this artist\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\n\t\t\t\t\treturnObject.artist = el;\n\t\t\t\t\treturnList.push(returnObject);\n\t\t\t\t\tcheckCount();\n\t\t\t\t} else {\n\t\t\t\t\tvar start = new Date().getTime();\n\n\t\t\t\t\tapi.getCountry(el, function(data) {\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\n\t\t\t\t\t\t// console.error(data)\n\n\t\t\t\t\t\t// if (data.name) {\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\n\t\t\t\t\t\t\t\"id\": data.id,\n\t\t\t\t\t\t\t\"name\": data.name,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturnList.push(data);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\n\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\n\n\n\t\t\t\t\t\tcheckCount();\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\t\t}\n\t})\n\n\t/**\n\t * Get all tags for an artist.\n\t * @param  {String}   artist   Artist name\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\n\t */\n\tapi.getTags = function(artist, callback) {\n\t\t// Check if artist tags are already saved, if so return them\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\n\t\t\t// console.log(\"Had in store, no api call\");\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t} else {\n\t\t\t// Create object in localstorage\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\n\t\t\tSTORED_ARTISTS[artist].tags = [];\n\n\t\t\t// Get from lastfm\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\n\t\t\t\tfunction(err, responseData2) {\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\n\t\t\t\t\twindow.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t\t\t});\n\t\t}\n\t}\n\n\tapi.getArtistInfo = function(artist, callback) {\n\t\tvar artistInfo = [];\n\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\n\t\t\t//Creating a list of tag names\n\t\t\tvar tagnamelist = [];\n\t\t\tif (data1.artist.tags.tag) {\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\n\t\t\t\t\ttagnamelist.push(t.name);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tartistInfo.push({\n\t\t\t\tname: artist,\n\t\t\t\turl: data1.artist.url,\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\n\t\t\t\tdescription: data1.artist.bio.summary,\n\t\t\t\ttags: tagnamelist\n\t\t\t})\n\t\t\tcallback(artistInfo);\n\t\t})\n\n\n\n\t}\n\n\t/**\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\n\t * Also included are which tags matched.\n\t *\n\t * Calling this function cancels previous requests initiated by this function.\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\n\t */\n\tvar recommendationRequests = [];\n\tvar cancelRecommendationRequests = function() {\n\t\trecommendationRequests.forEach(function(xhr) {\n\t\t\txhr.abort();\n\t\t});\n\n\t\trecommendationRequests = [];\n\t}\n\tapi.getRecommendations = function(country, callback) {\n\t\tcancelRecommendationRequests();\n\n\t\tvar recommendations = [];\n\n\t\t// get top tags for user\n\t\tvar toptags = USER_TAGS.slice(0, 15);\n\t\t// make tag list to an object (back n forthss)\n\t\tvar userTagObj = d3.nest().key(function(d) {\n\t\t\treturn d.tag;\n\t\t}).rollup(function(d) {\n\t\t\treturn d[0].count;\n\t\t}).map(toptags);\n\n\n\t\tconsole.log(\"Got top tags for user!\")\n\n\t\t// Get top artists for tag country\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\n\t\t\t// Gotta count matching tags to then sort\n\t\t\tvar tagCounts = {};\n\n\t\t\t// Get the tags for these artists\n\t\t\t//console.log(data1, err)\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\n\t\t\t\tcallback([]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar artists = data1.topartists.artist;\n\n\t\t\tartists.forEach(function(a, num) {\n\t\t\t\ttagCounts[a.name] = [];\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\n\t\t\t\t\tif (hasTags) {\n\t\t\t\t\t\t// Compare top 10 tags to user tags\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\n\t\t\t\t\t\t\treturn d.name;\n\t\t\t\t\t\t}).map(data2.toptags.tag);\n\n\t\t\t\t\t\t// Get rid of justin bieber\n\t\t\t\t\t\tif (tags[country]) {\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (num === artists.length - 1) {\n\t\t\t\t\t\tconsole.log(\"We've gotten tag counts for all artists, make a list!\")\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\n\t\t\t\t\t\t\trecommendations.push({\n\t\t\t\t\t\t\t\tname: d,\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t//console.log(recommendations)\n\t\t\t\t\t\tcallback(recommendations);\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\trecommendationRequests.push(xhr2);\n\t\t\t})\n\t\t})\n\n\t\trecommendationRequests.push(xhr1);\n\t}\n\n\tapi.getFriends = function(callback) {\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\n\t}\n})(window, document);","/* requires:\napi/api.js\napi/lastfm.js\n*/\n\nvar STORED_ARTISTS = JSON.parse(window.localStorage.artists || \"{}\");\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\nvar SESSION = {};\n\n(function() {\n    // user = prompt(\"Input your user name, get top 20 artists\")\n    var user, currPage = 1,\n        maxPage;\n    var countryCountObj = {};\n    var count = 0;\n    var tries = 0;\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\n\n    var getAllArtists = function() {\n        api.lastfm.send(\"library.getartists\", [[\"user\", user], [\"limit\", 50],\n    [\"page\", currPage]],\n            function(error, responseData) {\n                // Special case for unfortunate users\n                if (responseData === \"\") {\n                    console.error('Got empty string (\"\") as response, skipping page.')\n                    currPage++;\n                    getAllArtists();\n                    return;\n                }\n                if (error || responseData.error) {\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\n\n                    // Try again, but not forever\n                    if (tries++ < 5) {\n                        getAllArtists();\n\n                        // TODO: Show erorr message ;)\n                    } else {\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\n                        if (refresh) {\n                            window.localStorage.clear();\n                            window.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n                            window.location.reload();\n                        }\n                    }\n                    return;\n                }\n\n                tries = 0;\n\n                if (currPage === 1) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\n                }\n\n                currPage++;\n                // console.log(\"Artists done, get countries\");\n\n                // Save artist data to localStorage (and create a list of artist names)\n                var artistNames = []\n                responseData.artists.artist.forEach(function(newArtist) {\n                    var a = STORED_ARTISTS[newArtist.name] || {};\n\n                    a.playcount = +newArtist.playcount;\n                    a.url = newArtist.url;\n\n                    a.image = [newArtist.image[3]];\n\n                    STORED_ARTISTS[newArtist.name] = a;\n                    artistNames.push(newArtist.name);\n                })\n                window.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n                // var n = count++;\n\n                // Get country for all artists\n                api.getCountries(artistNames,\n                    function(data) {\n                        // Count plays for each country?\n                        // countryCountList = countryCountList.concat(data);\n                        var dataObj = d3.nest() //Gör så att man kan slå upp på land-id och få upp en lista på artister.\n                            .key(function(d) {\n                                return d.id;\n                            })\n                            .rollup(function(leaves) { //gör så att man får en lista på alla artister för ett land.\n                                return leaves;\n                            })\n                            .map(data); //Skickar in en lista med ett objekt för varje artist.\n\n                        d3.keys(dataObj).forEach(function(id) {\n                            countryCountObj[id] = countryCountObj[id] || {};\n                            countryCountObj[id][user] = countryCountObj[id][user] || [];\n                            var artistList = countryCountObj[id][user]; // list of artists for a country\n\n                            // if (artistList) {\n                            artistList = artistList.concat(dataObj[id]);\n\n                            //Lägger på de nya dataObj-elementen i countryCountObj-listan.\n                            // } else {\n                            //     artistList = dataObj[id];\n                            // }\n\n                            artistList.forEach(function(el, i) {\n                                //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\n                                artistList[i].image = STORED_ARTISTS[el.artist].image[0][\"#text\"];\n                                artistList[i].url = STORED_ARTISTS[el.artist].url;\n                                artistList[i].playcount = STORED_ARTISTS[el.artist].playcount;\n                                // if (artistList[i].users) {\n                                //     artistList[i].users.push(user);\n                                // } else {\n                                //     artistList[i].users = [user];\n                                // }\n                            });\n                            //countryCountObj är en lista med \"country\"-objekt. \n                            //Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\n                            //dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\n                            countryCountObj[id][user] = artistList;\n                        })\n\n                        map.putCountryCount(countryCountObj);\n\n                        if (currPage > maxPage) {\n                            end();\n                            return;\n                        } else {\n                            getAllArtists();\n                        }\n                    });\n            });\n    }\n\n    var getRecommendations = function() {\n        var currPage = 1,\n            limit = 50,\n            maxPage = 1000 / limit;\n        var countriesList = JSON.parse(window.localStorage.countries);\n\n        var countriesObj = d3.nest().key(function(d) {\n            return d.name;\n        }).rollup(function(d) {\n            return d[0];\n        }).map(countriesList);\n        // Get \"all\" artists from one country\n        // countriesList.forEach(function(country){\n\n        // });\n        api.lastfm.send(\"tag.gettopartists\", [\n            [\"tag\", \"swedish\"],\n            [\"limit\", limit],\n            [\"page\", currPage]\n            ], function(err, data) {\n            var artists = data.topartists.artist;\n            // For each artist, get their tags\n            artists.forEach(function(a) {\n                api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data) {\n                    console.log(data);\n                })\n            })\n            // Look for user's top tags in artist tags\n            // If a lot of matches, save to recommended artists for that country\n        });\n\n    }\n\n    var getUserTags = function(err, data) {\n        /*if (err || data.error) {\n            console.error(\"Erorr in getUserTags\", err, data);\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\n            window.location.replace(window.location.origin + window.location.pathname);\n        }*/\n\n        var c = 0;\n\n        var tagCount = {};\n\n        console.log(\"Gotta get tags\")\n\n        var topArtists = data.topartists.artist;\n        var done = function() {\n            // make list of tags to sort\n            USER_TAGS = [];\n            //Remove specific tags from user's top tags\n            forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\"];\n            d3.keys(tagCount).forEach(function(el) {\n                var nogood = false\n                for (i = 0; i < forbidden.length; i++) {\n                    if (el === forbidden[i]) {\n                        nogood = true;\n                    }\n                }\n                if (!nogood) {\n                    USER_TAGS.push({\n                        tag: el,\n                        count: tagCount[el]\n                    });\n                }\n            })\n            USER_TAGS.sort(function(a, b) {\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n            });\n            console.log(\"Done getting tags, saved to localStorage.user_tags\")\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\n        }\n\n\n        topArtists.forEach(function(el, i) {\n            // get top ten tags and save to users tag count....\n            setTimeout(function() { // Set timeout to not stop artists from loading...\n                api.lastfm.send(\"artist.gettoptags\", [[\"artist\", el.name]], function(err, data) {\n                    taglist = data.toptags.tag;\n                    if (taglist) {\n                        var lim = Math.min(taglist.length, 10);\n                        for (var i = 0; i < lim; i++) {\n                            if (tagCount[taglist[i].name]) {\n                                tagCount[taglist[i].name]++;\n                            } else {\n                                tagCount[taglist[i].name] = 1;\n                            }\n                        }\n                        // console.log(c, topArtists.length)\n                    }\n\n                    c++;\n                    if (c == topArtists.length - 1) {\n                        done();\n                    }\n                });\n            }, Math.random() * 3000);\n        });\n\n    }\n\n    var begin = function() {\n        // fade out username input box\n        var welcomeOverlay = d3.select(\"#welcome-container\");\n        welcomeOverlay.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function() {\n                welcomeOverlay.remove();\n            });\n\n        // Fade in loader\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\n        d3.select(\"#loading-text\").html(\"Getting library...\");\n        setTimeout(function() {\n            if (d3.select(\"#loading-text\").html() === \"Getting library...\") {\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\n\n                setTimeout(function() {\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\n                            .style(\"pointer-events\", \"all\");\n                    }\n                }, 8000);\n            }\n        }, 8000);\n\n        // Fade in legend, progress-bar etc\n        d3.selectAll(\".on-map-view\").style({\n            \"visibility\": \"visible\",\n            //            \"opacity\": 0\n        }) //.transition().duration(1000).style(\"opacity\", 1);\n\n        // Get user tags\n        api.lastfm.send(\"user.gettopartists\", [[\"user\", user], [\"period\", \"12months\"], [\"limit\", \"50\"]], getUserTags);\n\n        // Get user friends\n        api.getFriends(function(err, data) {\n            try {\n                var friends = data.friends.user;\n                var i = 0;\n                var friendName = d3.select(\"#friend-name\");\n\n                var updateName = function() {\n                    friendName.html(\"\");\n                    friendName.append(\"a\").attr({\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\n                        target: \"_self\",\n                    }).html(friends[i].name);\n                }\n\n                d3.selectAll(\".arrow\").on(\"click\", function() {\n                    if (d3.select(this).classed(\"left\")) {\n                        // Go left\n                        i = (i === 0 ? friends.length - 1 : i - 1);\n                    } else {\n                        // Go right\n                        i = (i + 1) % friends.length;\n                    }\n\n                    updateName();\n                })\n\n                updateName();\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        if (CACHED_USERS[user]) {\n            // TODO: use timestamp\n            console.log(\"No new artists on last.fm!\");\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\n\n            // Get number of artists for screenshot etc.\n            api.lastfm.send(\"library.getartists\", [[\"user\", user], [\"limit\", 1], [\"page\", 1]],\n                function(error, responseData) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                });\n\n            setTimeout(function() {\n                map.putCountryCount(countryCountObj);\n                end();\n            }, 1000)\n        } else {\n            // Save theme\n            var theme = window.localStorage.theme;\n            window.localStorage.clear();\n            if (theme) {\n                window.localStorage.theme = theme;\n            }\n            getAllArtists();\n        }\n    }\n\n    var end = function() {\n        // We're done, fade out loader\n        var loader = d3.select(\".loader\");\n        loader.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function() {\n                loader.remove();\n            });\n        //Also fade out progress bar text (after a short delay)\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\n            .style(\"opacity\", 0);\n\n        CACHED_USERS = {};\n        CACHED_USERS[user] = new Date().getTime();\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\n    }\n\n    // // Set theme\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\n\n    // Try to get username from url\n    var param = window.location.href.split(\"username=\")[1];\n\n    if (param) { // We already have a user\n        // set up keyboard shortcuts\n        window.addEventListener(\"keydown\", function(evt){\n            switch(evt.keyCode){\n                // s\n                case 83: screenshot.render(); break;\n                // t\n                case 84: nextTheme(); break;\n                default: break;\n            }\n        });\n        \n        if (param.length > 15) {\n            param = param.substr(0, 15);\n        }\n        user = param;\n        SESSION.name = param;\n        begin();\n    } else {\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\n    }\n})();","/* requires:\napi/api.js\napi/lastfm.js\nscript.js\n*/\n\nvar map = {};\n//White theme default:\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\nvar legend;\nvar countryScore = 0;\n\n\n(function(window, document) {\n  d3.select(window).on(\"resize\", throttle);\n\n  var doThrottle = false;\n  var filter = \"artists\"; // filter by artists or plays\n\n  var zoom = d3.behavior.zoom()\n    .scaleExtent([1, 9])\n    .on(\"zoom\", move);\n\n\n\n  // var width = document.getElementById('map-container').offsetWidth;\n  // var height = width / 1.8;\n\n  var height, width;\n\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\n  countryCount = {};\n\n  //Variables needed to update scale and legend\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\n  var maxartists = 1,\n    maxplaycount = 0;\n\n  //Setting color and range to be used\n  var color;\n\n  // Set theme\n  var theme = window.localStorage.theme || \"pink_white\";\n\n  map.drawPlays = function() {\n    filter = \"scrobbles\";\n    redraw();\n  }\n\n  /**\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\n   */\n  function updateDimensions() {\n    height = window.innerHeight - 5;\n    width = document.getElementById('map-container').offsetWidth;\n  }\n\n  //Returns total number of plays for country\n  function getCountryPlaycount(c) {\n    if (countryCount[c.id]) {\n      var count = 0;\n      for (i = 0; i < countryCount[c.id].length; i++) {\n        count += countryCount[c.id][i].playcount;\n      }\n      return count;\n    } else return 0;\n\n  }\n\n\n  function updateProgressBar() {\n    var progressPro = (countryScore / 197);\n\n    return progressPro;\n\n  }\n\n\n\n  //Function to format numbers over 1000 with a space\n  function numbersWithSpace(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  }\n  /**\n   * Randomize array element order in-place.\n   * Using Fisher-Yates shuffle algorithm.\n   */\n  function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  //Function to remove duplicates from arrays\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  function updateScale() {\n    var max = -1;\n    switch (filter) {\n      case \"artists\":\n        max = maxartists;\n        for (i = 0; i < 5; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1))\n        }\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\n        break;\n      case \"scrobbles\":\n        max = maxplaycount;\n        for (i = 0; i < 7; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\n        }\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\n        break;\n    }\n\n\n    color = d3.scale.threshold()\n      .domain(mydomain)\n      .range(colorArray);\n  }\n\n  function updateLegend() {\n    //Remove decimals from domain\n    var x = 0;\n    var len = mydomain.length\n    while (x < len) {\n      mydomain[x] = Math.ceil(mydomain[x]);\n      x++;\n    }\n\n    //Array of text\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\n\n    //Create Legend\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\n      .data(mydomain);\n\n    //Color box sizes\n    var ls_w = 20,\n      ls_h = 20;\n    var x = width * 0.03;\n    var y = height * 0.03;\n\n    // Add legend filter text\n    var text1 = svg.select(\"#filter-text\")\n      .attr(\"x\", x)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(\"Number of \");\n    var text2 = svg.select(\"#filter\")\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(filter);\n    text2.on(\"click\", function() {\n      // Toggle filter method\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\n      redraw();\n    })\n\n    var enter = legend.enter()\n      .append(\"g\")\n      .attr(\"class\", \"legend\");\n\n    enter.append(\"rect\")\n      .attr(\"x\", x)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - 2 * ls_h - y;\n      })\n      .attr(\"width\", ls_w)\n      .attr(\"height\", ls_h)\n      .style(\"fill\", function(d) {\n        return color(d);\n      });\n    enter.append(\"text\")\n      .attr(\"x\", x + 30)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - ls_h - 4 - y;\n      });\n\n    legend.selectAll(\"text\").data(mydomain)\n      .text(function(d, _, i) {\n        return legend_labels[i];\n      });\n  }\n\n  /*var themeButton = d3.select(\"#map-container\").append(\"button\").attr(\"class\",\n\n    \"theme-button\").html(\"Paint it black\"); */\n\n  /*var changeTheme = d3.select(\"#changeTheme\").append(\"button\").attr(\"class\",\n\n    \"theme-button\").html(\"Paint it black\");*/\n\n\n\n  //progressbar...\n\n\n  //Variables for color legend\n\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\n    \"tooltip hidden\");\n\n  var infoContainer = d3.select(\"body\").append(\"div\").attr(\"class\",\n    \"infoContainer hidden\").attr(\"id\", \"infoContainer\");\n\n  var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\n\n\n  var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"cnameDiv\").attr(\"id\", \"cname\");\n\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"detailsDiv\").attr(\"id\", \"details\");\n\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"recoDiv\").attr(\"id\", \"recommendations\");\n\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\n\n  var closeButton;\n\n  var offsetL;\n  var offsetT;\n\n\n\n  //-----------THEME FUNCTIONS---------------------//\n\n  function toBlackTheme() {\n    d3.select(\"body\").classed(\"black-theme\", true);\n    changeTheme.html(\"Paint it white\");\n    changeTheme.style(\"color\", \"white\");\n    colorArray = [\"#211f1D\", \"#211f1D\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\n    toPinkBlack();\n    theme = \"black\";\n    redraw(true);\n  }\n\n  function toWhiteTheme() {\n    d3.select(\"body\").classed(\"black-theme\", false);\n    changeTheme.html(\"Paint it black\");\n    changeTheme.style(\"color\", \"black\");\n    colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\n    //toRedWhite();\n    theme = \"white\";\n    redraw(true);\n  }\n\n\n  //---------------------- Color preferences -------------//\n  var themes = {\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\n  };\n\n  nextTheme = function(toTheme) {\n    // Go to next theme\n    var themeList = d3.keys(themes);\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\n    colorArray = themes[theme];\n\n    //Change body class\n    d3.select(document.body).attr(\"class\", theme);\n\n    // Save :)\n    window.localStorage.theme = theme;\n\n    // Redraw map :)\n    if (topo) redraw();\n  }\n  map.nextTheme = nextTheme;\n\n  nextTheme(theme);\n  updateScale();\n  updateDimensions();\n  setup(width, height);\n\n  function setup(width, height) {\n    projection = d3.geo.naturalEarth()\n      .translate([(width / 2), (height / 2) + height * 0.08])\n      .scale(width / 1.7 / Math.PI);\n\n    path = d3.geo.path().projection(projection);\n\n    svg = d3.select(\"#map-container\").append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\n      .call(zoom)\n      .on(\"click\", click)\n      .append(\"g\");\n\n    g = svg.append(\"g\");\n    svg.append(\"g\").attr(\"id\", \"legend\")\n    svg.append(\"text\").attr({\n      id: \"filter-text\",\n      class: \"legend\"\n    });\n    svg.append(\"text\").attr({\n      id: \"filter\",\n      class: \"legend\"\n    });\n  }\n\n  //Load country aliases and names\n  if (!window.localStorage.countries) {\n    d3.csv(\"assets/data/countries.csv\", function(err, countries) {\n      countryNames = countries;\n\n      countries.forEach(function(i) {\n        //Turning CSV values into numeric data\n        i.id = +i.id;\n      });\n\n      // save countries\n      window.localStorage.countries = JSON.stringify(countries);\n    });\n\n  } else {\n    countryNames = JSON.parse(window.localStorage.countries);\n  }\n  //Load map\n  d3.json(\"assets/data/world-50m.json\", function(error, world) {\n\n    var countries = topojson.feature(world, world.objects.countries).features;\n\n    topo = countries;\n    draw(topo, true);\n\n  });\n\n  function draw(topo, redrawMap) {\n    var country = g.selectAll(\".country\").data(topo);\n\n    var progress = d3.select(\"#progress-bar\").style({\n      \"height\": updateProgressBar() * 100 + \"%\",\n      \"background-color\": colorArray[6]\n    });\n    d3.select(\"#countryCount\").style({\n      \"background-color\": colorArray[1],\n      \"border-color\": colorArray[6]\n    })\n    //Show progressbar text on mouse-over\n    .on(\"mousemove\", function() {\n      d3.select(\"#progress-text\")\n        .transition().duration(150).style(\"opacity\", 0.9);\n    })\n      .on(\"mouseout\", function() {\n        d3.select(\"#progress-text\").transition().duration(150).style(\"opacity\", 0);\n      });\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/197 countries\")\n\n    //Draw countries\n    if (redrawMap) {\n      country.enter().insert(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"id\", function(d, i) {\n          return d.id;\n        })\n        .attr(\"title\", function(d, i) {\n          return d.properties.name;\n        })\n        .style(\"fill\", function() {\n          return color(0);\n        });\n    }\n    //Color countries\n    country.transition().style(\"fill\", function(d) {\n      switch (filter) {\n        case \"artists\":\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\n            color(0);\n          break;\n        case \"scrobbles\":\n          return color(getCountryPlaycount(d));\n          break;\n      }\n      // return countryCount[d.id] ? color(countryCount[d.id].length) :\n      //   color(0);\n    })\n\n    //offsets for tooltips\n    offsetL = document.getElementById('map-container').offsetLeft;\n    offsetT = document.getElementById('map-container').offsetTop;\n\n    //tooltips\n    country\n      .on(\"mousemove\", function(d, i) {\n        var name;\n        var tag;\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        tooltip.classed(\"hidden\", false)\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\n            mouse[1] +\n            offsetT + 10) + \"px\")\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\n\n      })\n      .on(\"mouseout\", function(d, i) {\n        tooltip.classed(\"hidden\", true);\n      });\n\n\n\n    //Show div with top 10 artists for country when clicked\n    country.on(\"click\", function(d, i) { //.on(\"click\", clicked)\n      var name;\n      var tag;\n      var id;\n\n      clicked(d);\n\n      countryNames.forEach(function(e, i) {\n        if (e.id === d.id) {\n          name = e.name;\n          tag = e.tag;\n          id = d.id;\n        };\n      })\n      var mouse = d3.mouse(svg.node()).map(function(d) {\n        return parseInt(d);\n      });\n\n      closeButton\n        .on(\"click\", function(d, i) {\n          //detailsDiv.classed(\"hidden\", true);\n          removeArtistDiv();\n          // zoom out map, fulhack\n          clicked(centered);\n        }) //\"stäng\" onclick slutar\n\n    }) // on click slutar\n\n  }\n  /*draw slutar här*/\n\n\n\n  /*------------------------här börjar alla functioner--------------------------*/\n\n\n  /*-------redraw----*/\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean \n  function redraw(redrawMap) {\n    updateDimensions();\n\n    if (redrawMap) {\n      d3.select('svg').remove();\n      setup(width, height);\n    }\n\n    maxartists = d3.max(d3.keys(countryCount), function(cname) {\n      return countryCount[cname].length;\n    });\n    maxplaycount = d3.max(d3.keys(countryCount), function(cname) {\n      return getCountryPlaycount({\n        id: cname\n      });\n    })\n    updateScale();\n    updateLegend();\n\n    draw(topo, redrawMap);\n  }\n\n\n  /**\n   * Moves the map to the specified location or based on the current zoom event\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\n   * @param  {Number} sc      Optional: Scale factor\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\n   */\n  function move(tr, sc, animate) {\n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\n\n    // If move was not initiated by clicking on a country, deselect the selected country\n    if (!tr && !sc && centered) {\n      highlightCountry(false);\n      removeArtistDiv();\n      centered = null;\n    }\n\n    var zscale = s;\n    var h = height / 4;\n\n    t[0] = Math.min(\n      (width / height) * (s - 1),\n      Math.max((width * 1.2) * (1 - s), t[0])\n    );\n\n    t[1] = Math.min(\n      h * (s - 1) + h * s,\n      Math.max(height * (1 - s) - h * s, t[1])\n    );\n\n    zoom.translate(t);\n    zoom.scale(s);\n\n    if (animate) {\n      g.transition().duration(950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n\n    } else {\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n    }\n\n    //adjust the country hover stroke width based on zoom level\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\n  }\n  map.move = move;\n\n  var throttleTimer;\n\n  function throttle() {\n    window.clearTimeout(throttleTimer);\n    throttleTimer = window.setTimeout(function() {\n      redraw(true);\n      move([0, 0], 1); // Reset position\n    }, 200);\n  }\n\n\n  //geo translation on mouse click in map\n  function click() {\n    var latlon = projection.invert(d3.mouse(this));\n    // console.log(latlon);\n    //console.log(countryCount);\n  }\n\n\n  /*----------------------------makeArtistDiv------------------------------------------------*/\n  //Skapar \"details-on-demand\"-divarna.\n  function makeArtistDiv(d) {\n\n    //lägga till namn till detailseDiv\n    var name;\n    var tag;\n    var recoms;\n    //var id;\n    countryNames.forEach(function(e, i) {\n      if (e.id === d.id) {\n        name = e.name;\n        tag = e.tag;\n        //id = d.id;\n      };\n    })\n    d3.select(\"#recommendations\").html(\"\");\n    //Show country name and info div on left hand side\n    infoContainer\n      .classed(\"hidden\", false)\n      .transition()\n      .style(\"opacity\", 1)\n      .duration(750);\n\n    //Hide progressbar when showing \n    d3.selectAll(\"#countryCount, .on-map-view\")\n      .classed(\"hidden\", true);\n\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"class\", \"close-button\").html(\"X\");\n\n    //Populate country information div\n    cnameDiv\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\n      .append(\"h1\").html(name);\n    d3.select(\"#cnameCont\").append(\"h5\")\n      .html(function() {\n        if (countryCount[d.id])\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\n        else return \"No artists yet - Find new here ->\"\n      })\n\n\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\n\n\n      d3.select(\"#details\").append(\"h4\")\n        .html(\"Your top artists tagged with #\" + name + \" or #\" + tag + \": \")\n        .attr(\"class\", \"details-h4\");\n\n      //Show top 5 artists\n      for (i = 0; i < 5; i++) {\n        if (countryCount[d.id][i]) {\n          var index = i;\n          var artistDiv = d3.select(\"#details\").append(\"div\").attr({\n              \"class\": \"artist-div lowlight\",\n              \"data-artist\": countryCount[d.id][i].artist\n            })\n            .on(\"click\", function() {\n              // Lowlight not selected artists\n              d3.selectAll(\".artist-div\").classed({\n                \"lowlight\": true,\n                \"highlight\": false\n              });\n              // Highlight selected artist\n              d3.select(this).classed({\n                \"highlight\": true,\n                \"lowlight\": false\n              });\n              makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\n            });\n          var artistLink = artistDiv.append(\"a\").style(\"display\", \"block\")\n          artistLink.append(\"div\")\n            .attr(\"class\", \"image-div\")\n            .style(\"background-image\", \"url(\" + \"'\" + countryCount[d.id][i].image + \"'\" + \" )\");\n\n          var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\n\n          playCountDiv.append(\"p\")\n            .html(\"<b>\" + countryCount[d.id][i].artist + \"</b><br>\" + countryCount[d.id][i].playcount + \" scrobbles\")\n            .attr(\"class\", \"details-p\");\n        } else {\n          i = 5;\n        }\n      }\n    } else { //Om landet vi klickat på inte har några lyssnade artister... \n      console.log(\"landet har inga lyssnade artister\");\n    }\n    //\"Recommended\"-heading\n    d3.select(\"#recommendations\").append(\"h4\")\n      .html(\"You may like: \")\n      .attr(\"class\", \"recom-h4\");\n\n    // show loading message\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\n      .attr(\"id\", \"rec-loading\")\n      .html(\"Looking for artists tagged #\" + tag);\n    // recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\n    recLoadingDiv.append(\"img\")\n      .attr({\n        id: \"rec-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      })\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\n\n\n\n    //Get list of recommendations for country based on tags!\n    api.getRecommendations(tag, function(taglist) {\n      // Return if this callback is from an old (not active) country\n      if (!centered || centered.id !== d.id) {\n        return;\n      }\n      // Show loading message\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\n\n      //Get list of recommendations for country based on country name!\n      api.getRecommendations(name, function(namelist) {\n        // Return if this callback is from an old (not active) country\n        if (!centered || centered.id !== d.id) {\n          return;\n        }\n        //Show loading message\n        recLoadingMessage.html(\"Loading images for recommended artists\");\n\n        //Join the two lists\n        var list = taglist.concat(namelist);\n\n        //Removing duplicates from the list!\n        var arr = {};\n        for (var i = 0; i < list.length; i++)\n          arr[list[i]['name']] = list[i];\n\n        list = new Array();\n        for (key in arr)\n          list.push(arr[key]);\n\n        list.sort(function(a, b) {\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n        });\n\n        //Get the first 20 artists\n        list = list.slice(0, 20);\n        //Randomize list\n        list = shuffleArray(list);\n\n        if (list.length === 0) { // Found no recommendations\n          recLoadingDiv.remove();\n          d3.select(\"#recommendations\").append(\"p\")\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\n          d3.select(\"#recommendations\").append(\"a\").attr({\n            href: \"http://www.last.fm/tag/\" + name,\n            target: \"_blank\",\n          }).html(\"Try searching last.fm yourself!\");\n        }\n\n        for (i = 0; i < Math.min(list.length, 5); i++) {\n          // Return if this callback is from an old (not active) country\n          if (centered.id !== d.id) {\n            return;\n          }\n\n          var artisturl, artistimg, artistname;\n\n          //Get url and images for recommended artists!\n          api.getArtistInfo(list[i].name, function(art) {\n            recLoadingDiv.remove();\n            var artisturl = art[0].url;\n            var artistimg = art[0].image;\n            var artistname = art[0].name;\n\n\n            var recoArtistDiv = d3.select(\"#recommendations\").insert(\"div\", \"#summaryText\").attr(\"class\", \"artist-div lowlight\");\n            var recoArtistLink = recoArtistDiv.append(\"a\").style(\"display\", \"block\")\n              //.attr(\"href\", artisturl)\n              //.attr(\"target\", \"_blank\");\n            recoArtistLink.append(\"div\")\n              .attr(\"class\", \"image-div\")\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\n\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\n\n            recoArtistInfoDiv.append(\"p\")\n              .html(\"<b>\" + artistname + \"</b>\")\n              .attr(\"class\", \"details-p\");\n\n            recoArtistDiv.on(\"click\", function() {\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\n                \"lowlight\": true,\n                \"highlight\": false\n              });\n\n              d3.select(this).classed({ // Highlight selected artist\n                \"highlight\": true,\n                \"lowlight\": false\n              });\n              makeSummaryDiv(artistname);\n            });\n\n          })\n        }\n\n\n      })\n    });\n\n  }\n\n  function removeArtistDiv() {\n    infoContainer.transition().style(\"opacity\", 0).duration(1000);\n    infoContainer.classed(\"hidden\", true);\n    d3.selectAll(\"#countryCount, .on-map-view\").classed(\"hidden\", false);\n    d3.selectAll(\".artist-div\").remove(\"div\");\n    d3.select(\".close-button\").remove(\"button\");\n    d3.select(\".details-h\").remove(\"p\");\n    d3.select(\".details-h4\").remove(\"h4\");\n    d3.select(\".recom-h4\").remove(\"h4\");\n\n\n\n    cnameDiv.classed(\"hidden\", true);\n    d3.select(\"#cnameCont\").remove(\"h1\");\n    d3.select(\"#cnameCont\").remove(\"h5\");\n  }\n\n  function makeSummaryDiv(artistname) {\n    var usertaglist = [];\n    //console.log(usertaglist);\n    var artisttaglist = [];\n\n    d3.select(\"#summaryText\").remove();\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\n    d3.select(\"#summaryText\").append(\"img\")\n      .attr({\n        id: \"sum-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      });\n\n    //Get artist info from Lastfm\n    api.getArtistInfo(artistname, function(art) {\n      var text = art[0].description.replace(/(\\n)+/g, '<br />');\n      var text = text.substring(6);\n      // console.log(text)\n      //Get artist's top tags\n      artisttaglist = art[0].tags;\n      //Create list of user tags\n\n      //Make list of artist tags which are also user's top tags:\n      for (y = 0; y < 15; y++) {\n        for (z = 0; z < artisttaglist.length; z++) {\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\n            usertaglist.push(USER_TAGS[y].tag)\n          }\n        }\n      }\n\n      //Create combined tag list and remove duplicates\n      var taglist = usertaglist.concat(artisttaglist);\n      taglist = taglist.filter(function(elem, pos) {\n        return taglist.indexOf(elem) == pos;\n      })\n      // Remove loading text\n      d3.select(\"#summaryText\").html(\"\");\n      //Create containing div\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\n      summaryText.style(\"max-height\", h + \"px\");\n\n      summaryText.append(\"h4\").html(artistname);\n\n      //Show top 7 tags\n      for (i = 0; i < Math.min(taglist.length, 6); i++) {\n        var tagdiv = summaryText.append(\"div\").attr(\"class\", \"tagdiv\").append(\"h4\").html(\"#\" + taglist[i]);\n        //Mark all user tags\n        for (p = 0; p < usertaglist.length; p++) {\n          if (taglist[i] === usertaglist[p])\n            tagdiv.classed(\"usertag\", true);\n        }\n      }\n      //Display artist summary\n      summaryText.append(\"p\").html(text || \"No description available - <a href='http://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\n\n    })\n\n  }\n\n  /**\n   * Toggles highlight of a specified country\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\n   */\n  function highlightCountry(highlight, countryElement) {\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\n\n    if (highlight) {\n      // Fade out all other countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", function() {\n          return (+this.id === +countryElement.id ? 1.0 : 0.3);\n        })\n\n      var ce = d3.select(document.getElementById(\"\" + countryElement.id)); // d3 can't select ids that are only numbers\n      ce.classed(\"highlighted\", true);\n    } else {\n      // Fade in all countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", 1.0)\n    }\n\n  }\n\n  function clicked(d) { //d är det en har klickat på\n\n    var x, y, k;\n    //bounding box for clicked country\n    var b = path.bounds(d);\n\n    getCountryPlaycount(d);\n\n    //Set scale\n    var modscaleX = (b[1][0] - b[0][0]);\n    var modscaleY = (b[1][1] - b[0][1]);\n\n    //Dom't zoom too far with small countries!\n    if (modscaleX < 80)\n      modscaleX = 80;\n\n    //Landet är inte centrerat redan\n    if (d && centered !== d) {\n      centered = d;\n      removeArtistDiv();\n      makeArtistDiv(d);\n      highlightCountry(true, d);\n\n\n      //Special rules for special countries:\n      switch (d.id) {\n        case 840: //US\n          k = 3;\n          x = -(b[1][0] + b[0][0]) / 3;\n          y = -(b[1][1] + b[0][1]) / 1.7;\n          break;\n        case 250: //France\n          k = 7.012;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 3.4;\n          break;\n        case 528: //Netherlands\n          k = 9.0124;\n          x = -(b[1][0] + b[0][0]) / 1.5;\n          y = -(b[1][1] + b[0][1]) / 3.3;\n          break;\n        case 643: //Russia\n          k = 1.9;\n          x = -(b[1][0] + b[0][0]) / 1.25;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n        case 554: //New Zeeland\n          k = 4;\n          x = -(b[1][0] + b[0][0]) / 0.90;\n          y = -(b[1][1] + b[0][1]) / 1.8;\n          break;\n        case 36: //Australia\n          k = 3.3;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 2.1;\n          break;\n\n        default: //Everybody else\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n      }\n\n      //Landet är redan centrerat\n    } else {\n      x = -width / 2;\n      y = -height / 2 - height * 0.08;\n      k = 1\n      removeArtistDiv();\n      highlightCountry(false);\n      centered = null;\n\n      //detailsDiv.classed(\"hidden\", true);\n    }\n\n    var pt = projection.translate();\n    // Tell map to move with animation\n    // Basically does the same as before: translate to middle,\n    // then to x and y with respect to scale\n    move([pt[0] + x * k, pt[1] + y * k], k, true);\n\n  }\n\n  //function to add points and text to the map (used in plotting capitals)\n  function addpoint(lat, lon, text) {\n\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\n    var x = projection([lat, lon])[0];\n    var y = projection([lat, lon])[1];\n\n    gpoint.append(\"svg:circle\")\n      .attr(\"cx\", x)\n      .attr(\"cy\", y)\n      .attr(\"class\", \"point\")\n      .attr(\"r\", 1.5);\n\n    //conditional in case a point has no associated text\n    if (text.length > 0) {\n\n      gpoint.append(\"text\")\n        .attr(\"x\", x + 2)\n        .attr(\"y\", y + 2)\n        .attr(\"class\", \"text\")\n        .text(text);\n    }\n\n  }\n\n  /** \"PUBLUC\" FUNCTIONS **/\n  map.putCountryCount = function(object) {\n    countryCount = JSON.parse(JSON.stringify(object));\n    countryScore = 0;\n    var countryList = [];\n\n    // Extract info for the current user\n    d3.keys(countryCount).forEach(function(id) {\n      if (countryCount[id][SESSION.name]) {\n        countryCount[id] = countryCount[id][SESSION.name];\n        countryScore = countryScore + 1;\n        countryList.push(+id)\n      } else {\n        // delete countryCount[id];\n      }\n    })\n\n    if (topo) redraw();\n\n    window.countryScore = countryScore;\n\n  }\n})(window, document)","var screenshot = {};\n\n(function(window, document) {\n\tscreenshot.render = function() {\n\t\tvar titleString,\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\n\t\t\timg;\n\n\t\tvar explrLogo = new Image();\n\n\t\tvar svg = d3.select(\"svg\");\n\t\tvar w = svg.attr(\"width\");\n\t\tvar h = svg.attr(\"height\");\n\n\t\tvar canvas = document.createElement(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\n\t\tvar textColor = window.getComputedStyle(document.body).color;\n\n\t\tvar drawCenteredText = function(obj) {\n\t\t\tctx.font = obj.font;\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\n\t\t\tif (obj.lineWidth) {\n\t\t\t\tctx.lineWidth = obj.lineWidth;\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\t\t\t}\n\t\t}\n\n\t\tcanvas.width = w;\n\t\tcanvas.height = h;\n\n\t\t// insert background rect\n\t\tsvg.insert(\"rect\", \"g\")\n\t\t\t.attr({\n\t\t\t\tid: \"background-rect\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\theight: \"100%\",\n\n\t\t\t})\n\t\t\t.style({\n\t\t\t\tfill: backgroundColor,\n\t\t\t});\n\n\t\t// Add color, font to legend text\n\t\td3.selectAll('.legend text, text.legend').style({\n\t\t\t\"font-family\": function() {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\n\t\t\t},\n\t\t\t\"font-size\": function() {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\n\t\t\t},\n\t\t\t\"fill\": textColor,\n\t\t});\n\t\td3.selectAll(\".legend rect\").style({\n\t\t\tstroke: backgroundColor,\n\t\t})\n\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\n\n\t\texplrLogo.onload = function() {\n\t\t\t/* Add text and shiiet */\n\t\t\t// Add text background box\n\t\t\tctx.save(); // To draw with different opaticy\n\t\t\tctx.globalAlpha = 0.6;\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tscoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 197 countries\";\n\t\t\ttitleString = SESSION.name + \"'s musical world map\";\n\t\t\tctx.font = \"34px Patua One\";\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\n\t\t\tctx.fillStyle = textColor;\n\n\t\t\t// Add text\n\t\t\tctx.fillStyle = textColor;\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: titleString,\n\t\t\t\tfont: \"34px Patua One\",\n\t\t\t\ty: h - 60,\n\t\t\t});\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: scoreString,\n\t\t\t\tfont: \"20px Didact Gothic\",\n\t\t\t\ty: h - 40,\n\t\t\t});\n\n\t\t\t// Add explr.fm logo\n\t\t\tctx.restore();\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\n\n\t\t\td3.select(\"#background-rect\").remove();\n\n\t\t\t//console.log(canvas.toDataURL())\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL();\n\t\t\t// d3.select(\"body\").append(img);\n\t\t\t// \n\t\t\twindow.open(canvas.toDataURL(), \"_blank\");\n\t\t}\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\n\t}\n\n})(window, document);"],"sourceRoot":"/source/"}