{"version":3,"sources":["api/lastfm.js","script.js","api/api.js","utils.js","map.js","screenshot.js"],"names":["api","lastfm","key","url","setKeyInfo","success","keyInfo","total","fails","keyI","keys","window","forEach","k","send","method","options","callback","retries","undefined","xhr","gotResponse","aborted","tryGet","tries","cb","avgErrors","reduce","avg","i","arr","length","bestKeys","_url","_key","filter","d3","json","el","replace","e","d","clearTimeout","timeout","JSON","parse","response","error","errInfo","errorCode","try","message","_JSON$parse","console","warn","setTimeout","bind","abort","STORED_ARTISTS","CACHED_NO_COUNTRIES","superCount","utils","getCountriesData","promise","Promise","res","rej","csv","err","data","id","names","split","tags","mainName","tag","name","all","then","_ref","_ref2","_slicedToArray","countryData","hardcodedCountries","map","splits","concat","_objectSpread","splice","flat","alias","nest","toLowerCase","cname","getCountry","artist","hardcodedTagName","log","country","responseData2","demonymTag","countryTag","bestTag","toptags","theTroubles","count","some","t","tname","includes","info","Object","assign","getCountries","artists","checkCount","select","html","SESSION","total_artists","localforage","setItem","returnList","returnObject","push","Date","getTime","getTags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","cancelRecommendationRequests","getRecommendations","recommendations","USER_TAGS","slice","userTagObj","rollup","xhr1","tagCounts","topartists","a","num","xhr2","data2","hasTags","sort","b","getFriends","document","STORED_ARTISTS_PROMISE","exportToCSV","countryCountObj","list","countryNames","countryCount","countryId","countryName","json2csv","_ref3","_ref4","localeCompare","fields","label","value","row","acc","playcount","replaceAll","open","encodeURI","getItem","val","CACHED_NO_COUNTRIES_PROMISE","CACHED_USERS","localStorage","cached_users","clearExplrCache","theme","clear","legend","getAllArtists","user","currPage","responseData","confirm","saveToStorage","location","reload","maxPage","totalPages","remove","style","artistNames","newArtist","dataObj","leaves","artistList","addArtistsWithNoCountry","putCountryCount","end","getUserTags","alert","origin","pathname","c","tagCount","topArtists","forbidden","taglist","lim","Math","min","nogood","user_tags","stringify","random","randomcountrylist","listOfArtistsWithNoCountry","noCountriesListEl","_art","append","visibility","pointer-events","loader","transition","duration","each","delay","param","href","addEventListener","evt","keyCode","screenshot","render","ga","hitType","eventCategory","eventAction","eventLabel","nextTheme","substr","welcomeOverlay","selectAll","friends","friendName","updateName","attr","target","on","this","classed","floor","object","colorArray","countryScore","throttleTimer","redraw","move","height","width","topo","projection","path","svg","g","centered","color","countryPlaylists","zoom","behavior","scaleExtent","mydomain","maxartists","maxplaycount","updateDimensions","innerHeight","getElementById","offsetWidth","getCountryPlaycount","numbersWithSpace","x","toString","updateScale","max","pow","E","scale","threshold","domain","range","drawPlays","closeButton","offsetL","offsetT","tooltip","infoContainer","cnameDiv","themes","blue_black","green_black","pink_black","pink_white","green_white","red_white","toTheme","themeList","indexOf","body","setup","geo","naturalEarth","translate","PI","call","click","class","draw","redrawMap","background-color","border-color","enter","insert","properties","offsetLeft","offsetTop","mouse","node","parseInt","clicked","removeArtistDiv","len","ceil","legend_labels","y","text1","text","getComputedTextLength","_","tr","sc","animate","event","s","h","highlightCountry","invert","makeArtistDiv","nameTags","n","join","tagTags","showNextFive","showPreviousFive","showArtists","currentNoArtists","currentCount","pl","find","linkdiv","lastFmLink","recLoadingDiv","uri","playlistName","first","last","initial","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","recLoadingMessage","src","display","margin","namelist","Array","array","j","temp","shuffleArray","art","artistimg","artistname","recoArtistDiv","artisttaglist","usertaglist","summaryText","z","elem","pos","offsetHeight","tagdiv","p","countryElement","bounds","modscaleX","modscaleY","pt","countries","world","topojson","feature","objects","features","countryList","drawCenteredText","obj","ctx","font","fillText","string","w","measureText","lineWidth","strokeStyle","strokeText","explrLogo","Image","canvas","createElement","getContext","backgroundColor","getComputedStyle","textColor","fill","font-family","font-size","stroke","canvg","XMLSerializer","serializeToString","onload","save","globalAlpha","fillStyle","scoreString","titleString","fillRect","restore","drawImage","toDataURL","getElementsByClassName","close"],"mappings":"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","file":"../all.min.js","sourcesContent":["var api = api || {};\n\napi.lastfm = {};\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\napi.lastfm.url = \"https://ws.audioscrobbler.com/2.0/\";\n\n(function (api) {\n\tlet keyI = 0;\n\tlet keys = [\n\t\t// https://gitlab.gnome.org/World/lollypop/blob/master/lollypop/lastfm.py\n\t\t\"7a9619a850ccf7377c46cf233c51e3c6\",\n\t\t\n\t\t// https://github.com/ampache/ampache/issues/1694\n\t\t\"13893ba930c63b1b2cbe21441dc7f550\",\n\n\t\t// https://www.reddit.com/r/lastfm/comments/3okkij/cant_create_lastfm_api_key/\n\t\t\"4cb074e4b8ec4ee9ad3eb37d6f7eb240\",\n\n\t\t// https://www.w3resource.com/API/last.fm/tutorial.php\n\t\t\"4a9f5581a9cdf20a699f540ac52a95c9\",\n\n\t\t// https://www.reddit.com/r/lastfm/comments/3l3cae/cant_get_a_lastfm_api_key/\n\t\t\"57ee3318536b23ee81d6b27e36997cde\",\n\n\t\t// original explr api key\n\t\t\"865b1653dbe200905a5b75d9d839467a\",\n\n\t\t// https://www.w3resource.com/API/last.fm/example.html\n\t\t\"68b2125fd8f8fbadeb2195e551f32bc4\",\n\n\t\t// https://rstudio-pubs-static.s3.amazonaws.com/236264_81312ba4d795474c8641dd0e2af83cba.html\n\t\t\"1ba315d4d1673bbf88aed473f1917306\"\n\t];\n\tlet keyInfo = window.keyInfo = {};\n\tkeys.forEach(k => keyInfo[k] = { success: 0, fails: 0, total: 0 });\n\n\tlet rotateKey = function () {\n\t\tlet avgErrors = keys.reduce((avg, k, i, arr) => avg + keyInfo[k].fails / arr.length, 0);\n\t\tlet bestKeys = keys.filter(k => keyInfo[k].fails <= avgErrors);\n\t\tbestKeys = bestKeys.length ? bestKeys : keys;\n\t\tlet key = bestKeys[++keyI % bestKeys.length];\n\n\t\t// console.log({ key, avgErrors, bestKeys });\n\n\t\treturn key;\n\t}\n\n\tlet setKeyInfo = function (key, success) {\n\t\tkeyInfo[key].total++;\n\t\tkeyInfo[key].success += success ? 1 : 0;\n\t\tkeyInfo[key].fails += success ? 0 : 1;\n\t}\n\n\t/**\n\t* Send an API call to last.fm\n\t* @param {String} method    The method name (e.g. \"library.getartists\")\n\t* @param {Array} options    An array of tuples (arrays with two elements)\n\t                            with options for the request: [\"key\", \"value\"]\n\t* @param {Function} callback    The callback function to call with the data\n\t                                returned from the request. Takes two arguments,\n\t                                error and data (callback(error, data))\n\t*/\n\tapi.lastfm.send = function (method, options, callback, retries) {\n\t\tlet getUrl = (apiKey) => {\n\t\t\tlet _url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\n\t\t\t\tapiKey + \"&format=json\";\n\n\t\t\toptions.forEach(function (el) {\n\t\t\t\t_url += \"&\" + el[0] + \"=\" +\n\t\t\t\t\t(el[1] + \"\")\n\t\t\t\t\t.replace(\"&\", \"%26\")\n\t\t\t\t\t.replace(\"/\", \"%2F\")\n\t\t\t\t\t.replace(\"+\", \"%2B\")\n\t\t\t\t\t.replace(\"\\\\\", \"%5C\");\n\t\t\t});\n\n\t\t\treturn _url;\n\t\t};\n\n\t\tretries = undefined === retries ? 10 : retries\n\t\tlet xhr, gotResponse, aborted = false;\n\n\t\tfunction tryGet(tries, cb) {\n\t\t\tlet _key = rotateKey();\n\t\t\txhr = d3.json(getUrl(_key), function (e, d) {\n\t\t\t\tif (aborted) {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (e) { // we got an actual server error: 4xx, 5xx\n\t\t\t\t\td = JSON.parse(e.response);\n\t\t\t\t\t// now e and d are the same\n\t\t\t\t} else if (d.error) {\n\t\t\t\t\t// we got 200 BUT it's an error\n\t\t\t\t\te = d;\n\t\t\t\t}\n\n\t\t\t\tif (e) {\n\t\t\t\t\tsetKeyInfo(_key, false);\n\n\t\t\t\t\tlet errInfo = {\n\t\t\t\t\t\tmethod: method,\n\t\t\t\t\t\terrorCode: e && e.error,\n\t\t\t\t\t\ttry: tries,\n\t\t\t\t\t\toptions: options,\n\t\t\t\t\t\tkey: _key,\n\t\t\t\t\t\tmessage: e.message || JSON.parse(e.response)?.message,\n\t\t\t\t\t};\n\t\t\t\t\t// alert(\"ERROR\");\n\t\t\t\t\tif (tries < retries) {\n\t\t\t\t\t\tconsole.warn(\"Retry request: \", errInfo);\n\t\t\t\t\t\tsetTimeout(tryGet.bind(null, tries + 1, cb), tries * 3000);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tries >= retries) {\n\t\t\t\t\t\tconsole.warn(\"Retry failed after \" + retries + \" attempts, will stop trying.\", errInfo);\n\t\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\t\taborted = true;\n\t\t\t\t\t\te = \"ERROR\";\n\t\t\t\t\t\td = {\n\t\t\t\t\t\t\terror: \"Took to long to respond\"\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsetKeyInfo(_key, true);\n\t\t\t\t}\n\n\t\t\t\tgotResponse = true;\n\t\t\t\tcb(e, d);\n\t\t\t});\n\t\t}\n\n\t\ttryGet(0, callback);\n\n\t\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\n\t\tlet timeout = setTimeout(function () {\n\t\t\tif (!gotResponse) {\n\t\t\t\t//console.log(\"GET \" + url + \" took to long, aborting\");\n\t\t\t\txhr.abort();\n\t\t\t\tcallback(\"ERROR\", {\n\t\t\t\t\terror: \"Took to long to respond\"\n\t\t\t\t});\n\t\t\t}\n\t\t}, 20000);\n\n\t\treturn {\n\t\t\tabort: function () {\n\t\t\t\taborted = true;\n\t\t\t\txhr.abort();\n\t\t\t}\n\t\t};\n\t}\n\n})(api);","/* requires:\napi/api.js\napi/lastfm.js\nutils.js\n*/\n\nvar STORED_ARTISTS;\nvar STORED_ARTISTS_PROMISE = localforage.getItem(\"artists\").then(val => \n    STORED_ARTISTS = val || {}\n);\n\nvar CACHED_NO_COUNTRIES;\nvar CACHED_NO_COUNTRIES_PROMISE = localforage.getItem(\"no_countries\").then(val => \n    CACHED_NO_COUNTRIES = val || {}\n);\n\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\nvar SESSION = {};\n\nfunction clearExplrCache() {\n    var theme = window.localStorage.getItem(\"theme\");\n    window.localStorage.clear();\n    window.localStorage.setItem(\"theme\", theme);\n\n    return localforage.clear();\n}\n\nvar countryCountObj = {};\n\n(function () {\n    // user = prompt(\"Input your user name, get top 20 artists\")\n    var user, currPage = 1,\n        maxPage;\n    var count = 0;\n    var tries = 0;\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\n    var listOfArtistsWithNoCountry = [];\n\n    /**\n     * adds artists with no country to the array of artists with\n     * no country :)\n     * \n     * @param {*} data Response from api.getCountries; array of\n     * artists that may or may not have country\n     */\n    var addArtistsWithNoCountry = function (data) {\n        listOfArtistsWithNoCountry = listOfArtistsWithNoCountry.concat(data);\n\n        var noCountriesListEl = d3.select(\".no-countries ul\");\n        data.forEach(function (_art) {\n            noCountriesListEl.append(\"li\").html('<a href=\"' + _art.url + '\" target=\"blank\" class=\"no-countries__link\">' + _art.artist + '</a>');\n        })\n\n        d3.select(\".no-countries__info\").html(listOfArtistsWithNoCountry.length + \" artists without a country:\");\n\n        saveToStorage(\"no_countries\", listOfArtistsWithNoCountry);\n\n        if (listOfArtistsWithNoCountry.length) {\n            d3.select(\".no-countries\").style({\n                visibility: \"visible\",\n                \"pointer-events\": \"all\",\n            });\n        }\n    }\n\n    var getAllArtists = function () {\n        // console.log(\"get artists\")\n\n        api.lastfm.send(\"library.getartists\", [\n                [\"user\", user],\n                [\"limit\", 50],\n                [\"page\", currPage]\n            ],\n            function (error, responseData) {\n                // Special case for unfortunate users\n                if (responseData === \"\") {\n                    console.error('Got empty string (\"\") as response, skipping page.')\n                    currPage++;\n                    getAllArtists();\n                    return;\n                }\n                if (error || responseData.error) {\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\n\n                    // Try again, but not forever\n                    if (tries++ < 5) {\n                        getAllArtists();\n\n                        // TODO: Show erorr message ;)\n                    } else {\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\n                        if (refresh) {\n                            clearExplrCache().then(function () {\n                                saveToStorage(\"artists\", STORED_ARTISTS, function () {\n                                    window.location.reload()\n                                });\n                            })\n                        }\n                    }\n                    return;\n                }\n\n                tries = 0;\n\n                if (currPage === 1) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\n\n                    if (SESSION.total_artists === 0) {\n                        d3.select(\".bubblingG\").remove();\n                        d3.select(\"#loading-text\")\n                            .html(\"You haven't listened to any<br> artists yet. Start scrobbling with <br>\\\n                                                        <a href='http://evolver.fm/2012/05/08/how-to-scrobble-to-last-fm-from-itunes-\" +\n                                \"spotify-and-more/'>your favorite music player!</a>\");\n                        d3.select(\".loader\").style(\"pointer-events\", \"all\");\n                        return;\n                    }\n                }\n\n                currPage++;\n                // console.log(\"Artists done, get countries\");\n\n                // Save artist data to localStorage (and create a list of artist names)\n                var artistNames = []\n                responseData.artists.artist.forEach(function (newArtist) {\n                    var a = STORED_ARTISTS[newArtist.name] || {};\n\n                    a.playcount = +newArtist.playcount;\n                    a.url = newArtist.url;\n\n                    STORED_ARTISTS[newArtist.name] = a;\n                    artistNames.push(newArtist.name);\n                })\n                saveToStorage(\"artists\", STORED_ARTISTS);\n                // var n = count++;\n\n                // Get country for all artists\n                api.getCountries(artistNames,\n                    function (data) {\n                        // Count plays for each country?\n                        // countryCountList = countryCountList.concat(data);\n                        var dataObj = d3.nest() //Gör så att man kan slå upp på land-id och få upp en lista på artister.\n                            .key(function (d) {\n                                return d.id;\n                            })\n                            .rollup(function (leaves) { //gör så att man får en lista på alla artister för ett land.\n                                return leaves;\n                            })\n                            .map(data); //Skickar in en lista med ett objekt för varje artist.\n\n                        d3.keys(dataObj).forEach(function (id) {\n                            countryCountObj[id] = countryCountObj[id] || {};\n                            countryCountObj[id][user] = countryCountObj[id][user] || [];\n                            var artistList = countryCountObj[id][user]; // list of artists for a country\n\n                            // if (artistList) {\n                            artistList = artistList.concat(dataObj[id]);\n\n                            //Lägger på de nya dataObj-elementen i countryCountObj-listan.\n                            // } else {\n                            //     artistList = dataObj[id];\n                            // }\n\n                            artistList.forEach(function (el, i) {\n                                //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\n                                artistList[i].url = STORED_ARTISTS[el.artist].url;\n                                artistList[i].playcount = STORED_ARTISTS[el.artist].playcount;\n                                // if (artistList[i].users) {\n                                //     artistList[i].users.push(user);\n                                // } else {\n                                //     artistList[i].users = [user];\n                                // }\n                            });\n                            //countryCountObj är en lista med \"country\"-objekt. \n                            //Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\n                            //dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\n                            countryCountObj[id][user] = artistList;\n                        })\n\n                        addArtistsWithNoCountry(data.filter(function (artist) {\n                            return !artist.id; // && artist.artist && artist.url;\n                        }));\n\n                        map.putCountryCount(countryCountObj);\n\n                        if (currPage > maxPage) {\n                            end();\n                            return;\n                        } else {\n                            getAllArtists();\n                        }\n                    });\n            });\n    }\n\n    var getRecommendations = function () {\n        var currPage = 1,\n            limit = 50,\n            maxPage = 1000 / limit;\n        var countriesList = JSON.parse(window.localStorage.countries);\n\n        var countriesObj = d3.nest().key(function (d) {\n            return d.name;\n        }).rollup(function (d) {\n            return d[0];\n        }).map(countriesList);\n        // Get \"all\" artists from one country\n        // countriesList.forEach(function(country){\n\n        // });\n        api.lastfm.send(\"tag.gettopartists\", [\n            [\"tag\", \"swedish\"],\n            [\"limit\", limit],\n            [\"page\", currPage]\n        ], function (err, data) {\n            var artists = data.topartists.artist;\n            // For each artist, get their tags\n            artists.forEach(function (a) {\n                api.lastfm.send(\"artist.gettoptags\", [\n                    [\"artist\", a.name]\n                ], function (err, data) {\n                    // console.log(data);\n                })\n            })\n            // Look for user's top tags in artist tags\n            // If a lot of matches, save to recommended artists for that country\n        });\n\n    }\n\n    var getUserTags = function (err, data) {\n        // err = err ||data.error;\n        if (err || data.error) {\n            if (data && data.error === 6) {\n                alert(\"User not found\");\n                window.location.assign(window.location.origin + window.location.pathname);\n            }\n        }\n\n\n        /*if (err || data.error) {\n            console.error(\"Erorr in getUserTags\", err, data);\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\n            window.location.replace(window.location.origin + window.location.pathname);\n        }*/\n\n        var c = 0;\n\n        var tagCount = {};\n\n        //console.log(\"Gotta get tags\")\n\n        var topArtists = data.topartists.artist;\n        var done = function () {\n            // make list of tags to sort\n            USER_TAGS = [];\n            //Remove specific tags from user's top tags\n            let forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\", \"seen live\", \"english\", \"singer-songwriter\", \"spanish\", \"french\"];\n            d3.keys(tagCount).forEach(function (el) {\n                var nogood = false\n                for (let i = 0; i < forbidden.length; i++) {\n                    if (el === forbidden[i]) {\n                        nogood = true;\n                    }\n                }\n                if (!nogood) {\n                    USER_TAGS.push({\n                        tag: el,\n                        count: tagCount[el]\n                    });\n                }\n            })\n            USER_TAGS.sort(function (a, b) {\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n            });\n            console.info(\"Done getting tags, saved to localStorage.user_tags\")\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\n        }\n\n\n        topArtists.forEach(function (el, i) {\n            // get top ten tags and save to users tag count....\n            setTimeout(function () { // Set timeout to not stop artists from loading...\n                api.lastfm.send(\"artist.gettoptags\", [\n                    [\"artist\", el.name]\n                ], function (err, data) {\n                    let taglist = data.toptags && data.toptags.tag;\n                    if (taglist) {\n                        var lim = Math.min(taglist.length, 10);\n                        for (var i = 0; i < lim; i++) {\n                            if (tagCount[taglist[i].name]) {\n                                tagCount[taglist[i].name]++;\n                            } else {\n                                tagCount[taglist[i].name] = 1;\n                            }\n                        }\n                        // console.log(c, topArtists.length)\n                    }\n\n                    c++;\n                    if (c == topArtists.length - 1) {\n                        done();\n                    }\n                });\n            }, Math.random() * 3000);\n        });\n\n    }\n\n    var begin = function () {\n        //Send analytics event\n        ga('send', 'event', 'splash screen', 'Go!', 'test');\n        // fade out username input box\n        var welcomeOverlay = d3.select(\"#welcome-container\");\n        welcomeOverlay.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function () {\n                welcomeOverlay.remove();\n            });\n\n        // Fade in loader\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\n        d3.select(\"#loading-text\").html(\"Getting library...\");\n        setTimeout(function () {\n            if (d3.select(\"#loading-text\").html() === \"Getting library...\") {\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\n\n                setTimeout(function () {\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\n                            .style(\"pointer-events\", \"all\");\n                    }\n                }, 8000);\n            }\n        }, 8000);\n\n        // Fade in legend, progress-bar etc\n        d3.selectAll(\".on-map-view\").style({\n            \"visibility\": \"visible\",\n            //            \"opacity\": 0\n        }) //.transition().duration(1000).style(\"opacity\", 1);\n\n        // Get user tags\n        api.lastfm.send(\"user.gettopartists\", [\n            [\"user\", user],\n            [\"period\", \"12months\"],\n            [\"limit\", \"50\"]\n        ], getUserTags);\n\n        // Get user friends\n        api.getFriends(function (err, data) {\n            try {\n                var friends = data.friends.user;\n                var i = 0;\n                var friendName = d3.select(\"#friend-name\");\n\n                var updateName = function () {\n                    friendName.html(\"\");\n                    friendName.append(\"a\").attr({\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\n                        target: \"_self\",\n                    }).html(friends[i].name);\n                }\n\n                d3.selectAll(\".arrow\").on(\"click\", function () {\n                    if (d3.select(this).classed(\"left\")) {\n                        // Go left\n                        i = (i === 0 ? friends.length - 1 : i - 1);\n                    } else {\n                        // Go right\n                        i = (i + 1) % friends.length;\n                    }\n\n                    updateName();\n                })\n\n                updateName();\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n\n            } catch (e) {\n                console.error(\"getFriends()\", e);\n                d3.select(\"#friends\").html(\"&nbsp;Couldn't find any<br>friends on last.fm :(&nbsp;\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n            }\n        });\n\n        if (CACHED_USERS[user]) {\n            // TODO: use timestamp\n            console.info(\"No new artists on last.fm!\");\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\n\n            localforage.getItem(\"no_countries\", function (err, val) {\n                addArtistsWithNoCountry(val || []);\n            });\n\n            // Get number of artists for screenshot etc.\n            api.lastfm.send(\"library.getartists\", [\n                    [\"user\", user],\n                    [\"limit\", 1],\n                    [\"page\", 1]\n                ],\n                function (error, responseData) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                });\n\n            setTimeout(function () {\n                map.putCountryCount(countryCountObj);\n                end();\n            }, 1000)\n        } else {\n            // Save theme\n            var theme = window.localStorage.theme;\n            window.localStorage.clear();\n            if (theme) {\n                window.localStorage.theme = theme;\n            }\n            getAllArtists();\n        }\n    }\n\n    var end = function () {\n        // We're done, fade out loader\n        var loader = d3.select(\".loader\");\n        loader.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function () {\n                loader.remove();\n            });\n        //Also fade out progress bar text (after a short delay)\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\n            .style(\"opacity\", 0);\n\n        CACHED_USERS = {};\n        CACHED_USERS[user] = new Date().getTime();\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\n    }\n\n    // // Set theme\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\n\n    // Try to get username from url\n    var param = window.location.href.split(\"username=\")[1];\n\n    if (param) { // We already have a user\n        // set up keyboard shortcuts\n        window.addEventListener(\"keydown\", function (evt) {\n            switch (evt.keyCode) {\n                // s\n                case 83:\n                    screenshot.render();\n                    //Send google analytics event\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Hotkeys',\n                        eventAction: 'Take screenshot',\n                        eventLabel: 'test'\n                    });\n                    break;\n                    // t\n                case 84:\n                    nextTheme();\n                    //Send google analytics event\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Hotkeys',\n                        eventAction: 'Cycle theme',\n                        eventLabel: 'test'\n                    });\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        if (param.length > 15) {\n            param = param.substr(0, 15);\n        }\n        user = param;\n        SESSION.name = param;\n        Promise.all([CACHED_NO_COUNTRIES_PROMISE, STORED_ARTISTS_PROMISE]).then(() => begin());\n    } else {\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\n    }\n\n    var saveToStorage = function (key, object, cb) {\n        localforage.setItem(key, object, cb || function () {});\n    }\n})();\n","/*requires:\napi/lastfm.js\n*/\n\nvar api = api || {};\nvar superCount = 0;\n\n(function (window, document) {\n\tlet getHardcodedCountries = () => new Promise((res, rej) =>\n\t\td3.json(\"assets/data/artist-countries.json\", (err, data) =>\n\t\t\terr ? rej(err) : res(data)\n\t\t));\n\n\tapi.getCountriesData = (() => {\n\t\tlet promise;\n\n\t\treturn () => {\n\t\t\tif (promise) { return promise; }\n\n\t\t\treturn promise = new Promise((res, rej) => {\n\t\t\t\td3.csv(\"assets/data/countries.csv\", function (err, data) {\n\t\t\t\t\tdata.forEach(d => {\n\t\t\t\t\t\td.id = +d.id;\n\t\t\t\t\t\td.names = d.names ? d.names.split(\"|\") : [];\n\t\t\t\t\t\td.tags = d.tags ? d.tags.split(\"|\") : [];\n\t\t\t\t\t\td.mainName = d.names[0];\n\t\t\t\t\t\td.tag = d.tags[0];\n\t\t\t\t\t\td.name = d.mainName;\n\t\t\t\t\t});\n\n\t\t\t\t\tres(data);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t})();\n\t\n\tPromise.all([api.getCountriesData(), getHardcodedCountries()]).then(([countryData, hardcodedCountries]) => {\n\t\tcountryData = countryData.map(d => {\n\t\t\tlet splits = [];\n\n\t\t\tif (d.names.length === 1 && d.tags.length === 0) {\n\t\t\t\tsplits = [d];\n\t\t\t}\n\t\t\tif (d.names.length > 1) {\n\t\t\t\tsplits = splits.concat(d.names.map(name => ({ ...d, name })));\n\t\t\t}\n\t\t\tif (d.tags.length > 0) {\n\t\t\t\tsplits = splits.concat(d.tags.map(tag => ({ ...d, tag }))); \n\t\t\t}\n\n\t\t\tif(d.names.length > 1 &&d.tags.length > 0){ splits.splice(0,1); }\n\t\t\t\n\t\t\treturn splits;\n\t\t}).flat();\n\n\t\tlet alias = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\tif (d && d.tag) {\n\t\t\t\t\treturn d.tag.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t})\n\t\t\t.map(countryData);\n\n\t\tlet cname = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\treturn d.name.toLowerCase();\n\t\t\t})\n\t\t\t.map(countryData);\n\n\t\t/**\n\t\t * Tries to find out the country for a specified artist.\n\t\t * @param  {String}   artist   Name of the artist to get country for\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\n\t\t *                             The callback function takes one argument, this object:\n\t\t *\n\t\t * \t\t\t\t\t\t\t\t```\n\t\t *                             {\n\t\t *                             \t\"artist\": \"\", // <artist name>,\n\t\t *                             \t\"country\": \"\", // <country name>,\n\t\t *                             \t\"id\": \"\", // <country id>,\n\t\t *                             \t\"tag\": \"\", // <the tag that decided the country (e.g. Swedish for Sweden)>\n\t\t *                             }\n\t\t * \t\t\t\t\t\t\t\t```\n\t\t *\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\n\t\t *\n\t\t */\n\t\tapi.getCountry = function(artist, callback) {\n\t\t\tif (hardcodedCountries[artist]) {\n\t\t\t\tlet hardcodedTagName = hardcodedCountries[artist].toLowerCase();\n\t\t\t\t\n\t\t\t\tconsole.log(`Using hardcoded country tag \"${hardcodedTagName}\" for artist \"${artist}\"`)\n\t\t\t\t\n\t\t\t\tcallback({\n\t\t\t\t\tartist,\n\t\t\t\t\ttag: hardcodedTagName,\n\t\t\t\t\tid: cname[hardcodedTagName][0].id,\n\t\t\t\t\tcountry: cname[hardcodedTagName][0].mainName\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Get artists country code here, from last.fm or whatever\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err, responseData2) {\n\t\t\t\t// Return if something failed\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\n\t\t\t\t\tresponseData2.toptags.tag.length) {\n\t\t\t\t\tcallback({\n\t\t\t\t\t\t\"artist\": artist\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lista med taggar vi vill dubbelkolla\n\t\t\t\tvar troubleCountries = [\"georgia\", \"ireland\"];\n\t\t\t\tvar troubleLanguages = [\"spanish\", \"french\", \"english\", \"portuguese\", \"russian\", \"italian\", \"japanese\", \"korean\", \"indian\", \"swedish\", \"irish\"];\n\t\t\t\tvar theTroubles = [].concat(troubleCountries, troubleLanguages);\n\n\t\t\t\t// check for country-tags in the artist's tags\n\t\t\t\tlet demonymTag = { tag: \"\", id: null, country: \"\", count: 0 };\n\t\t\t\tlet countryTag = demonymTag;\n\n\t\t\t\tresponseData2.toptags.tag.some(function (t, i) {\n\t\t\t\t\tvar tname = t.name.toLowerCase();\n\n\t\t\t\t\t// no need to search anymore since we only care\n\t\t\t\t\t// about the créme de la creme i.e. the tag with the\n\t\t\t\t\t// highest count\n\t\t\t\t\tif (countryTag.id && demonymTag.id) { return true; }\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// sweden->sweden\n\t\t\t\t\t\tif (!countryTag.id && cname[tname] && cname[tname][0].id) {\n\t\t\t\t\t\t\tcountryTag = { tag: tname, id: cname[tname][0].id, country: cname[tname][0].mainName, count: t.count };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// swedish -> sweden\n\t\t\t\t\t\tif (!demonymTag.id && alias[tname] && alias[tname][0].id) {\n\t\t\t\t\t\t\tdemonymTag = { tag: tname, id: alias[tname][0].id, country: alias[tname][0].name, count: t.count };\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t});\n\n\t\t\t\t// country is best, demonym second\n\t\t\t\tvar bestTag = (countryTag.id && demonymTag.count < 8 * countryTag.count) ?\n\t\t\t\t\tcountryTag :\n\t\t\t\t\t(demonymTag.id \n\t\t\t\t\t\t? demonymTag\n\t\t\t\t\t\t: {});\n\n\t\t\t\tif (countryTag.tag === \"georgia\" && responseData2.toptags.tag.some(function (t) {\n\t\t\t\t\t\treturn [\"american\", \"us\", \"usa\"].includes(t.name.toLowerCase())\n\t\t\t\t\t})) {\n\t\t\t\t\t// it's not the country...\n\t\t\t\t\tbestTag = demonymTag;\n\n\t\t\t\t\tconsole.info(\"'\" + artist + \"' is tagged with 'georgia', but I'm gonna go ahead and guess they're really from the U.S.\");\n\t\t\t\t}\n\n\t\t\t\tif (theTroubles.includes(bestTag.tag)) {\n\t\t\t\t\tconsole.info(\"Potentially incorrect country for '\" + artist + \"': \" + bestTag.country + \", using the tag '\" + bestTag.tag + \"'\");\n\t\t\t\t}\n\n\t\t\t\tcallback(Object.assign({ \"artist\": artist, }, bestTag));\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Returns a list of country objects for a list of artist names.\n\t\t *\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\n\t\t * @param  {Array}   artists  Array of artist names (String)\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\n\t\t *                             containing only those artists that have a country\n\t\t *                             associated with them. For object structure, see api.getCountry\n\t\t */\n\t\tapi.getCountries = function(artists, callback) {\n\t\t\tvar returnList = [],\n\t\t\t\tcount = 0;\n\t\t\t/**\n\t\t\t * Increases a count and checks if we've tried\n\t\t\t * to get country for all artists\n\t\t\t */\n\t\t\tvar checkCount = function() {\n\t\t\t\tcount++;\n\t\t\t\tsuperCount++;\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>You can start exploring,<br>but it might interfere<br>with loading your artists.\");\n\t\t\t\tif (count === artists.length) {\n\t\t\t\t\t// We done, save artists and call back\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\n\t\t\t\t\t\tcallback(returnList);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get countries for all artists\n\t\t\tartists.forEach(function(el, i) {\n\t\t\t\t// first check stored artists to see if we've already checked this artist\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\n\t\t\t\t\treturnObject.artist = el;\n\t\t\t\t\treturnList.push(returnObject);\n\t\t\t\t\tcheckCount();\n\t\t\t\t} else {\n\t\t\t\t\tvar start = new Date().getTime();\n\n\t\t\t\t\tapi.getCountry(el, function(data) {\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\n\t\t\t\t\t\t// console.error(data)\n\n\t\t\t\t\t\t// if (data.name) {\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\n\t\t\t\t\t\t\t\"id\": data.id,\n\t\t\t\t\t\t\t\"name\": data.name,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturnList.push(data);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\n\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\n\n\n\t\t\t\t\t\tcheckCount();\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\t\t}\n\t})\n\n\t/**\n\t * Get all tags for an artist.\n\t * @param  {String}   artist   Artist name\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\n\t */\n\tapi.getTags = function(artist, callback) {\n\t\t// Check if artist tags are already saved, if so return them\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\n\t\t\t// console.log(\"Had in store, no api call\");\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t} else {\n\t\t\t// Create object in localstorage\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\n\t\t\tSTORED_ARTISTS[artist].tags = [];\n\n\t\t\t// Get from lastfm\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\n\t\t\t\tfunction(err, responseData2) {\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\n\t\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tapi.getArtistInfo = function(artist, callback) {\n\t\tvar artistInfo = [];\n\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\n\t\t\t//Creating a list of tag names\n\t\t\tvar tagnamelist = [];\n\t\t\tif (data1.artist.tags.tag) {\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\n\t\t\t\t\ttagnamelist.push(t.name);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tartistInfo.push({\n\t\t\t\tname: artist,\n\t\t\t\turl: data1.artist.url,\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\n\t\t\t\tdescription: data1.artist.bio.summary,\n\t\t\t\ttags: tagnamelist\n\t\t\t})\n\t\t\tcallback(artistInfo);\n\t\t})\n\n\n\n\t}\n\n\t/**\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\n\t * Also included are which tags matched.\n\t *\n\t * Calling this function cancels previous requests initiated by this function.\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\n\t */\n\tvar recommendationRequests = [];\n\tapi.cancelRecommendationRequests = function () {\n\t\trecommendationRequests.forEach(function (xhr) {\n\t\t\txhr.abort();\n\t\t});\n\n\t\trecommendationRequests = [];\n\t}\n\tapi.getRecommendations = function (country, callback) {\n\t\tapi.cancelRecommendationRequests();\n\n\t\tvar recommendations = [];\n\n\t\t// get top tags for user\n\t\tvar toptags = USER_TAGS.slice(0, 15);\n\t\t// make tag list to an object (back n forthss)\n\t\tvar userTagObj = d3.nest().key(function(d) {\n\t\t\treturn d.tag;\n\t\t}).rollup(function(d) {\n\t\t\treturn d[0].count;\n\t\t}).map(toptags);\n\n\n\t\t//console.log(\"Got top tags for user!\")\n\n\t\t// Get top artists for tag country\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\n\t\t\t// Gotta count matching tags to then sort\n\t\t\tvar tagCounts = {};\n\n\t\t\t// Get the tags for these artists\n\t\t\t//console.log(data1, err)\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\n\t\t\t\tcallback([]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar artists = data1.topartists.artist;\n\n\t\t\tartists.forEach(function(a, num) {\n\t\t\t\ttagCounts[a.name] = [];\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\n\t\t\t\t\tif (hasTags) {\n\t\t\t\t\t\t// Compare top 10 tags to user tags\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\n\t\t\t\t\t\t\treturn d.name;\n\t\t\t\t\t\t}).map(data2.toptags.tag);\n\n\t\t\t\t\t\t// Get rid of justin bieber\n\t\t\t\t\t\tif (tags[country]) {\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (num === artists.length - 1) {\n\t\t\t\t\t\t//console.log(\"We've gotten tag counts for all artists, make a list!\")\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\n\t\t\t\t\t\t\trecommendations.push({\n\t\t\t\t\t\t\t\tname: d,\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t//console.log(recommendations)\n\t\t\t\t\t\tcallback(recommendations);\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\trecommendationRequests.push(xhr2);\n\t\t\t})\n\t\t})\n\n\t\trecommendationRequests.push(xhr1);\n\t}\n\n\tapi.getFriends = function(callback) {\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\n\t}\n})(window, document);\n","const utils = utils || {};\n\n(function () {\n  utils.exportToCSV = function (countryCountObj) {\n    const list = map.countryNames.map((country) => {\n      const countryCount = countryCountObj[country.id];\n      return {\n        countryId: country.id,\n        countryName: country.mainName,\n        artists: (countryCount && countryCount[SESSION.name]) || [],\n      };\n    });\n\n    let csv = json2csv.parse(\n      list.sort(({ countryName: a }, { countryName: b }) =>\n        a.localeCompare(b, \"en\")\n      ),\n      {\n        fields: [\n          { label: \"Country\", value: \"countryName\" },\n          { label: \"Number of artists\", value: (row) => row.artists.length },\n          {\n            label: \"Scrobbles\",\n            value: (row) =>\n              row.artists.reduce((acc, artist) => acc + artist.playcount, 0),\n          },\n        ],\n      }\n    );\n\n    csv = \"data:text/csv;charset=utf-8,\" + csv.replaceAll(`\"`, \"\");\n\n    window.open(encodeURI(csv));\n  };\n})();\n","/* requires:\napi/api.js\napi/lastfm.js\nscript.js\n*/\n\nvar map = {};\n//White theme default:\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\nvar legend;\nvar countryScore = 0;\n\n(function(window, document) {\n  d3.select(window).on(\"resize\", throttle);\n\n  var doThrottle = false;\n  var filter = \"artists\"; // filter by artists or plays\n\n  var zoom = d3.behavior.zoom()\n    .scaleExtent([1, 9])\n    .on(\"zoom\", move);\n\n\n  var height, width;\n\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\n  let countryCount = {};\n\n  //Variables needed to update scale and legend\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\n  var maxartists = 1,\n    maxplaycount = 0;\n\n  //Setting color and range to be used\n  var color;\n\n  // Set theme\n  var theme = window.localStorage.theme || \"pink_white\";\n\n  map.drawPlays = function() {\n    filter = \"scrobbles\";\n    redraw();\n  };\n\n  let countryPlaylists; \n  // load links to country playlists\n  d3.json(\"assets/data/playlists.json\", (err, list) => {\n    countryPlaylists = list;\n  });  \n\n  /**\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\n   */\n  function updateDimensions() {\n    height = window.innerHeight - 5;\n    width = document.getElementById('map-container').offsetWidth;\n  }\n\n  //Returns total number of plays for country\n  function getCountryPlaycount(c) {\n    if (countryCount[c.id]) {\n      var count = 0;\n      for (let i = 0; i < countryCount[c.id].length; i++) {\n        count += countryCount[c.id][i].playcount;\n      }\n      return count;\n    } else return 0;\n  };\n\n\n  function updateProgressBar() {\n    var progressPro = (countryScore / 210);\n    return progressPro;\n  }\n;\n\n  //Function to format numbers over 1000 with a space\n  function numbersWithSpace(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  }\n  /**\n   * Randomize array element order in-place.\n   * Using Fisher-Yates shuffle algorithm.\n   */\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  //Function to remove duplicates from arrays\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  function updateScale() {\n    var max = -1;\n    switch (filter) {\n      case \"artists\":\n        max = maxartists;\n        for (let i = 0; i < 5; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1));\n        }\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\n        break;\n      case \"scrobbles\":\n        max = maxplaycount;\n        for (let i = 0; i < 7; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\n        }\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\n        break;\n    };\n\n\n    color = d3.scale.threshold()\n      .domain(mydomain)\n      .range(colorArray);\n  };\n\n  function updateLegend() {\n    //Remove decimals from domain\n    var x = 0;\n    var len = mydomain.length\n    while (x < len) {\n      mydomain[x] = Math.ceil(mydomain[x]);\n      x++;\n    };\n\n    //Array of text\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\n\n    //Create Legend\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\n      .data(mydomain);\n\n    //Color box sizes\n    var ls_w = 20,\n      ls_h = 20;\n    var x = width * 0.03;\n    var y = height * 0.03;\n\n    // Add legend filter text\n    var text1 = svg.select(\"#filter-text\")\n      .attr(\"x\", x)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(\"Number of \");\n    var text2 = svg.select(\"#filter\")\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(filter);\n    text2.on(\"click\", function() {\n      // Toggle filter method\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\n      redraw();\n    });\n\n    var noCountryArtists = d3.select(\".no-countries\")\n      .style(\"bottom\", (y + mydomain.length * ls_h + 1.5 * ls_h + 30) + \"px\"); // <<< magic numbers broo\n\n    var enter = legend.enter()\n      .append(\"g\")\n      .attr(\"class\", \"legend\");\n\n    enter.append(\"rect\")\n      .attr(\"x\", x)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - 2 * ls_h - y;\n      })\n      .attr(\"width\", ls_w)\n      .attr(\"height\", ls_h)\n      .style(\"fill\", function(d) {\n        return color(d);\n      });\n    enter.append(\"text\")\n      .attr(\"x\", x + 30)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - ls_h - 4 - y;\n      });\n\n    legend.selectAll(\"text\").data(mydomain)\n      .text(function(d, _, i) {\n        return legend_labels[i];\n      });\n  }\n  //Variables for color legend\n\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\n    \"tooltip hidden\");\n\n  var infoContainer = d3.select(\"body\").append(\"div\").attr(\"class\",\n    \"infoContainer hidden\").attr(\"id\", \"infoContainer\");\n\n  var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\n\n\n  var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"cnameDiv\").attr(\"id\", \"cname\");\n\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"detailsDiv\").attr(\"id\", \"details\");\n\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"recoDiv\").attr(\"id\", \"recommendations\");\n\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\n\n  var closeButton;\n\n  var offsetL;\n  var offsetT;\n\n  //---------------------- Color preferences -------------//\n  var themes = {\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\n  };\n\n  let nextTheme = window.nextTheme = function(toTheme) {\n    // Go to next theme\n    var themeList = d3.keys(themes);\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\n    colorArray = themes[theme];\n\n    //Change body class\n    d3.select(document.body).attr(\"class\", theme);\n\n    // Save :)\n    window.localStorage.theme = theme;\n\n    // Redraw map :)\n    if (topo) redraw();\n  }\n  map.nextTheme = nextTheme;\n\n  nextTheme(theme);\n  updateScale();\n  updateDimensions();\n  setup(width, height);\n\n  function setup(width, height) {\n    projection = d3.geo.naturalEarth()\n      .translate([(width / 2), (height / 2) + height * 0.08])\n      .scale(width / 1.7 / Math.PI);\n\n    path = d3.geo.path().projection(projection);\n\n    svg = d3.select(\"#map-container\").append(\"svg\")\n      .attr(\"id\", \"map-svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\n      .call(zoom)\n      .on(\"click\", click)\n      .append(\"g\");\n\n    g = svg.append(\"g\");\n    svg.append(\"g\").attr(\"id\", \"legend\")\n    svg.append(\"text\").attr({\n      id: \"filter-text\",\n      class: \"legend\"\n    });\n    svg.append(\"text\").attr({\n      id: \"filter\",\n      class: \"legend\"\n    });\n  }\n\n  //Load country aliases and names\n  api.getCountriesData().then(countries => (map.countryNames = countryNames = countries));\n  \n  //Load map\n  d3.json(\"assets/data/world-50m.json\", function(error, world) {\n\n    var countries = topojson.feature(world, world.objects.countries).features;\n\n    topo = countries;\n    draw(topo, true);\n\n  });\n\n  function draw(topo, redrawMap) {\n    var country = g.selectAll(\".country\").data(topo);\n\n    var progress = d3.select(\"#progress-bar\").style({\n      \"height\": updateProgressBar() * 100 + \"%\",\n      \"background-color\": colorArray[6]\n    });\n    d3.select(\"#countryCount\").style({\n      \"background-color\": colorArray[1],\n      \"border-color\": colorArray[6]\n    })\n    //Show progressbar text on mouse-over\n    .on(\"mousemove\", function() {\n      d3.select(\"#progress-text\")\n        .transition().duration(150).style(\"opacity\", 0.9);\n    })\n      .on(\"mouseout\", function() {\n        d3.select(\"#progress-text\").transition().duration(150).style(\"opacity\", 0);\n      });\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/210 countries\")\n\n    //Draw countries\n    if (redrawMap) {\n      country.enter().insert(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"id\", function(d, i) {\n          return d.id;\n        })\n        .attr(\"title\", function(d, i) {\n          return d.properties.name;\n        })\n        .style(\"fill\", function() {\n          return color(0);\n        });\n    }\n    //Color countries\n    country.transition().style(\"fill\", function(d) {\n      switch (filter) {\n        case \"artists\":\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\n            color(0);\n          //break;\n        case \"scrobbles\":\n          return color(getCountryPlaycount(d));\n      }\n    })\n\n    //offsets for tooltips\n    offsetL = document.getElementById('map-container').offsetLeft;\n    offsetT = document.getElementById('map-container').offsetTop;\n\n    //tooltips\n    country\n      .on(\"mousemove\", function(d, i) {\n        var name;\n        var tag;\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        tooltip.classed(\"hidden\", false)\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\n            mouse[1] +\n            offsetT + 10) + \"px\")\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\n      })\n      .on(\"mouseout\", function(d, i) {\n        tooltip.classed(\"hidden\", true);\n      })\n      //Show div with top 10 artists for country when clicked\n      .on(\"click\", function(d, i) {\n        var name;\n        var tag;\n        var id;\n\n        clicked(d);\n\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n            id = d.id;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        closeButton\n          .on(\"click\", function(d, i) {\n            removeArtistDiv();\n            // zoom out map, fulhack\n            clicked(centered);\n          }) //\"stäng\" onclick slutar\n      }) // on click slutar\n\n  }\n\n  /*-------redraw----*/\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean\n  function redraw(redrawMap) {\n    updateDimensions();\n\n    if (redrawMap) {\n      d3.select('#map-svg').remove();\n      setup(width, height);\n    }\n\n    maxartists = d3.max(d3.keys(countryCount), function(cname) {\n      return countryCount[cname].length;\n    });\n    maxplaycount = d3.max(d3.keys(countryCount), function(cname) {\n      return getCountryPlaycount({\n        id: cname\n      });\n    })\n    updateScale();\n    updateLegend();\n\n    draw(topo, redrawMap);\n  }\n\n\n  /**\n   * Moves the map to the specified location or based on the current zoom event\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\n   * @param  {Number} sc      Optional: Scale factor\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\n   */\n  function move(tr, sc, animate) {\n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\n\n    // If move was not initiated by clicking on a country, deselect the selected country\n    if (!tr && !sc && centered) {\n      highlightCountry(false);\n      removeArtistDiv();\n      centered = null;\n    }\n\n    var zscale = s;\n    var h = height / 4;\n\n    t[0] = Math.min(\n      (width / height) * (s - 1),\n      Math.max((width * 1.2) * (1 - s), t[0])\n    );\n\n    t[1] = Math.min(\n      h * (s - 1) + h * s,\n      Math.max(height * (1 - s) - h * s, t[1])\n    );\n\n    zoom.translate(t);\n    zoom.scale(s);\n\n    if (animate) {\n      g.transition().duration(950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n\n    } else {\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n    }\n\n    //adjust the country hover stroke width based on zoom level\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\n  }\n  map.move = move;\n\n  var throttleTimer;\n\n  function throttle() {\n    window.clearTimeout(throttleTimer);\n    throttleTimer = window.setTimeout(function() {\n      redraw(true);\n      move([0, 0], 1); // Reset position\n    }, 200);\n  }\n\n\n  //geo translation on mouse click in map\n  function click() {\n    var latlon = projection.invert(d3.mouse(this));\n    // console.log(latlon);\n    //console.log(countryCount);\n  }\n\n\n  /*----------------------------makeArtistDiv------------------------------------------------*/\n  //Skapar \"details-on-demand\"-divarna.\n  function makeArtistDiv(d) {\n\n    //lägga till namn till detailseDiv\n    var name;\n    var tag;\n    var nameTags;\n    var tagTags;\n    var recoms;\n    //var id;\n    countryNames.forEach(function(e, i) {\n      if (e.id === d.id) {\n        name = e.name;\n        tag = e.tag;\n\n        nameTags = (e.names || [e.name]).map(n => \"<span class=\\\"demonym\\\">#\" + n + \"</span>\").join(\", \");\n        tagTags = (e.tags || [e.tag]).map(t => \"<span class=\\\"demonym\\\">#\" + t + \"</span>\").join(\", \");\n      };\n    })\n    d3.select(\"#recommendations\").html(\"\");\n    //Show country name and info div on left hand side\n    infoContainer\n      .classed(\"hidden\", false)\n      .transition()\n      .style(\"opacity\", 1)\n      .duration(750);\n\n    //Hide progressbar when showing\n    d3.selectAll(\"#countryCount, .on-map-view\")\n      .classed(\"hidden\", true);\n\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"class\", \"close-button\").html(\"X\");\n\n    //Populate country information div\n    cnameDiv\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\n      .append(\"h1\").html(name);\n    d3.select(\"#cnameCont\").append(\"h5\")\n      .html(function() {\n        if (countryCount[d.id])\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\n        else return \"No artists yet - Find new here ->\"\n      })\n\n    let pl = countryPlaylists.find(c => c.name === name);\n    let linkdiv = d3.select(\"#cnameCont\")\n      .append(\"div\").attr(\"class\", \"playlist-link\")\n\n   let lastFmLink =  linkdiv.append(\"a\").attr(\"href\", \"https://last.fm/tag/\" + name)\n   lastFmLink.append(\"img\").attr(\"class\", \"playlist-link__img\").attr(\"src\", \"https://www.shareicon.net/data/32x32/2016/05/24/769923_logo_512x512.png\").attr(\"style\",\"background:none\");\n   lastFmLink.append(\"span\").html(\"#\"+name);\n\n    if (pl) {\n\n      linkdiv.append(\"span\").attr(\"class\",\"divider\").html(\"/\");\n\n      let a = linkdiv.append(\"a\").attr(\"href\", pl.uri).attr(\"target\", \"_self\");\n\n      a.append(\"img\")\n        .attr(\"class\", \"playlist-link__img\")\n        .attr(\"src\", \"https://upload.wikimedia.org/wikipedia/commons/1/19/Spotify_logo_without_text.svg\");\n\n      a.append(\"span\").html(pl.playlistName);\n\n    }\n\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\n\n      var currentNoArtists = 0;\n      var currentCount = 0;\n\n\n      d3.select(\"#details\").append(\"div\")\n        .html(\"<span>Your top artists tagged with </span>\" + nameTags + \"<span> or </span>\" + tagTags + \"<span>: </span>\")\n        .attr(\"class\", \"topartists-desc\");\n      //Show top 5 artists\n\n      d3.select(\"#artistContainer\").append(\"i\")\n        .attr(\"class\", \"fa artist-control right fa-angle-right\")\n        .on(\"click\", function(){\n          showNextFive();\n        });\n\n      d3.select(\"#artistContainer\").append(\"i\")\n        .attr(\"class\", \"fa artist-control left disabled fa-angle-left\")\n        .on(\"click\", function(){\n          showPreviousFive();\n        });\n\n      function showNextFive(){\n        showArtists(currentNoArtists+1, currentNoArtists+5, false);\n        //Send event to google analytics\n        ga('send', {\n          hitType: 'event',\n          eventCategory: 'Artist viewer',\n          eventAction: 'Next five',\n          eventLabel: 'test'\n        });\n      }\n\n      function showPreviousFive(){\n        showArtists(currentNoArtists-9, currentNoArtists-5, false);\n        //Trigger GA event\n        ga('send', {\n          hitType: 'event',\n          eventCategory: 'Artist viewer',\n          eventAction: 'Previous five',\n          eventLabel: 'test'\n        });\n      }\n\n      function showArtists(first, last, initial){\n        //Clean-up previous five artist images\n        d3.selectAll(\".scrobbled\").remove();\n        //console.log(\"displaying \"+first+\" to \"+last)\n\n        //Generate new artist images for all artists within the desired range!\n          for (let i = first-1; i <= last-1; i++) {\n            if (countryCount[d.id][i]) {\n              //console.log(i+\" \"+countryCount[d.id][i].artist)\n              var artistDiv = d3.select(\"#details\").append(\"div\")\n                .attr({\n                  \"class\": \"scrobbled artist-div lowlight\",\n                  \"data-artist\": countryCount[d.id][i].artist\n                })\n                .on(\"click\", function() {\n                  // Lowlight not selected artists\n                  d3.selectAll(\".artist-div\").classed({\n                    \"lowlight\": true,\n                    \"highlight\": false\n                  });\n                  // Highlight selected artist\n                  d3.select(this).classed({\n                    \"highlight\": true,\n                    \"lowlight\": false\n                  });\n\n                  makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\n                });\n\n              var artistLink = artistDiv.append(\"a\").style(\"display\", \"block\")\n              artistLink.append(\"div\")\n                .attr(\"class\", \"image-div\")\n                // .style(\"background-image\", \"url(\" + \"'\" + countryCount[d.id][i].image + \"'\" + \" )\")\n                .style(\"background-image\", \"url(https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png\")\n                //.append(\"span\").attr(\"class\", \"overlayNo\").html(i+1);\n\n              var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\n\n              playCountDiv.append(\"p\")\n                .html(\"<b>\" + countryCount[d.id][i].artist + \"</b><br>\" + countryCount[d.id][i].playcount + \" scrobbles\")\n                .attr(\"class\", \"details-p\");\n\n              currentCount++;\n            } else {\n              i = last;\n            }\n        }\n        //\n        //Check to see if we are moving backwards or forwards through the list..\n        if (first<currentNoArtists) //Backwards!\n          currentNoArtists = Math.ceil((currentNoArtists-currentCount)/5)*5;\n        else if (last>currentNoArtists) //Forwards!\n          currentNoArtists = currentNoArtists+currentCount;\n        //console.log(\"currentNoArtists är \"+currentNoArtists);\n\n        //Reset the count!\n        currentCount = 0;\n\n        //\n        //Disable and enable user controls\n        //\n\n        //Left arrow...\n        if (currentNoArtists>=10 && !initial){\n          d3.selectAll(\".artist-control.left\")\n            .classed(\"disabled\", false)\n            .on(\"click\", function(){\n              showPreviousFive();\n            });\n        }\n        else{\n          d3.selectAll(\".artist-control.left\")\n            .classed(\"disabled\", true)\n            .on('click',function(){\n              d3.select(this).on('click',null); //Remove click listener!\n            });\n        }\n        //and right...\n        if (currentNoArtists>countryCount[d.id].length-1){ //There are no more artists!\n          d3.selectAll(\".artist-control.right\")\n            .classed(\"disabled\", true)\n            .on('click',function(){\n              d3.select(this).on('click',null); //Remove click listener!\n            });\n        }\n        else{\n          d3.selectAll(\".artist-control.right\")\n            .classed(\"disabled\", false)\n            .on(\"click\", function(){\n              showNextFive();\n            });\n        }\n      }\n      //Fetch the initial five artists!!\n      showArtists(1, 5, true);\n\n\n    } else { //Om landet vi klickat på inte har några lyssnade artister...\n      // console.log(\"landet har inga lyssnade artister\");\n    }\n    //\"Recommended\"-heading\n    d3.select(\"#recommendations\").append(\"h4\")\n      .html(\"You may like: \")\n      .attr(\"class\", \"topartists-desc\");\n\n    // show loading message\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\n      .attr(\"id\", \"rec-loading\")\n      .html(\"Looking for artists tagged #\" + tag);\n    recLoadingDiv.append(\"img\")\n      .attr({\n        id: \"rec-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      })\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\n\n\n\n    //Get list of recommendations for country based on tags!\n    api.getRecommendations(tag, function(taglist) {\n      // Return if this callback is from an old (not active) country\n      if (!centered || centered.id !== d.id) {\n        return;\n      }\n      // Show loading message\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\n\n      //Get list of recommendations for country based on country name!\n      api.getRecommendations(name, function(namelist) {\n        // Return if this callback is from an old (not active) country\n        if (!centered || centered.id !== d.id) {\n          return;\n        }\n        //Show loading message\n        recLoadingMessage.html(\"Loading images for recommended artists\");\n\n        //Join the two lists\n        var list = taglist.concat(namelist);\n\n        //Removing duplicates from the list!\n        var arr = {};\n        for (let i = 0; i < list.length; i++)\n          arr[list[i]['name']] = list[i];\n\n        list = new Array();\n        for (let key in arr)\n          list.push(arr[key]);\n\n        list.sort(function(a, b) {\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n        });\n        //Get the first 20 artists\n        list = list.slice(0, 20);\n        //Randomize list\n        list = shuffleArray(list);\n\n        if (list.length === 0) { // Found no recommendations\n          recLoadingDiv.remove();\n          d3.select(\"#recommendations\").append(\"p\")\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\n          d3.select(\"#recommendations\").append(\"a\").attr({\n            href: \"https://www.last.fm/tag/\" + name,\n            target: \"_blank\",\n          }).html(\"Try searching last.fm yourself!\");\n        }\n\n        for (let i = 0; i < Math.min(list.length, 5); i++) {\n          // Return if this callback is from an old (not active) country\n          if (centered.id !== d.id) {\n            return;\n          }\n\n          var artisturl, artistimg, artistname;\n\n          //Get url and images for recommended artists!\n          api.getArtistInfo(list[i].name, function(art) {\n            recLoadingDiv.remove();\n            var artisturl = art[0].url;\n            var artistimg = art[0].image;\n            var artistname = art[0].name;\n\n\n            var recoArtistDiv = d3.select(\"#recommendations\").insert(\"div\", \"#summaryText\").attr(\"class\", \"artist-div lowlight\");\n            var recoArtistLink = recoArtistDiv.append(\"a\").style(\"display\", \"block\")\n              //.attr(\"href\", artisturl)\n              //.attr(\"target\", \"_blank\");\n            recoArtistLink.append(\"div\")\n              .attr(\"class\", \"image-div\")\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\n\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\n\n            recoArtistInfoDiv.append(\"p\")\n              .html(\"<b>\" + artistname + \"</b>\")\n              .attr(\"class\", \"details-p\");\n\n            recoArtistDiv.on(\"click\", function() {\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\n                \"lowlight\": true,\n                \"highlight\": false\n              });\n\n              d3.select(this).classed({ // Highlight selected artist\n                \"highlight\": true,\n                \"lowlight\": false\n              });\n              makeSummaryDiv(artistname);\n            });\n\n          })\n        }\n\n\n      })\n    });\n\n  }\n\n  function removeArtistDiv() {\n    api.cancelRecommendationRequests();\n\n    infoContainer.transition().style(\"opacity\", 0).duration(1000);\n    infoContainer.classed(\"hidden\", true);\n    d3.selectAll(\"#countryCount, .on-map-view\").classed(\"hidden\", false);\n    d3.selectAll(\".artist-div\").remove(\"div\");\n    d3.selectAll(\".close-button\").remove(\"button\");\n    d3.selectAll(\".details-h\").remove(\"p\");\n    d3.selectAll(\".details-h4\").remove(\"h4\");\n    d3.selectAll(\".recom-h4\").remove(\"h4\");\n    d3.selectAll(\".artist-control\").remove();\n    d3.selectAll(\".topartists-desc\").remove();\n\n    cnameDiv.classed(\"hidden\", true);\n    d3.select(\"#cnameCont\").remove(\"h1\");\n    d3.select(\"#cnameCont\").remove(\"h5\");\n  }\n\n  function makeSummaryDiv(artistname) {\n    var usertaglist = [];\n    //console.log(usertaglist);\n    var artisttaglist = [];\n\n    d3.select(\"#summaryText\").remove();\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\n    d3.select(\"#summaryText\").append(\"img\")\n      .attr({\n        id: \"sum-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      });\n\n    //Get artist info from Lastfm\n    api.getArtistInfo(artistname, function(art) {\n      var text = art[0].description.replace(/(\\n)+/g, '<br />');\n      //var text = text.substring(6);\n      //Get artist's top tags\n      artisttaglist = art[0].tags;\n      //Create list of user tags\n\n      //Make list of artist tags which are also user's top tags:\n      for (let y = 0; y < 15; y++) {\n        for (let z = 0; z < artisttaglist.length; z++) {\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\n            usertaglist.push(USER_TAGS[y].tag)\n          }\n        }\n      }\n\n      //Create combined tag list and remove duplicates\n      var taglist = usertaglist.concat(artisttaglist);\n      taglist = taglist.filter(function(elem, pos) {\n        return taglist.indexOf(elem) == pos;\n      })\n      // Remove loading text\n      d3.select(\"#summaryText\").html(\"\");\n      //Create containing div\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\n      summaryText.style(\"max-height\", h + \"px\");\n\n      summaryText.append(\"h4\").html(artistname);\n\n      //Show top 7 tags\n      for (let i = 0; i < Math.min(taglist.length, 6); i++) {\n        var tagdiv = summaryText.append(\"div\").attr(\"class\", \"tagdiv\").append(\"h4\").html(\"#\" + taglist[i]);\n        //Mark all user tags\n        for (let p = 0; p < usertaglist.length; p++) {\n          if (taglist[i] === usertaglist[p])\n            tagdiv.classed(\"usertag\", true);\n        }\n      }\n      //Display artist summary\n      summaryText.append(\"p\").html(text || \"No description available - <a href='https://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\n\n    })\n\n  }\n\n  /**\n   * Toggles highlight of a specified country\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\n   */\n  function highlightCountry(highlight, countryElement) {\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\n\n    if (highlight) {\n      // Fade out all other countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", function() {\n          return (+this.id === +countryElement.id ? 1.0 : 0.3);\n        })\n\n      var ce = d3.select(document.getElementById(\"\" + countryElement.id)); // d3 can't select ids that are only numbers\n      ce.classed(\"highlighted\", true);\n    } else {\n      // Fade in all countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", 1.0)\n    }\n\n  }\n\n  function clicked(d) { //d är det en har klickat på\n\n    var x, y, k;\n    //bounding box for clicked country\n    var b = path.bounds(d);\n\n    getCountryPlaycount(d);\n\n    //Set scale\n    var modscaleX = (b[1][0] - b[0][0]);\n    var modscaleY = (b[1][1] - b[0][1]);\n\n    //Dom't zoom too far with small countries!\n    if (modscaleX < 80)\n      modscaleX = 80;\n\n    //Landet är inte centrerat redan\n    if (d && centered !== d) {\n      centered = d;\n      removeArtistDiv();\n      makeArtistDiv(d);\n      highlightCountry(true, d);\n\n\n      //Special rules for special countries:\n      switch (d.id) {\n        case 840: //US\n          k = 3;\n          x = -(b[1][0] + b[0][0]) / 3;\n          y = -(b[1][1] + b[0][1]) / 1.7;\n          break;\n        case 250: //France\n          k = 7.012;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 3.4;\n          break;\n        case 528: //Netherlands\n          k = 9.0124;\n          x = -(b[1][0] + b[0][0]) / 1.5;\n          y = -(b[1][1] + b[0][1]) / 3.3;\n          break;\n        case 643: //Russia\n          k = 1.9;\n          x = -(b[1][0] + b[0][0]) / 1.25;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n        case 554: //New Zeeland\n          k = 4;\n          x = -(b[1][0] + b[0][0]) / 0.90;\n          y = -(b[1][1] + b[0][1]) / 1.8;\n          break;\n        case 36: //Australia\n          k = 3.3;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 2.1;\n          break;\n\n        default: //Everybody else\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n      }\n\n      //Landet är redan centrerat\n    } else {\n      x = -width / 2;\n      y = -height / 2 - height * 0.08;\n      k = 1\n      removeArtistDiv();\n      highlightCountry(false);\n      centered = null;\n\n      //detailsDiv.classed(\"hidden\", true);\n    }\n\n    var pt = projection.translate();\n    // Tell map to move with animation\n    // Basically does the same as before: translate to middle,\n    // then to x and y with respect to scale\n    move([pt[0] + x * k, pt[1] + y * k], k, true);\n\n  }\n\n  //function to add points and text to the map (used in plotting capitals)\n  function addpoint(lat, lon, text) {\n\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\n    var x = projection([lat, lon])[0];\n    var y = projection([lat, lon])[1];\n\n    gpoint.append(\"svg:circle\")\n      .attr(\"cx\", x)\n      .attr(\"cy\", y)\n      .attr(\"class\", \"point\")\n      .attr(\"r\", 1.5);\n\n    //conditional in case a point has no associated text\n    if (text.length > 0) {\n\n      gpoint.append(\"text\")\n        .attr(\"x\", x + 2)\n        .attr(\"y\", y + 2)\n        .attr(\"class\", \"text\")\n        .text(text);\n    }\n\n  }\n\n  /** \"PUBLUC\" FUNCTIONS **/\n  map.putCountryCount = function(object) {\n    countryCount = JSON.parse(JSON.stringify(object));\n    countryScore = 0;\n    var countryList = [];\n\n    // Extract info for the current user\n    d3.keys(countryCount).forEach(function(id) {\n      if (countryCount[id][SESSION.name]) {\n        countryCount[id] = countryCount[id][SESSION.name];\n        countryScore = countryScore + 1;\n        countryList.push(+id)\n      } else {\n        // delete countryCount[id];\n      }\n    })\n\n    if (topo) redraw();\n\n    window.countryScore = countryScore;\n\n  }\n})(window, document)\n","var screenshot = {};\n\n(function (window, document) {\n\tscreenshot.render = function () {\n\t\tvar titleString,\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\n\t\t\timg;\n\n\t\tvar explrLogo = new Image();\n\n\t\tvar svg = d3.select(\"#map-svg\");\n\t\tvar w = svg.attr(\"width\");\n\t\tvar h = svg.attr(\"height\");\n\n\t\tvar canvas = document.createElement(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\n\t\t// canvg(canvas, document.getElementById(\"map-svg\").outerHTML);\n\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\n\t\tvar textColor = window.getComputedStyle(document.body).color;\n\n\t\tvar drawCenteredText = function (obj) {\n\t\t\tctx.font = obj.font;\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\n\t\t\tif (obj.lineWidth) {\n\t\t\t\tctx.lineWidth = obj.lineWidth;\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\t\t\t}\n\t\t}\n\n\t\tcanvas.width = w;\n\t\tcanvas.height = h;\n\n\t\t// insert background rect\n\t\tsvg.insert(\"rect\", \"g\")\n\t\t\t.attr({\n\t\t\t\tid: \"background-rect\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\theight: \"100%\",\n\n\t\t\t})\n\t\t\t.style({\n\t\t\t\tfill: backgroundColor,\n\t\t\t});\n\n\t\t// Add color, font to legend text\n\t\td3.selectAll('.legend text, text.legend').style({\n\t\t\t\"font-family\": function () {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\n\t\t\t},\n\t\t\t\"font-size\": function () {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\n\t\t\t},\n\t\t\t\"fill\": textColor,\n\t\t});\n\t\td3.selectAll(\".legend rect\").style({\n\t\t\tstroke: backgroundColor,\n\t\t})\n\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\n\n\t\texplrLogo.onload = function () {\n\t\t\t/* Add text and shiiet */\n\t\t\t// Add text background box\n\t\t\tctx.save(); // To draw with different opaticy\n\t\t\tctx.globalAlpha = 0.6;\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tlet scoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 210 countries\";\n\t\t\tlet titleString = SESSION.name + \"'s musical world map\";\n\t\t\tctx.font = \"34px Patua One\";\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\n\t\t\tctx.fillStyle = textColor;\n\n\t\t\t// Add text\n\t\t\tctx.fillStyle = textColor;\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: titleString,\n\t\t\t\tfont: \"34px Patua One\",\n\t\t\t\ty: h - 60,\n\t\t\t});\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: scoreString,\n\t\t\t\tfont: \"20px Didact Gothic\",\n\t\t\t\ty: h - 40,\n\t\t\t});\n\n\t\t\t// Add explr.fm logo\n\t\t\tctx.restore();\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\n\n\t\t\td3.select(\"#background-rect\").remove();\n\n\t\t\t//console.log(canvas.toDataURL())\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL(\"image/png\");\n\t\t\t// d3.select(\"body\").append(img);\n\t\t\t//\n\n\t\t\tvar dataurl = canvas.toDataURL(\"image/png\");\n\t\t\t// console.log(\"dataurl:\", dataurl)\n\n\t\t\t// window.open(dataurl, \"_blank\");\n\n\t\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"\";\n\n\t\t}\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\n\t}\n\n\tscreenshot.close = function () {\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"display:none;\";\n\t}\n\n})(window, document);\n"]}