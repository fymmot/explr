{"version":3,"sources":["api/lastfm.js","api/api.js","script.js","map.js","screenshot.js"],"names":["api","lastfm","key","url","keyI","keys","send","method","options","callback","retries","length","xhr","gotResponse","aborted","undefined","forEach","el","replace","tryGet","tries","cb","d3","json","e","d","clearTimeout","timeout","JSON","parse","response","error","errInfo","errorCode","try","console","log","setTimeout","bind","abort","STORED_ARTISTS","CACHED_NO_COUNTRIES","superCount","csv","err","data","alias","nest","tag","toLowerCase","map","cname","name","getCountry","artist","responseData2","toptags","theTroubles","concat","demonymTag","id","country","count","countryTag","some","t","i","tname","bestTag","includes","Object","assign","getCountries","artists","checkCount","select","html","SESSION","total_artists","localforage","setItem","returnList","returnObject","push","Date","getTime","getTags","tags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","cancelRecommendationRequests","getRecommendations","recommendations","USER_TAGS","slice","userTagObj","rollup","xhr1","tagCounts","topartists","a","num","xhr2","data2","hasTags","sort","b","getFriends","window","document","getItem","val","CACHED_USERS","localStorage","cached_users","addArtistsWithNoCountry","listOfArtistsWithNoCountry","noCountriesListEl","_art","append","saveToStorage","style","visibility","pointer-events","getUserTags","alert","location","origin","pathname","c","tagCount","topArtists","taglist","lim","Math","min","forbidden","nogood","user_tags","stringify","done","random","user","maxPage","currPage","countryCountObj","randomcountrylist","end","loader","transition","duration","each","remove","delay","param","href","split","addEventListener","evt","keyCode","screenshot","render","ga","hitType","eventCategory","eventAction","eventLabel","nextTheme","substr","welcomeOverlay","selectAll","friends","friendName","updateName","attr","target","on","this","classed","responseData","total","putCountryCount","theme","clear","getAllArtists","confirm","reload","totalPages","artistNames","newArtist","playcount","dataObj","leaves","artistList","filter","begin","floor","object","legend","colorArray","countryScore","throttleTimer","redraw","move","height","width","topo","projection","path","svg","g","countryNames","centered","color","zoom","behavior","scaleExtent","countryCount","mydomain","maxartists","maxplaycount","updateDimensions","innerHeight","getElementById","offsetWidth","getCountryPlaycount","numbersWithSpace","x","toString","updateScale","max","pow","E","scale","threshold","domain","range","drawPlays","closeButton","offsetL","offsetT","tooltip","infoContainer","cnameDiv","themes","blue_black","green_black","pink_black","pink_white","green_white","red_white","toTheme","themeList","indexOf","body","setup","geo","naturalEarth","translate","PI","call","click","class","draw","redrawMap","background-color","border-color","enter","insert","properties","offsetLeft","offsetTop","mouse","node","parseInt","clicked","removeArtistDiv","len","ceil","legend_labels","y","text1","text","getComputedTextLength","_","updateLegend","tr","sc","animate","event","s","highlightCountry","h","invert","makeArtistDiv","showNextFive","showArtists","currentNoArtists","showPreviousFive","first","last","initial","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","currentCount","recLoadingDiv","recLoadingMessage","src","display","margin","namelist","list","arr","Array","array","j","temp","shuffleArray","art","artistimg","artistname","recoArtistDiv","usertaglist","artisttaglist","summaryText","z","elem","pos","offsetHeight","tagdiv","p","countryElement","k","bounds","modscaleX","modscaleY","pt","countries","world","topojson","feature","objects","features","countryList","drawCenteredText","obj","ctx","font","fillText","string","w","measureText","lineWidth","strokeStyle","strokeText","explrLogo","Image","canvas","createElement","getContext","backgroundColor","getComputedStyle","textColor","fill","font-family","font-size","stroke","canvg","XMLSerializer","serializeToString","onload","save","globalAlpha","fillStyle","scoreString","titleString","fillRect","restore","drawImage","toDataURL","getElementsByClassName","close"],"mappings":"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","file":"../all.min.js","sourcesContent":["var api = api || {};\n\napi.lastfm = {};\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\napi.lastfm.url = \"https://ws.audioscrobbler.com/2.0/\";\n\n(function (api) {\n\tvar keyI = 0;\n\tvar keys = [\n\t\t// https://github.com/ampache/ampache/issues/1694\n\t\t\"13893ba930c63b1b2cbe21441dc7f550\",\n\n\t\t// https://www.reddit.com/r/lastfm/comments/3okkij/cant_create_lastfm_api_key/\n\t\t\"4cb074e4b8ec4ee9ad3eb37d6f7eb240\",\n\n\t\t// https://www.w3resource.com/API/last.fm/tutorial.php\n\t\t\"4a9f5581a9cdf20a699f540ac52a95c9\",\n\n\t\t// https://www.reddit.com/r/lastfm/comments/3l3cae/cant_get_a_lastfm_api_key/\n\t\t\"57ee3318536b23ee81d6b27e36997cde\",\n\n\t\t// original explr api key\n\t\t\"865b1653dbe200905a5b75d9d839467a\",\n\t\t\n\t\t// https://www.w3resource.com/API/last.fm/example.html\n\t\t\"68b2125fd8f8fbadeb2195e551f32bc4\",\n\t\t\n\t\t// https://rstudio-pubs-static.s3.amazonaws.com/236264_81312ba4d795474c8641dd0e2af83cba.html\n\t\t\"1ba315d4d1673bbf88aed473f1917306\"\t\t\n\t];\n\n\tvar rotateKey = function () {\n\t\tapi.lastfm.key = keys[++keyI % keys.length];\n\t}\n\n\t/**\n\t* Send an API call to last.fm\n\t* @param {String} method    The method name (e.g. \"library.getartists\")\n\t* @param {Array} options    An array of tuples (arrays with two elements)\n\t                            with options for the request: [\"key\", \"value\"]\n\t* @param {Function} callback    The callback function to call with the data\n\t                                returned from the request. Takes two arguments,\n\t                                error and data (callback(error, data))\n\t*/\n\tapi.lastfm.send = function (method, options, callback, retries) {\n\t\trotateKey();\n\n\t\tvar url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\n\t\t\tapi.lastfm.key + \"&format=json\";\n\t\tvar xhr, gotResponse, retries = undefined === retries ? 10 : retries,\n\t\t\taborted = false;\n\n\t\toptions.forEach(function (el) {\n\t\t\turl += \"&\" + el[0] + \"=\" +\n\t\t\t\t(el[1] + \"\")\n\t\t\t\t.replace(\"&\", \"%26\")\n\t\t\t\t.replace(\"/\", \"%2F\")\n\t\t\t\t.replace(\"+\", \"%2B\")\n\t\t\t\t.replace(\"\\\\\", \"%5C\");\n\t\t});\n\n\t\tfunction tryGet(tries, cb) {\n\t\t\txhr = d3.json(url, function (e, d) {\n\t\t\t\tif (aborted) {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (e) { // we got an actual server error: 4xx, 5xx\n\t\t\t\t\td = JSON.parse(e.response);\n\t\t\t\t\t// now e and d are the same\n\t\t\t\t} else if (d.error) {\n\t\t\t\t\t// we got 200 BUT it's an error\n\t\t\t\t\te = d;\n\t\t\t\t}\n\n\t\t\t\t// console.log({\n\t\t\t\t// \te: e,\n\t\t\t\t// \td: d\n\t\t\t\t// });\n\n\t\t\t\tif (e) {\n\t\t\t\t\tvar errInfo = {\n\t\t\t\t\t\tmethod: method,\n\t\t\t\t\t\terrorCode: e.error,\n\t\t\t\t\t\ttry: tries,\n\t\t\t\t\t\toptions: options,\n\t\t\t\t\t\tkey: api.lastfm.key,\n\t\t\t\t\t};\n\t\t\t\t\t// alert(\"ERROR\");\n\t\t\t\t\tif ((\n\t\t\t\t\t\t\te.error === 29 || // Rate Limit Exceeded\n\t\t\t\t\t\t\te.error === 8 // Operation failed\n\t\t\t\t\t\t) && tries < retries) {\n\t\t\t\t\t\tconsole.log(\"Retry request: \", errInfo);\n\t\t\t\t\t\tsetTimeout(tryGet.bind(null, tries + 1, cb), tries * 3000);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tries >= retries) {\n\t\t\t\t\t\tconsole.log(\"Retry failed after \" + retries + \" attempts, will stop trying.\", errInfo);\n\t\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\t\taborted = true;\n\t\t\t\t\t\te = \"ERROR\";\n\t\t\t\t\t\td = {\n\t\t\t\t\t\t\terror: \"Took to long to respond\"\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tgotResponse = true;\n\t\t\t\tcb(e, d);\n\t\t\t});\n\t\t}\n\n\t\ttryGet(0, callback);\n\n\t\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\n\t\tvar timeout = setTimeout(function () {\n\t\t\tif (!gotResponse) {\n\t\t\t\t//console.log(\"GET \" + url + \" took to long, aborting\");\n\t\t\t\txhr.abort();\n\t\t\t\tcallback(\"ERROR\", {\n\t\t\t\t\terror: \"Took to long to respond\"\n\t\t\t\t});\n\t\t\t}\n\t\t}, 20000);\n\n\t\treturn {\n\t\t\tabort: function () {\n\t\t\t\taborted = true;\n\t\t\t\txhr.abort();\n\t\t\t}\n\t\t};\n\t}\n\n})(api);\n","/*requires:\napi/lastfm.js\n*/\n\nvar api = api || {};\nvar superCount = 0;\n\n(function(window, document) {\n\td3.csv(\"assets/data/countries.csv\", function(err, data) {\n\t\tlet alias = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\tif (d && d.tag) {\n\t\t\t\t\treturn d.tag.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t})\n\t\t\t.map(data);\n\n\t\tlet cname = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\treturn d.name.toLowerCase();\n\t\t\t})\n\t\t\t.map(data);\n\n\t\t/**\n\t\t * Tries to find out the country for a specified artist.\n\t\t * @param  {String}   artist   Name of the artist to get country for\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\n\t\t *                             The callback function takes one argument, this object:\n\t\t *\n\t\t * \t\t\t\t\t\t\t\t```\n\t\t *                             {\n\t\t *                             \t\"artist\": \"\", // <artist name>,\n\t\t *                             \t\"country\": \"\", // <country name>,\n\t\t *                             \t\"id\": \"\", // <country id>,\n\t\t *                             \t\"tag\": \"\", // <the tag that decided the country (e.g. Swedish for Sweden)>\n\t\t *                             }\n\t\t * \t\t\t\t\t\t\t\t```\n\t\t *\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\n\t\t *\n\t\t */\n\t\tapi.getCountry = function(artist, callback) {\n\t\t\t// Get artists country code here, from last.fm or whatever\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err, responseData2) {\n\t\t\t\t// Return if something failed\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\n\t\t\t\t\tresponseData2.toptags.tag.length) {\n\t\t\t\t\tcallback({\n\t\t\t\t\t\t\"artist\": artist\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lista med taggar vi vill dubbelkolla\n\t\t\t\tvar troubleCountries = [\"georgia\", \"ireland\"];\n\t\t\t\tvar troubleLanguages = [\"spanish\", \"french\", \"english\", \"portuguese\", \"russian\", \"italian\", \"japanese\", \"korean\", \"indian\", \"swedish\", \"irish\"];\n\t\t\t\tvar theTroubles = [].concat(troubleCountries, troubleLanguages);\n\n\t\t\t\t// check for country-tags in the artist's tags\n\t\t\t\tlet demonymTag = { tag: \"\", id: null, country: \"\", count: 0 };\n\t\t\t\tlet countryTag = demonymTag;\n\n\t\t\t\tresponseData2.toptags.tag.some(function (t, i) {\n\t\t\t\t\tvar tname = t.name.toLowerCase();\n\n\t\t\t\t\t// no need to search anymore since we only care\n\t\t\t\t\t// about the créme de la creme i.e. the tag with the\n\t\t\t\t\t// highest count\n\t\t\t\t\tif (countryTag.id && demonymTag.id) { return true; }\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// sweden->sweden\n\t\t\t\t\t\tif (cname[tname] && cname[tname][0].id) {\n\t\t\t\t\t\t\tcountryTag = { tag: tname, id: cname[tname][0].id, country: cname[tname][0].name, count: t.count };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// swedish -> sweden\n\t\t\t\t\t\tif (alias[tname] && alias[tname][0].id) {\n\t\t\t\t\t\t\tdemonymTag = { tag: tname, id: alias[tname][0].id, country: alias[tname][0].name, count: t.count };\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t});\n\n\t\t\t\t// country is best, demonym second\n\t\t\t\tvar bestTag = (countryTag.id && demonymTag.count < 10 * countryTag.count) ?\n\t\t\t\t\tcountryTag :\n\t\t\t\t\t(demonymTag.id \n\t\t\t\t\t\t? demonymTag\n\t\t\t\t\t\t: {});\n\n\t\t\t\tif (countryTag.tag === \"georgia\" && responseData2.toptags.tag.some(function (t) {\n\t\t\t\t\t\treturn [\"american\", \"us\", \"usa\"].includes(t.name.toLowerCase())\n\t\t\t\t\t})) {\n\t\t\t\t\t// it's not the country...\n\t\t\t\t\tbestTag = demonymTag;\n\n\t\t\t\t\tconsole.log(\"'\" + artist + \"' is tagged with 'georgia', but I'm gonna go ahead and guess they're really from the U.S.\");\n\t\t\t\t}\n\n\t\t\t\tif (theTroubles.includes(bestTag.tag)) {\n\t\t\t\t\tconsole.log(\"Potentially incorrect country for '\" + artist + \"': \" + bestTag.country + \", using the tag '\" + bestTag.tag + \"'\");\n\t\t\t\t}\n\n\t\t\t\tcallback(Object.assign({ \"artist\": artist, }, bestTag));\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Returns a list of country objects for a list of artist names.\n\t\t *\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\n\t\t * @param  {Array}   artists  Array of artist names (String)\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\n\t\t *                             containing only those artists that have a country\n\t\t *                             associated with them. For object structure, see api.getCountry\n\t\t */\n\t\tapi.getCountries = function(artists, callback) {\n\t\t\tvar returnList = [],\n\t\t\t\tcount = 0;\n\t\t\t/**\n\t\t\t * Increases a count and checks if we've tried\n\t\t\t * to get country for all artists\n\t\t\t */\n\t\t\tvar checkCount = function() {\n\t\t\t\tcount++;\n\t\t\t\tsuperCount++;\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>You can start exploring,<br>but it might interfere<br>with loading your artists.\");\n\t\t\t\tif (count === artists.length) {\n\t\t\t\t\t// We done, save artists and call back\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\n\t\t\t\t\t\tcallback(returnList);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get countries for all artists\n\t\t\tartists.forEach(function(el, i) {\n\t\t\t\t// first check stored artists to see if we've already checked this artist\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\n\t\t\t\t\treturnObject.artist = el;\n\t\t\t\t\treturnList.push(returnObject);\n\t\t\t\t\tcheckCount();\n\t\t\t\t} else {\n\t\t\t\t\tvar start = new Date().getTime();\n\n\t\t\t\t\tapi.getCountry(el, function(data) {\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\n\t\t\t\t\t\t// console.error(data)\n\n\t\t\t\t\t\t// if (data.name) {\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\n\t\t\t\t\t\t\t\"id\": data.id,\n\t\t\t\t\t\t\t\"name\": data.name,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturnList.push(data);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\n\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\n\n\n\t\t\t\t\t\tcheckCount();\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\t\t}\n\t})\n\n\t/**\n\t * Get all tags for an artist.\n\t * @param  {String}   artist   Artist name\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\n\t */\n\tapi.getTags = function(artist, callback) {\n\t\t// Check if artist tags are already saved, if so return them\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\n\t\t\t// console.log(\"Had in store, no api call\");\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t} else {\n\t\t\t// Create object in localstorage\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\n\t\t\tSTORED_ARTISTS[artist].tags = [];\n\n\t\t\t// Get from lastfm\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\n\t\t\t\tfunction(err, responseData2) {\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\n\t\t\t\t\tlocalforage.setItem(\"artists\", STORED_ARTISTS, function (err) {\n\t\t\t\t\t\tif (err) { console.error(\"Failed saving artists to storage: \", err); }\n\t\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tapi.getArtistInfo = function(artist, callback) {\n\t\tvar artistInfo = [];\n\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\n\t\t\t//Creating a list of tag names\n\t\t\tvar tagnamelist = [];\n\t\t\tif (data1.artist.tags.tag) {\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\n\t\t\t\t\ttagnamelist.push(t.name);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tartistInfo.push({\n\t\t\t\tname: artist,\n\t\t\t\turl: data1.artist.url,\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\n\t\t\t\tdescription: data1.artist.bio.summary,\n\t\t\t\ttags: tagnamelist\n\t\t\t})\n\t\t\tcallback(artistInfo);\n\t\t})\n\n\n\n\t}\n\n\t/**\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\n\t * Also included are which tags matched.\n\t *\n\t * Calling this function cancels previous requests initiated by this function.\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\n\t */\n\tvar recommendationRequests = [];\n\tapi.cancelRecommendationRequests = function () {\n\t\trecommendationRequests.forEach(function (xhr) {\n\t\t\txhr.abort();\n\t\t});\n\n\t\trecommendationRequests = [];\n\t}\n\tapi.getRecommendations = function (country, callback) {\n\t\tapi.cancelRecommendationRequests();\n\n\t\tvar recommendations = [];\n\n\t\t// get top tags for user\n\t\tvar toptags = USER_TAGS.slice(0, 15);\n\t\t// make tag list to an object (back n forthss)\n\t\tvar userTagObj = d3.nest().key(function(d) {\n\t\t\treturn d.tag;\n\t\t}).rollup(function(d) {\n\t\t\treturn d[0].count;\n\t\t}).map(toptags);\n\n\n\t\t//console.log(\"Got top tags for user!\")\n\n\t\t// Get top artists for tag country\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\n\t\t\t// Gotta count matching tags to then sort\n\t\t\tvar tagCounts = {};\n\n\t\t\t// Get the tags for these artists\n\t\t\t//console.log(data1, err)\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\n\t\t\t\tcallback([]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar artists = data1.topartists.artist;\n\n\t\t\tartists.forEach(function(a, num) {\n\t\t\t\ttagCounts[a.name] = [];\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\n\t\t\t\t\tif (hasTags) {\n\t\t\t\t\t\t// Compare top 10 tags to user tags\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\n\t\t\t\t\t\t\treturn d.name;\n\t\t\t\t\t\t}).map(data2.toptags.tag);\n\n\t\t\t\t\t\t// Get rid of justin bieber\n\t\t\t\t\t\tif (tags[country]) {\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (num === artists.length - 1) {\n\t\t\t\t\t\t//console.log(\"We've gotten tag counts for all artists, make a list!\")\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\n\t\t\t\t\t\t\trecommendations.push({\n\t\t\t\t\t\t\t\tname: d,\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t//console.log(recommendations)\n\t\t\t\t\t\tcallback(recommendations);\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\trecommendationRequests.push(xhr2);\n\t\t\t})\n\t\t})\n\n\t\trecommendationRequests.push(xhr1);\n\t}\n\n\tapi.getFriends = function(callback) {\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\n\t}\n})(window, document);\n","/* requires:\napi/api.js\napi/lastfm.js\n*/\n\nvar STORED_ARTISTS;\nlocalforage.getItem(\"artists\", function (err, val) {\n    STORED_ARTISTS = val || {};\n});\n\nvar CACHED_NO_COUNTRIES;\nlocalforage.getItem(\"no_countries\", function (err, val) {\n    CACHED_NO_COUNTRIES = val || {};\n})\n\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\nvar SESSION = {};\n\n(function () {\n    // user = prompt(\"Input your user name, get top 20 artists\")\n    var user, currPage = 1,\n        maxPage;\n    var countryCountObj = {};\n    var count = 0;\n    var tries = 0;\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\n    var listOfArtistsWithNoCountry = [];\n\n    /**\n     * adds artists with no country to the array of artists with\n     * no country :)\n     * \n     * @param {*} data Response from api.getCountries; array of\n     * artists that may or may not have country\n     */\n    var addArtistsWithNoCountry = function (data) {\n        listOfArtistsWithNoCountry = listOfArtistsWithNoCountry.concat(data);\n\n        var noCountriesListEl = d3.select(\".no-countries ul\");\n        data.forEach(function (_art) {\n            noCountriesListEl.append(\"li\").html('<a href=\"' + _art.url + '\" target=\"blank\" class=\"no-countries__link\">' + _art.artist + '</a>');\n        })\n\n        saveToStorage(\"no_countres\", listOfArtistsWithNoCountry);\n\n        if (listOfArtistsWithNoCountry.length) {\n            d3.select(\".no-countries\").style({\n                visibility: \"visible\",\n                \"pointer-events\": \"all\",\n            });\n        }\n    }\n\n    var getAllArtists = function () {\n        // console.log(\"get artists\")\n\n        api.lastfm.send(\"library.getartists\", [\n                [\"user\", user],\n                [\"limit\", 50],\n                [\"page\", currPage]\n            ],\n            function (error, responseData) {\n                // Special case for unfortunate users\n                if (responseData === \"\") {\n                    console.error('Got empty string (\"\") as response, skipping page.')\n                    currPage++;\n                    getAllArtists();\n                    return;\n                }\n                if (error || responseData.error) {\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\n\n                    // Try again, but not forever\n                    if (tries++ < 5) {\n                        getAllArtists();\n\n                        // TODO: Show erorr message ;)\n                    } else {\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\n                        if (refresh) {\n                            window.localStorage.clear();\n                            localforage.clear();\n                            saveToStorage(\"artists\", STORED_ARTISTS, function () {\n                                window.location.reload()\n                            });\n                        }\n                    }\n                    return;\n                }\n\n                tries = 0;\n\n                if (currPage === 1) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\n\n                    if (SESSION.total_artists === 0) {\n                        d3.select(\".bubblingG\").remove();\n                        d3.select(\"#loading-text\")\n                            .html(\"You haven't listened to any<br> artists yet. Start scrobbling with <br>\\\n                                                        <a href='http://evolver.fm/2012/05/08/how-to-scrobble-to-last-fm-from-itunes-\" +\n                                \"spotify-and-more/'>your favorite music player!</a>\");\n                        d3.select(\".loader\").style(\"pointer-events\", \"all\");\n                        return;\n                    }\n                }\n\n                currPage++;\n                // console.log(\"Artists done, get countries\");\n\n                // Save artist data to localStorage (and create a list of artist names)\n                var artistNames = []\n                responseData.artists.artist.forEach(function (newArtist) {\n                    var a = STORED_ARTISTS[newArtist.name] || {};\n\n                    a.playcount = +newArtist.playcount;\n                    a.url = newArtist.url;\n\n                    STORED_ARTISTS[newArtist.name] = a;\n                    artistNames.push(newArtist.name);\n                })\n                saveToStorage(\"artists\", STORED_ARTISTS);\n                // var n = count++;\n\n                // Get country for all artists\n                api.getCountries(artistNames,\n                    function (data) {\n                        // Count plays for each country?\n                        // countryCountList = countryCountList.concat(data);\n                        var dataObj = d3.nest() //Gör så att man kan slå upp på land-id och få upp en lista på artister.\n                            .key(function (d) {\n                                return d.id;\n                            })\n                            .rollup(function (leaves) { //gör så att man får en lista på alla artister för ett land.\n                                return leaves;\n                            })\n                            .map(data); //Skickar in en lista med ett objekt för varje artist.\n\n                        d3.keys(dataObj).forEach(function (id) {\n                            countryCountObj[id] = countryCountObj[id] || {};\n                            countryCountObj[id][user] = countryCountObj[id][user] || [];\n                            var artistList = countryCountObj[id][user]; // list of artists for a country\n\n                            // if (artistList) {\n                            artistList = artistList.concat(dataObj[id]);\n\n                            //Lägger på de nya dataObj-elementen i countryCountObj-listan.\n                            // } else {\n                            //     artistList = dataObj[id];\n                            // }\n\n                            artistList.forEach(function (el, i) {\n                                //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\n                                artistList[i].url = STORED_ARTISTS[el.artist].url;\n                                artistList[i].playcount = STORED_ARTISTS[el.artist].playcount;\n                                // if (artistList[i].users) {\n                                //     artistList[i].users.push(user);\n                                // } else {\n                                //     artistList[i].users = [user];\n                                // }\n                            });\n                            //countryCountObj är en lista med \"country\"-objekt. \n                            //Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\n                            //dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\n                            countryCountObj[id][user] = artistList;\n                        })\n\n                        addArtistsWithNoCountry(data.filter(function (artist) {\n                            return !artist.id; // && artist.artist && artist.url;\n                        }));\n\n                        map.putCountryCount(countryCountObj);\n\n                        if (currPage > maxPage) {\n                            end();\n                            return;\n                        } else {\n                            getAllArtists();\n                        }\n                    });\n            });\n    }\n\n    var getRecommendations = function () {\n        var currPage = 1,\n            limit = 50,\n            maxPage = 1000 / limit;\n        var countriesList = JSON.parse(window.localStorage.countries);\n\n        var countriesObj = d3.nest().key(function (d) {\n            return d.name;\n        }).rollup(function (d) {\n            return d[0];\n        }).map(countriesList);\n        // Get \"all\" artists from one country\n        // countriesList.forEach(function(country){\n\n        // });\n        api.lastfm.send(\"tag.gettopartists\", [\n            [\"tag\", \"swedish\"],\n            [\"limit\", limit],\n            [\"page\", currPage]\n        ], function (err, data) {\n            var artists = data.topartists.artist;\n            // For each artist, get their tags\n            artists.forEach(function (a) {\n                api.lastfm.send(\"artist.gettoptags\", [\n                    [\"artist\", a.name]\n                ], function (err, data) {\n                    // console.log(data);\n                })\n            })\n            // Look for user's top tags in artist tags\n            // If a lot of matches, save to recommended artists for that country\n        });\n\n    }\n\n    var getUserTags = function (err, data) {\n        // err = err ||data.error;\n        if (err || data.error) {\n            if (data && data.error === 6) {\n                alert(\"User not found\");\n                window.location.assign(window.location.origin + window.location.pathname);\n            }\n        }\n\n\n        /*if (err || data.error) {\n            console.error(\"Erorr in getUserTags\", err, data);\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\n            window.location.replace(window.location.origin + window.location.pathname);\n        }*/\n\n        var c = 0;\n\n        var tagCount = {};\n\n        //console.log(\"Gotta get tags\")\n\n        var topArtists = data.topartists.artist;\n        var done = function () {\n            // make list of tags to sort\n            USER_TAGS = [];\n            //Remove specific tags from user's top tags\n            let forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\", \"seen live\", \"english\", \"singer-songwriter\", \"spanish\", \"french\"];\n            d3.keys(tagCount).forEach(function (el) {\n                var nogood = false\n                for (let i = 0; i < forbidden.length; i++) {\n                    if (el === forbidden[i]) {\n                        nogood = true;\n                    }\n                }\n                if (!nogood) {\n                    USER_TAGS.push({\n                        tag: el,\n                        count: tagCount[el]\n                    });\n                }\n            })\n            USER_TAGS.sort(function (a, b) {\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n            });\n            console.log(\"Done getting tags, saved to localStorage.user_tags\")\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\n        }\n\n\n        topArtists.forEach(function (el, i) {\n            // get top ten tags and save to users tag count....\n            setTimeout(function () { // Set timeout to not stop artists from loading...\n                api.lastfm.send(\"artist.gettoptags\", [\n                    [\"artist\", el.name]\n                ], function (err, data) {\n                    let taglist = data.toptags && data.toptags.tag;\n                    if (taglist) {\n                        var lim = Math.min(taglist.length, 10);\n                        for (var i = 0; i < lim; i++) {\n                            if (tagCount[taglist[i].name]) {\n                                tagCount[taglist[i].name]++;\n                            } else {\n                                tagCount[taglist[i].name] = 1;\n                            }\n                        }\n                        // console.log(c, topArtists.length)\n                    }\n\n                    c++;\n                    if (c == topArtists.length - 1) {\n                        done();\n                    }\n                });\n            }, Math.random() * 3000);\n        });\n\n    }\n\n    var begin = function () {\n        //Send analytics event\n        ga('send', 'event', 'splash screen', 'Go!', 'test');\n        // fade out username input box\n        var welcomeOverlay = d3.select(\"#welcome-container\");\n        welcomeOverlay.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function () {\n                welcomeOverlay.remove();\n            });\n\n        // Fade in loader\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\n        d3.select(\"#loading-text\").html(\"Getting library...\");\n        setTimeout(function () {\n            if (d3.select(\"#loading-text\").html() === \"Getting library...\") {\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\n\n                setTimeout(function () {\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\n                            .style(\"pointer-events\", \"all\");\n                    }\n                }, 8000);\n            }\n        }, 8000);\n\n        // Fade in legend, progress-bar etc\n        d3.selectAll(\".on-map-view\").style({\n            \"visibility\": \"visible\",\n            //            \"opacity\": 0\n        }) //.transition().duration(1000).style(\"opacity\", 1);\n\n        // Get user tags\n        api.lastfm.send(\"user.gettopartists\", [\n            [\"user\", user],\n            [\"period\", \"12months\"],\n            [\"limit\", \"50\"]\n        ], getUserTags);\n\n        // Get user friends\n        api.getFriends(function (err, data) {\n            try {\n                var friends = data.friends.user;\n                var i = 0;\n                var friendName = d3.select(\"#friend-name\");\n\n                var updateName = function () {\n                    friendName.html(\"\");\n                    friendName.append(\"a\").attr({\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\n                        target: \"_self\",\n                    }).html(friends[i].name);\n                }\n\n                d3.selectAll(\".arrow\").on(\"click\", function () {\n                    if (d3.select(this).classed(\"left\")) {\n                        // Go left\n                        i = (i === 0 ? friends.length - 1 : i - 1);\n                    } else {\n                        // Go right\n                        i = (i + 1) % friends.length;\n                    }\n\n                    updateName();\n                })\n\n                updateName();\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n\n            } catch (e) {\n                console.error(\"getFriends()\", e);\n                d3.select(\"#friends\").html(\"&nbsp;Couldn't find any<br>friends on last.fm :(&nbsp;\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n            }\n        });\n\n        if (CACHED_USERS[user]) {\n            // TODO: use timestamp\n            console.log(\"No new artists on last.fm!\");\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\n\n            localforage.getItem(\"no_countries\", function (err, val) {\n                addArtistsWithNoCountry(val || []);\n            });\n\n            // Get number of artists for screenshot etc.\n            api.lastfm.send(\"library.getartists\", [\n                    [\"user\", user],\n                    [\"limit\", 1],\n                    [\"page\", 1]\n                ],\n                function (error, responseData) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                });\n\n            setTimeout(function () {\n                map.putCountryCount(countryCountObj);\n                end();\n            }, 1000)\n        } else {\n            // Save theme\n            var theme = window.localStorage.theme;\n            window.localStorage.clear();\n            if (theme) {\n                window.localStorage.theme = theme;\n            }\n            getAllArtists();\n        }\n    }\n\n    var end = function () {\n        // We're done, fade out loader\n        var loader = d3.select(\".loader\");\n        loader.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function () {\n                loader.remove();\n            });\n        //Also fade out progress bar text (after a short delay)\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\n            .style(\"opacity\", 0);\n\n        CACHED_USERS = {};\n        CACHED_USERS[user] = new Date().getTime();\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\n    }\n\n    // // Set theme\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\n\n    // Try to get username from url\n    var param = window.location.href.split(\"username=\")[1];\n\n    if (param) { // We already have a user\n        // set up keyboard shortcuts\n        window.addEventListener(\"keydown\", function (evt) {\n            switch (evt.keyCode) {\n                // s\n                case 83:\n                    screenshot.render();\n                    //Send google analytics event\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Hotkeys',\n                        eventAction: 'Take screenshot',\n                        eventLabel: 'test'\n                    });\n                    break;\n                    // t\n                case 84:\n                    nextTheme();\n                    //Send google analytics event\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Hotkeys',\n                        eventAction: 'Cycle theme',\n                        eventLabel: 'test'\n                    });\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        if (param.length > 15) {\n            param = param.substr(0, 15);\n        }\n        user = param;\n        SESSION.name = param;\n        begin();\n    } else {\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\n    }\n\n    var saveToStorage = function (key, object, cb) {\n        localforage.setItem(key, object, cb || function () {});\n    }\n})();","/* requires:\napi/api.js\napi/lastfm.js\nscript.js\n*/\n\nvar map = {};\n//White theme default:\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\nvar legend;\nvar countryScore = 0;\n\n(function(window, document) {\n  d3.select(window).on(\"resize\", throttle);\n\n  var doThrottle = false;\n  var filter = \"artists\"; // filter by artists or plays\n\n  var zoom = d3.behavior.zoom()\n    .scaleExtent([1, 9])\n    .on(\"zoom\", move);\n\n\n  var height, width;\n\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\n  let countryCount = {};\n\n  //Variables needed to update scale and legend\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\n  var maxartists = 1,\n    maxplaycount = 0;\n\n  //Setting color and range to be used\n  var color;\n\n  // Set theme\n  var theme = window.localStorage.theme || \"pink_white\";\n\n  map.drawPlays = function() {\n    filter = \"scrobbles\";\n    redraw();\n  };\n\n  /**\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\n   */\n  function updateDimensions() {\n    height = window.innerHeight - 5;\n    width = document.getElementById('map-container').offsetWidth;\n  }\n\n  //Returns total number of plays for country\n  function getCountryPlaycount(c) {\n    if (countryCount[c.id]) {\n      var count = 0;\n      for (let i = 0; i < countryCount[c.id].length; i++) {\n        count += countryCount[c.id][i].playcount;\n      }\n      return count;\n    } else return 0;\n  };\n\n\n  function updateProgressBar() {\n    var progressPro = (countryScore / 210);\n    return progressPro;\n  }\n;\n\n  //Function to format numbers over 1000 with a space\n  function numbersWithSpace(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  }\n  /**\n   * Randomize array element order in-place.\n   * Using Fisher-Yates shuffle algorithm.\n   */\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  //Function to remove duplicates from arrays\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  function updateScale() {\n    var max = -1;\n    switch (filter) {\n      case \"artists\":\n        max = maxartists;\n        for (let i = 0; i < 5; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1));\n        }\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\n        break;\n      case \"scrobbles\":\n        max = maxplaycount;\n        for (let i = 0; i < 7; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\n        }\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\n        break;\n    };\n\n\n    color = d3.scale.threshold()\n      .domain(mydomain)\n      .range(colorArray);\n  };\n\n  function updateLegend() {\n    //Remove decimals from domain\n    var x = 0;\n    var len = mydomain.length\n    while (x < len) {\n      mydomain[x] = Math.ceil(mydomain[x]);\n      x++;\n    };\n\n    //Array of text\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\n\n    //Create Legend\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\n      .data(mydomain);\n\n    //Color box sizes\n    var ls_w = 20,\n      ls_h = 20;\n    var x = width * 0.03;\n    var y = height * 0.03;\n\n    // Add legend filter text\n    var text1 = svg.select(\"#filter-text\")\n      .attr(\"x\", x)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(\"Number of \");\n    var text2 = svg.select(\"#filter\")\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(filter);\n    text2.on(\"click\", function() {\n      // Toggle filter method\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\n      redraw();\n    });\n\n    var noCountryArtists = d3.select(\".no-countries\")\n      .style(\"bottom\", (y + mydomain.length * ls_h + 1.5 * ls_h + 30) + \"px\"); // <<< magic numbers broo\n\n    var enter = legend.enter()\n      .append(\"g\")\n      .attr(\"class\", \"legend\");\n\n    enter.append(\"rect\")\n      .attr(\"x\", x)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - 2 * ls_h - y;\n      })\n      .attr(\"width\", ls_w)\n      .attr(\"height\", ls_h)\n      .style(\"fill\", function(d) {\n        return color(d);\n      });\n    enter.append(\"text\")\n      .attr(\"x\", x + 30)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - ls_h - 4 - y;\n      });\n\n    legend.selectAll(\"text\").data(mydomain)\n      .text(function(d, _, i) {\n        return legend_labels[i];\n      });\n  }\n  //Variables for color legend\n\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\n    \"tooltip hidden\");\n\n  var infoContainer = d3.select(\"body\").append(\"div\").attr(\"class\",\n    \"infoContainer hidden\").attr(\"id\", \"infoContainer\");\n\n  var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\n\n\n  var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"cnameDiv\").attr(\"id\", \"cname\");\n\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"detailsDiv\").attr(\"id\", \"details\");\n\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"recoDiv\").attr(\"id\", \"recommendations\");\n\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\n\n  var closeButton;\n\n  var offsetL;\n  var offsetT;\n\n  //---------------------- Color preferences -------------//\n  var themes = {\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\n  };\n\n  let nextTheme = window.nextTheme = function(toTheme) {\n    // Go to next theme\n    var themeList = d3.keys(themes);\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\n    colorArray = themes[theme];\n\n    //Change body class\n    d3.select(document.body).attr(\"class\", theme);\n\n    // Save :)\n    window.localStorage.theme = theme;\n\n    // Redraw map :)\n    if (topo) redraw();\n  }\n  map.nextTheme = nextTheme;\n\n  nextTheme(theme);\n  updateScale();\n  updateDimensions();\n  setup(width, height);\n\n  function setup(width, height) {\n    projection = d3.geo.naturalEarth()\n      .translate([(width / 2), (height / 2) + height * 0.08])\n      .scale(width / 1.7 / Math.PI);\n\n    path = d3.geo.path().projection(projection);\n\n    svg = d3.select(\"#map-container\").append(\"svg\")\n      .attr(\"id\", \"map-svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\n      .call(zoom)\n      .on(\"click\", click)\n      .append(\"g\");\n\n    g = svg.append(\"g\");\n    svg.append(\"g\").attr(\"id\", \"legend\")\n    svg.append(\"text\").attr({\n      id: \"filter-text\",\n      class: \"legend\"\n    });\n    svg.append(\"text\").attr({\n      id: \"filter\",\n      class: \"legend\"\n    });\n  }\n\n  //Load country aliases and names\n  if (!window.localStorage.countries) {\n    d3.csv(\"assets/data/countries.csv\", function(err, countries) {\n      countryNames = countries;\n\n      countries.forEach(function(i) {\n        //Turning CSV values into numeric data\n        i.id = +i.id;\n      });\n\n      // save countries\n      window.localStorage.countries = JSON.stringify(countries);\n    });\n\n  } else {\n    countryNames = JSON.parse(window.localStorage.countries);\n  }\n  //Load map\n  d3.json(\"assets/data/world-50m.json\", function(error, world) {\n\n    var countries = topojson.feature(world, world.objects.countries).features;\n\n    topo = countries;\n    draw(topo, true);\n\n  });\n\n  function draw(topo, redrawMap) {\n    var country = g.selectAll(\".country\").data(topo);\n\n    var progress = d3.select(\"#progress-bar\").style({\n      \"height\": updateProgressBar() * 100 + \"%\",\n      \"background-color\": colorArray[6]\n    });\n    d3.select(\"#countryCount\").style({\n      \"background-color\": colorArray[1],\n      \"border-color\": colorArray[6]\n    })\n    //Show progressbar text on mouse-over\n    .on(\"mousemove\", function() {\n      d3.select(\"#progress-text\")\n        .transition().duration(150).style(\"opacity\", 0.9);\n    })\n      .on(\"mouseout\", function() {\n        d3.select(\"#progress-text\").transition().duration(150).style(\"opacity\", 0);\n      });\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/210 countries\")\n\n    //Draw countries\n    if (redrawMap) {\n      country.enter().insert(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"id\", function(d, i) {\n          return d.id;\n        })\n        .attr(\"title\", function(d, i) {\n          return d.properties.name;\n        })\n        .style(\"fill\", function() {\n          return color(0);\n        });\n    }\n    //Color countries\n    country.transition().style(\"fill\", function(d) {\n      switch (filter) {\n        case \"artists\":\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\n            color(0);\n          //break;\n        case \"scrobbles\":\n          return color(getCountryPlaycount(d));\n      }\n    })\n\n    //offsets for tooltips\n    offsetL = document.getElementById('map-container').offsetLeft;\n    offsetT = document.getElementById('map-container').offsetTop;\n\n    //tooltips\n    country\n      .on(\"mousemove\", function(d, i) {\n        var name;\n        var tag;\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        tooltip.classed(\"hidden\", false)\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\n            mouse[1] +\n            offsetT + 10) + \"px\")\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\n      })\n      .on(\"mouseout\", function(d, i) {\n        tooltip.classed(\"hidden\", true);\n      })\n      //Show div with top 10 artists for country when clicked\n      .on(\"click\", function(d, i) {\n        var name;\n        var tag;\n        var id;\n\n        clicked(d);\n\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n            id = d.id;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        closeButton\n          .on(\"click\", function(d, i) {\n            removeArtistDiv();\n            // zoom out map, fulhack\n            clicked(centered);\n          }) //\"stäng\" onclick slutar\n      }) // on click slutar\n\n  }\n\n  /*-------redraw----*/\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean\n  function redraw(redrawMap) {\n    updateDimensions();\n\n    if (redrawMap) {\n      d3.select('#map-svg').remove();\n      setup(width, height);\n    }\n\n    maxartists = d3.max(d3.keys(countryCount), function(cname) {\n      return countryCount[cname].length;\n    });\n    maxplaycount = d3.max(d3.keys(countryCount), function(cname) {\n      return getCountryPlaycount({\n        id: cname\n      });\n    })\n    updateScale();\n    updateLegend();\n\n    draw(topo, redrawMap);\n  }\n\n\n  /**\n   * Moves the map to the specified location or based on the current zoom event\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\n   * @param  {Number} sc      Optional: Scale factor\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\n   */\n  function move(tr, sc, animate) {\n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\n\n    // If move was not initiated by clicking on a country, deselect the selected country\n    if (!tr && !sc && centered) {\n      highlightCountry(false);\n      removeArtistDiv();\n      centered = null;\n    }\n\n    var zscale = s;\n    var h = height / 4;\n\n    t[0] = Math.min(\n      (width / height) * (s - 1),\n      Math.max((width * 1.2) * (1 - s), t[0])\n    );\n\n    t[1] = Math.min(\n      h * (s - 1) + h * s,\n      Math.max(height * (1 - s) - h * s, t[1])\n    );\n\n    zoom.translate(t);\n    zoom.scale(s);\n\n    if (animate) {\n      g.transition().duration(950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n\n    } else {\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n    }\n\n    //adjust the country hover stroke width based on zoom level\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\n  }\n  map.move = move;\n\n  var throttleTimer;\n\n  function throttle() {\n    window.clearTimeout(throttleTimer);\n    throttleTimer = window.setTimeout(function() {\n      redraw(true);\n      move([0, 0], 1); // Reset position\n    }, 200);\n  }\n\n\n  //geo translation on mouse click in map\n  function click() {\n    var latlon = projection.invert(d3.mouse(this));\n    // console.log(latlon);\n    //console.log(countryCount);\n  }\n\n\n  /*----------------------------makeArtistDiv------------------------------------------------*/\n  //Skapar \"details-on-demand\"-divarna.\n  function makeArtistDiv(d) {\n\n    //lägga till namn till detailseDiv\n    var name;\n    var tag;\n    var recoms;\n    //var id;\n    countryNames.forEach(function(e, i) {\n      if (e.id === d.id) {\n        name = e.name;\n        tag = e.tag;\n        //id = d.id;\n      };\n    })\n    d3.select(\"#recommendations\").html(\"\");\n    //Show country name and info div on left hand side\n    infoContainer\n      .classed(\"hidden\", false)\n      .transition()\n      .style(\"opacity\", 1)\n      .duration(750);\n\n    //Hide progressbar when showing\n    d3.selectAll(\"#countryCount, .on-map-view\")\n      .classed(\"hidden\", true);\n\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"class\", \"close-button\").html(\"X\");\n\n    //Populate country information div\n    cnameDiv\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\n      .append(\"h1\").html(name);\n    d3.select(\"#cnameCont\").append(\"h5\")\n      .html(function() {\n        if (countryCount[d.id])\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\n        else return \"No artists yet - Find new here ->\"\n      })\n\n\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\n\n      var currentNoArtists = 0;\n      var currentCount = 0;\n\n\n      d3.select(\"#details\").append(\"div\")\n        .html(\"<span>Your top artists tagged with </span><span class=\\\"demonym\\\">#\" + name + \"</span><span> or </span><span class=\\\"demonym\\\">#\" + tag + \"</span><span>: </span>\")\n        .attr(\"class\", \"topartists-desc\");\n      //Show top 5 artists\n\n      d3.select(\"#artistContainer\").append(\"i\")\n        .attr(\"class\", \"fa artist-control right fa-angle-right\")\n        .on(\"click\", function(){\n          showNextFive();\n        });\n\n      d3.select(\"#artistContainer\").append(\"i\")\n        .attr(\"class\", \"fa artist-control left disabled fa-angle-left\")\n        .on(\"click\", function(){\n          showPreviousFive();\n        });\n\n      function showNextFive(){\n        showArtists(currentNoArtists+1, currentNoArtists+5, false);\n        //Send event to google analytics\n        ga('send', {\n          hitType: 'event',\n          eventCategory: 'Artist viewer',\n          eventAction: 'Next five',\n          eventLabel: 'test'\n        });\n      }\n\n      function showPreviousFive(){\n        showArtists(currentNoArtists-9, currentNoArtists-5, false);\n        //Trigger GA event\n        ga('send', {\n          hitType: 'event',\n          eventCategory: 'Artist viewer',\n          eventAction: 'Previous five',\n          eventLabel: 'test'\n        });\n      }\n\n      function showArtists(first, last, initial){\n        //Clean-up previous five artist images\n        d3.selectAll(\".scrobbled\").remove();\n        //console.log(\"displaying \"+first+\" to \"+last)\n\n        //Generate new artist images for all artists within the desired range!\n          for (let i = first-1; i <= last-1; i++) {\n            if (countryCount[d.id][i]) {\n              //console.log(i+\" \"+countryCount[d.id][i].artist)\n              var artistDiv = d3.select(\"#details\").append(\"div\")\n                .attr({\n                  \"class\": \"scrobbled artist-div lowlight\",\n                  \"data-artist\": countryCount[d.id][i].artist\n                })\n                .on(\"click\", function() {\n                  // Lowlight not selected artists\n                  d3.selectAll(\".artist-div\").classed({\n                    \"lowlight\": true,\n                    \"highlight\": false\n                  });\n                  // Highlight selected artist\n                  d3.select(this).classed({\n                    \"highlight\": true,\n                    \"lowlight\": false\n                  });\n\n                  makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\n                });\n\n              var artistLink = artistDiv.append(\"a\").style(\"display\", \"block\")\n              artistLink.append(\"div\")\n                .attr(\"class\", \"image-div\")\n                // .style(\"background-image\", \"url(\" + \"'\" + countryCount[d.id][i].image + \"'\" + \" )\")\n                .style(\"background-image\", \"url(https://lastfm.freetls.fastly.net/i/u/300x300/2a96cbd8b46e442fc41c2b86b821562f.png\")\n                //.append(\"span\").attr(\"class\", \"overlayNo\").html(i+1);\n\n              var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\n\n              playCountDiv.append(\"p\")\n                .html(\"<b>\" + countryCount[d.id][i].artist + \"</b><br>\" + countryCount[d.id][i].playcount + \" scrobbles\")\n                .attr(\"class\", \"details-p\");\n\n              currentCount++;\n            } else {\n              i = last;\n            }\n        }\n        //\n        //Check to see if we are moving backwards or forwards through the list..\n        if (first<currentNoArtists) //Backwards!\n          currentNoArtists = Math.ceil((currentNoArtists-currentCount)/5)*5;\n        else if (last>currentNoArtists) //Forwards!\n          currentNoArtists = currentNoArtists+currentCount;\n        //console.log(\"currentNoArtists är \"+currentNoArtists);\n\n        //Reset the count!\n        currentCount = 0;\n\n        //\n        //Disable and enable user controls\n        //\n\n        //Left arrow...\n        if (currentNoArtists>=10 && !initial){\n          d3.selectAll(\".artist-control.left\")\n            .classed(\"disabled\", false)\n            .on(\"click\", function(){\n              showPreviousFive();\n            });\n        }\n        else{\n          d3.selectAll(\".artist-control.left\")\n            .classed(\"disabled\", true)\n            .on('click',function(){\n              d3.select(this).on('click',null); //Remove click listener!\n            });\n        }\n        //and right...\n        if (currentNoArtists>countryCount[d.id].length-1){ //There are no more artists!\n          d3.selectAll(\".artist-control.right\")\n            .classed(\"disabled\", true)\n            .on('click',function(){\n              d3.select(this).on('click',null); //Remove click listener!\n            });\n        }\n        else{\n          d3.selectAll(\".artist-control.right\")\n            .classed(\"disabled\", false)\n            .on(\"click\", function(){\n              showNextFive();\n            });\n        }\n      }\n      //Fetch the initial five artists!!\n      showArtists(1, 5, true);\n\n\n    } else { //Om landet vi klickat på inte har några lyssnade artister...\n      console.log(\"landet har inga lyssnade artister\");\n    }\n    //\"Recommended\"-heading\n    d3.select(\"#recommendations\").append(\"h4\")\n      .html(\"You may like: \")\n      .attr(\"class\", \"topartists-desc\");\n\n    // show loading message\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\n      .attr(\"id\", \"rec-loading\")\n      .html(\"Looking for artists tagged #\" + tag);\n    recLoadingDiv.append(\"img\")\n      .attr({\n        id: \"rec-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      })\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\n\n\n\n    //Get list of recommendations for country based on tags!\n    api.getRecommendations(tag, function(taglist) {\n      // Return if this callback is from an old (not active) country\n      if (!centered || centered.id !== d.id) {\n        return;\n      }\n      // Show loading message\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\n\n      //Get list of recommendations for country based on country name!\n      api.getRecommendations(name, function(namelist) {\n        // Return if this callback is from an old (not active) country\n        if (!centered || centered.id !== d.id) {\n          return;\n        }\n        //Show loading message\n        recLoadingMessage.html(\"Loading images for recommended artists\");\n\n        //Join the two lists\n        var list = taglist.concat(namelist);\n\n        //Removing duplicates from the list!\n        var arr = {};\n        for (let i = 0; i < list.length; i++)\n          arr[list[i]['name']] = list[i];\n\n        list = new Array();\n        for (let key in arr)\n          list.push(arr[key]);\n\n        list.sort(function(a, b) {\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n        });\n        //Get the first 20 artists\n        list = list.slice(0, 20);\n        //Randomize list\n        list = shuffleArray(list);\n\n        if (list.length === 0) { // Found no recommendations\n          recLoadingDiv.remove();\n          d3.select(\"#recommendations\").append(\"p\")\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\n          d3.select(\"#recommendations\").append(\"a\").attr({\n            href: \"https://www.last.fm/tag/\" + name,\n            target: \"_blank\",\n          }).html(\"Try searching last.fm yourself!\");\n        }\n\n        for (let i = 0; i < Math.min(list.length, 5); i++) {\n          // Return if this callback is from an old (not active) country\n          if (centered.id !== d.id) {\n            return;\n          }\n\n          var artisturl, artistimg, artistname;\n\n          //Get url and images for recommended artists!\n          api.getArtistInfo(list[i].name, function(art) {\n            recLoadingDiv.remove();\n            var artisturl = art[0].url;\n            var artistimg = art[0].image;\n            var artistname = art[0].name;\n\n\n            var recoArtistDiv = d3.select(\"#recommendations\").insert(\"div\", \"#summaryText\").attr(\"class\", \"artist-div lowlight\");\n            var recoArtistLink = recoArtistDiv.append(\"a\").style(\"display\", \"block\")\n              //.attr(\"href\", artisturl)\n              //.attr(\"target\", \"_blank\");\n            recoArtistLink.append(\"div\")\n              .attr(\"class\", \"image-div\")\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\n\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\n\n            recoArtistInfoDiv.append(\"p\")\n              .html(\"<b>\" + artistname + \"</b>\")\n              .attr(\"class\", \"details-p\");\n\n            recoArtistDiv.on(\"click\", function() {\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\n                \"lowlight\": true,\n                \"highlight\": false\n              });\n\n              d3.select(this).classed({ // Highlight selected artist\n                \"highlight\": true,\n                \"lowlight\": false\n              });\n              makeSummaryDiv(artistname);\n            });\n\n          })\n        }\n\n\n      })\n    });\n\n  }\n\n  function removeArtistDiv() {\n    api.cancelRecommendationRequests();\n\n    infoContainer.transition().style(\"opacity\", 0).duration(1000);\n    infoContainer.classed(\"hidden\", true);\n    d3.selectAll(\"#countryCount, .on-map-view\").classed(\"hidden\", false);\n    d3.selectAll(\".artist-div\").remove(\"div\");\n    d3.selectAll(\".close-button\").remove(\"button\");\n    d3.selectAll(\".details-h\").remove(\"p\");\n    d3.selectAll(\".details-h4\").remove(\"h4\");\n    d3.selectAll(\".recom-h4\").remove(\"h4\");\n    d3.selectAll(\".artist-control\").remove();\n    d3.selectAll(\".topartists-desc\").remove();\n\n    cnameDiv.classed(\"hidden\", true);\n    d3.select(\"#cnameCont\").remove(\"h1\");\n    d3.select(\"#cnameCont\").remove(\"h5\");\n  }\n\n  function makeSummaryDiv(artistname) {\n    var usertaglist = [];\n    //console.log(usertaglist);\n    var artisttaglist = [];\n\n    d3.select(\"#summaryText\").remove();\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\n    d3.select(\"#summaryText\").append(\"img\")\n      .attr({\n        id: \"sum-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      });\n\n    //Get artist info from Lastfm\n    api.getArtistInfo(artistname, function(art) {\n      var text = art[0].description.replace(/(\\n)+/g, '<br />');\n      //var text = text.substring(6);\n      //Get artist's top tags\n      artisttaglist = art[0].tags;\n      //Create list of user tags\n\n      //Make list of artist tags which are also user's top tags:\n      for (let y = 0; y < 15; y++) {\n        for (let z = 0; z < artisttaglist.length; z++) {\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\n            usertaglist.push(USER_TAGS[y].tag)\n          }\n        }\n      }\n\n      //Create combined tag list and remove duplicates\n      var taglist = usertaglist.concat(artisttaglist);\n      taglist = taglist.filter(function(elem, pos) {\n        return taglist.indexOf(elem) == pos;\n      })\n      // Remove loading text\n      d3.select(\"#summaryText\").html(\"\");\n      //Create containing div\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\n      summaryText.style(\"max-height\", h + \"px\");\n\n      summaryText.append(\"h4\").html(artistname);\n\n      //Show top 7 tags\n      for (let i = 0; i < Math.min(taglist.length, 6); i++) {\n        var tagdiv = summaryText.append(\"div\").attr(\"class\", \"tagdiv\").append(\"h4\").html(\"#\" + taglist[i]);\n        //Mark all user tags\n        for (let p = 0; p < usertaglist.length; p++) {\n          if (taglist[i] === usertaglist[p])\n            tagdiv.classed(\"usertag\", true);\n        }\n      }\n      //Display artist summary\n      summaryText.append(\"p\").html(text || \"No description available - <a href='https://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\n\n    })\n\n  }\n\n  /**\n   * Toggles highlight of a specified country\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\n   */\n  function highlightCountry(highlight, countryElement) {\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\n\n    if (highlight) {\n      // Fade out all other countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", function() {\n          return (+this.id === +countryElement.id ? 1.0 : 0.3);\n        })\n\n      var ce = d3.select(document.getElementById(\"\" + countryElement.id)); // d3 can't select ids that are only numbers\n      ce.classed(\"highlighted\", true);\n    } else {\n      // Fade in all countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", 1.0)\n    }\n\n  }\n\n  function clicked(d) { //d är det en har klickat på\n\n    var x, y, k;\n    //bounding box for clicked country\n    var b = path.bounds(d);\n\n    getCountryPlaycount(d);\n\n    //Set scale\n    var modscaleX = (b[1][0] - b[0][0]);\n    var modscaleY = (b[1][1] - b[0][1]);\n\n    //Dom't zoom too far with small countries!\n    if (modscaleX < 80)\n      modscaleX = 80;\n\n    //Landet är inte centrerat redan\n    if (d && centered !== d) {\n      centered = d;\n      removeArtistDiv();\n      makeArtistDiv(d);\n      highlightCountry(true, d);\n\n\n      //Special rules for special countries:\n      switch (d.id) {\n        case 840: //US\n          k = 3;\n          x = -(b[1][0] + b[0][0]) / 3;\n          y = -(b[1][1] + b[0][1]) / 1.7;\n          break;\n        case 250: //France\n          k = 7.012;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 3.4;\n          break;\n        case 528: //Netherlands\n          k = 9.0124;\n          x = -(b[1][0] + b[0][0]) / 1.5;\n          y = -(b[1][1] + b[0][1]) / 3.3;\n          break;\n        case 643: //Russia\n          k = 1.9;\n          x = -(b[1][0] + b[0][0]) / 1.25;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n        case 554: //New Zeeland\n          k = 4;\n          x = -(b[1][0] + b[0][0]) / 0.90;\n          y = -(b[1][1] + b[0][1]) / 1.8;\n          break;\n        case 36: //Australia\n          k = 3.3;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 2.1;\n          break;\n\n        default: //Everybody else\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n      }\n\n      //Landet är redan centrerat\n    } else {\n      x = -width / 2;\n      y = -height / 2 - height * 0.08;\n      k = 1\n      removeArtistDiv();\n      highlightCountry(false);\n      centered = null;\n\n      //detailsDiv.classed(\"hidden\", true);\n    }\n\n    var pt = projection.translate();\n    // Tell map to move with animation\n    // Basically does the same as before: translate to middle,\n    // then to x and y with respect to scale\n    move([pt[0] + x * k, pt[1] + y * k], k, true);\n\n  }\n\n  //function to add points and text to the map (used in plotting capitals)\n  function addpoint(lat, lon, text) {\n\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\n    var x = projection([lat, lon])[0];\n    var y = projection([lat, lon])[1];\n\n    gpoint.append(\"svg:circle\")\n      .attr(\"cx\", x)\n      .attr(\"cy\", y)\n      .attr(\"class\", \"point\")\n      .attr(\"r\", 1.5);\n\n    //conditional in case a point has no associated text\n    if (text.length > 0) {\n\n      gpoint.append(\"text\")\n        .attr(\"x\", x + 2)\n        .attr(\"y\", y + 2)\n        .attr(\"class\", \"text\")\n        .text(text);\n    }\n\n  }\n\n  /** \"PUBLUC\" FUNCTIONS **/\n  map.putCountryCount = function(object) {\n    countryCount = JSON.parse(JSON.stringify(object));\n    countryScore = 0;\n    var countryList = [];\n\n    // Extract info for the current user\n    d3.keys(countryCount).forEach(function(id) {\n      if (countryCount[id][SESSION.name]) {\n        countryCount[id] = countryCount[id][SESSION.name];\n        countryScore = countryScore + 1;\n        countryList.push(+id)\n      } else {\n        // delete countryCount[id];\n      }\n    })\n\n    if (topo) redraw();\n\n    window.countryScore = countryScore;\n\n  }\n})(window, document)\n","var screenshot = {};\n\n(function (window, document) {\n\tscreenshot.render = function () {\n\t\tvar titleString,\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\n\t\t\timg;\n\n\t\tvar explrLogo = new Image();\n\n\t\tvar svg = d3.select(\"#map-svg\");\n\t\tvar w = svg.attr(\"width\");\n\t\tvar h = svg.attr(\"height\");\n\n\t\tvar canvas = document.createElement(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\n\t\t// canvg(canvas, document.getElementById(\"map-svg\").outerHTML);\n\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\n\t\tvar textColor = window.getComputedStyle(document.body).color;\n\n\t\tvar drawCenteredText = function (obj) {\n\t\t\tctx.font = obj.font;\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\n\t\t\tif (obj.lineWidth) {\n\t\t\t\tctx.lineWidth = obj.lineWidth;\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\t\t\t}\n\t\t}\n\n\t\tcanvas.width = w;\n\t\tcanvas.height = h;\n\n\t\t// insert background rect\n\t\tsvg.insert(\"rect\", \"g\")\n\t\t\t.attr({\n\t\t\t\tid: \"background-rect\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\theight: \"100%\",\n\n\t\t\t})\n\t\t\t.style({\n\t\t\t\tfill: backgroundColor,\n\t\t\t});\n\n\t\t// Add color, font to legend text\n\t\td3.selectAll('.legend text, text.legend').style({\n\t\t\t\"font-family\": function () {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\n\t\t\t},\n\t\t\t\"font-size\": function () {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\n\t\t\t},\n\t\t\t\"fill\": textColor,\n\t\t});\n\t\td3.selectAll(\".legend rect\").style({\n\t\t\tstroke: backgroundColor,\n\t\t})\n\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\n\n\t\texplrLogo.onload = function () {\n\t\t\t/* Add text and shiiet */\n\t\t\t// Add text background box\n\t\t\tctx.save(); // To draw with different opaticy\n\t\t\tctx.globalAlpha = 0.6;\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tlet scoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 210 countries\";\n\t\t\tlet titleString = SESSION.name + \"'s musical world map\";\n\t\t\tctx.font = \"34px Patua One\";\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\n\t\t\tctx.fillStyle = textColor;\n\n\t\t\t// Add text\n\t\t\tctx.fillStyle = textColor;\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: titleString,\n\t\t\t\tfont: \"34px Patua One\",\n\t\t\t\ty: h - 60,\n\t\t\t});\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: scoreString,\n\t\t\t\tfont: \"20px Didact Gothic\",\n\t\t\t\ty: h - 40,\n\t\t\t});\n\n\t\t\t// Add explr.fm logo\n\t\t\tctx.restore();\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\n\n\t\t\td3.select(\"#background-rect\").remove();\n\n\t\t\t//console.log(canvas.toDataURL())\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL(\"image/png\");\n\t\t\t// d3.select(\"body\").append(img);\n\t\t\t//\n\n\t\t\tvar dataurl = canvas.toDataURL(\"image/png\");\n\t\t\t// console.log(\"dataurl:\", dataurl)\n\n\t\t\t// window.open(dataurl, \"_blank\");\n\n\t\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"\";\n\n\t\t}\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\n\t}\n\n\tscreenshot.close = function () {\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"display:none;\";\n\t}\n\n})(window, document);\n"]}